(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :
    typeof define === 'function' && define.amd ? define(['jquery'], factory) :
    (factory(global.$));
}(this, (function ($$1) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;

    var defaults = {
      pceUrl: '//pce.afd.co.uk/afddata.pce',
      nativeValidationMessages: false,
      defaultCountry: null,
      afdc: 0,
      phone: {
        defaultDialingCode: '+44',
        invalidPhoneNumberMessage: 'Please input a valid phone number',
        loadingSpinner: null,
        countryControl: null,
        countryControlConverter: null
      },
      email: {
        invalidEmailMessage: 'Please input a valid email address',
        loadingSpinner: null
      },
      card: {
        invalidCardNumberMessage: 'Please input a valid card number',
        invalidCardOrExpiryMessage: 'Either the card number or expiry date are not valid',
        invalidExpiryMonthMessage: 'Please input a valid month',
        invalidExpiryDateMessage: 'Please input a valid expiry date',
        loadingSpinner: null,
        logoHeight: 16,
        logoWidth: 24
      },
      account: {
        invalidAccountNumberMessage: 'Please input a valid account number',
        invalidSortCodeMessage: 'Please input a valid Sort Code',
        loadingSpinner: null
      },
      typeahead: {
        maxItems: 5,
        pushUp: false,
        afterHideTypeahead: false,
        searchAgain: true,
        afterClearTypeahead: true,
        beforeHideResults: false,
        parentClass: null,
        fieldSets: [],
        manualInputButton: false,
        fewResultsManualInput: true,
        fewResultsManualInputText: 'Can\'t see your address? Enter it manually',
        notEmptyShowResults: false,
        hideEmpties: false,
        containers: [],
        retrieveFields: 'standard',
        availableCountries: [],
        minLength: 2,
        matchPositions: false,
        postcodeFirst: true,
        hideForCountries: [],
        showForCountries: [],
        containerOnlyContainsControl: false,
        regionMap: null,
        regionAttribute: 'value'
      },
      lookup: {
        prefetch: true,
        pushUp: false,
        beforeHideResults: false,
        parentClass: null,
        fieldSets: [],
        manualInputButton: false,
        hideEmpties: false,
        afterRetrieveHideResultsList: true,
        postcodeIsLookup: false,
        resultsContainer: '',
        containers: [],
        retrieveFields: 'standard',
        availableCountries: [],
        postcodeFirst: true,
        hideForCountries: [],
        showForCountries: [],
        regionMap: null,
        regionAttribute: 'value',
        selectAddressText: 'Please select an address'
      },
      country: {
        defaultCountry: null,
        availableCountries: [],
        customCountryControl: null,
        customCountryConverter: null
      },
      reverseGeocode: {
        maxItems: 100,
        pushUp: false,
        fieldSets: [],
        hideEmpties: false,
        afterRetrieveHideResultsList: true,
        containers: [],
        retrieveFields: 'standard',
        postcodeFirst: true,
        hideForCountries: [],
        showForCountries: ['GBR'],
        linkedControl: 'typeahead',
        hideOnDesktop: false,
        buttonContainer: null
      }
    };

    var _isObject = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    var _anObject = function (it) {
      if (!_isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };

    var _fails = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };

    // Thank's IE8 for his funny defineProperty
    var _descriptors = !_fails(function () {
      return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
    });

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
    });

    var document$1 = _global.document;
    // typeof document.createElement is 'object' in old IE
    var is = _isObject(document$1) && _isObject(document$1.createElement);
    var _domCreate = function (it) {
      return is ? document$1.createElement(it) : {};
    };

    var _ie8DomDefine = !_descriptors && !_fails(function () {
      return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
    });

    // 7.1.1 ToPrimitive(input [, PreferredType])

    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var _toPrimitive = function (it, S) {
      if (!_isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };

    var dP = Object.defineProperty;

    var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      _anObject(O);
      P = _toPrimitive(P, true);
      _anObject(Attributes);
      if (_ie8DomDefine) try {
        return dP(O, P, Attributes);
      } catch (e) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };

    var _objectDp = {
    	f: f
    };

    var dP$1 = _objectDp.f;
    var FProto = Function.prototype;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME = 'name';

    // 19.2.4.2 name
    NAME in FProto || _descriptors && dP$1(FProto, NAME, {
      configurable: true,
      get: function () {
        try {
          return ('' + this).match(nameRE)[1];
        } catch (e) {
          return '';
        }
      }
    });

    var _propertyDesc = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    var _hide = _descriptors ? function (object, key, value) {
      return _objectDp.f(object, key, _propertyDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };

    var hasOwnProperty = {}.hasOwnProperty;
    var _has = function (it, key) {
      return hasOwnProperty.call(it, key);
    };

    var id = 0;
    var px = Math.random();
    var _uid = function (key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };

    var _core = createCommonjsModule(function (module) {
    var core = module.exports = { version: '2.5.7' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
    });
    var _core_1 = _core.version;

    var _redefine = createCommonjsModule(function (module) {
    var SRC = _uid('src');
    var TO_STRING = 'toString';
    var $toString = Function[TO_STRING];
    var TPL = ('' + $toString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return $toString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
    });

    // 7.2.1 RequireObjectCoercible(argument)
    var _defined = function (it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };

    var _library = false;

    var _shared = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});

    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode: 'global',
      copyright: 'Â© 2018 Denis Pushkarev (zloirock.ru)'
    });
    });

    var _wks = createCommonjsModule(function (module) {
    var store = _shared('wks');

    var Symbol = _global.Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] =
        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
    };

    $exports.store = store;
    });

    var _fixReWks = function (KEY, length, exec) {
      var SYMBOL = _wks(KEY);
      var fns = exec(_defined, SYMBOL, ''[KEY]);
      var strfn = fns[0];
      var rxfn = fns[1];
      if (_fails(function () {
        var O = {};
        O[SYMBOL] = function () { return 7; };
        return ''[KEY](O) != 7;
      })) {
        _redefine(String.prototype, KEY, strfn);
        _hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) { return rxfn.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) { return rxfn.call(string, this); }
        );
      }
    };

    // @@replace logic
    _fixReWks('replace', 2, function (defined, REPLACE, $replace) {
      // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
      return [function replace(searchValue, replaceValue) {
        var O = defined(this);
        var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined
          ? fn.call(searchValue, O, replaceValue)
          : $replace.call(String(O), searchValue, replaceValue);
      }, $replace];
    });

    var _aFunction = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };

    // optional / simple context binding

    var _ctx = function (fn, that, length) {
      _aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1: return function (a) {
          return fn.call(that, a);
        };
        case 2: return function (a, b) {
          return fn.call(that, a, b);
        };
        case 3: return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
      }
      return function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };

    var PROTOTYPE = 'prototype';

    var $export = function (type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
      var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
      var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
      var key, own, out, exp;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
        // extend global
        if (target) _redefine(target, key, out, type & $export.U);
        // export
        if (exports[key] != out) _hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };
    _global.core = _core;
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library`
    var _export = $export;

    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;
    var _toInteger = function (it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };

    // 7.1.15 ToLength

    var min = Math.min;
    var _toLength = function (it) {
      return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };

    var toString = {}.toString;

    var _cof = function (it) {
      return toString.call(it).slice(8, -1);
    };

    // 7.2.8 IsRegExp(argument)


    var MATCH = _wks('match');
    var _isRegexp = function (it) {
      var isRegExp;
      return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
    };

    // helper for String#{startsWith, endsWith, includes}



    var _stringContext = function (that, searchString, NAME) {
      if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(_defined(that));
    };

    var MATCH$1 = _wks('match');
    var _failsIsRegexp = function (KEY) {
      var re = /./;
      try {
        '/./'[KEY](re);
      } catch (e) {
        try {
          re[MATCH$1] = false;
          return !'/./'[KEY](re);
        } catch (f) { /* empty */ }
      } return true;
    };

    var STARTS_WITH = 'startsWith';
    var $startsWith = ''[STARTS_WITH];

    _export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString /* , position = 0 */) {
        var that = _stringContext(this, searchString, STARTS_WITH);
        var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith
          ? $startsWith.call(that, search, index)
          : that.slice(index, index + search.length) === search;
      }
    });

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var classCallCheck = _classCallCheck;

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    var createClass = _createClass;

    var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
    });

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    var assertThisInitialized = _assertThisInitialized;

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
        return call;
      }

      return assertThisInitialized(self);
    }

    var possibleConstructorReturn = _possibleConstructorReturn;

    var getPrototypeOf = createCommonjsModule(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf;
    });

    var setPrototypeOf = createCommonjsModule(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf;
    });

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }

    var inherits = _inherits;

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    var defineProperty = _defineProperty;

    var codes = [
      ["AF","AFG","004","ISO 3166-2:AF"],
      ["AX","ALA","248","ISO 3166-2:AX"],
      ["AL","ALB","008","ISO 3166-2:AL"],
      ["DZ","DZA","012","ISO 3166-2:DZ"],
      ["AS","ASM","016","ISO 3166-2:AS"],
      ["AD","AND","020","ISO 3166-2:AD"],
      ["AO","AGO","024","ISO 3166-2:AO"],
      ["AI","AIA","660","ISO 3166-2:AI"],
      ["AQ","ATA","010","ISO 3166-2:AQ"],
      ["AG","ATG","028","ISO 3166-2:AG"],
      ["AR","ARG","032","ISO 3166-2:AR"],
      ["AM","ARM","051","ISO 3166-2:AM"],
      ["AW","ABW","533","ISO 3166-2:AW"],
      ["AU","AUS","036","ISO 3166-2:AU"],
      ["AT","AUT","040","ISO 3166-2:AT"],
      ["AZ","AZE","031","ISO 3166-2:AZ"],
      ["BS","BHS","044","ISO 3166-2:BS"],
      ["BH","BHR","048","ISO 3166-2:BH"],
      ["BD","BGD","050","ISO 3166-2:BD"],
      ["BB","BRB","052","ISO 3166-2:BB"],
      ["BY","BLR","112","ISO 3166-2:BY"],
      ["BE","BEL","056","ISO 3166-2:BE"],
      ["BZ","BLZ","084","ISO 3166-2:BZ"],
      ["BJ","BEN","204","ISO 3166-2:BJ"],
      ["BM","BMU","060","ISO 3166-2:BM"],
      ["BT","BTN","064","ISO 3166-2:BT"],
      ["BO","BOL","068","ISO 3166-2:BO"],
      ["BQ","BES","535","ISO 3166-2:BQ"],
      ["BA","BIH","070","ISO 3166-2:BA"],
      ["BW","BWA","072","ISO 3166-2:BW"],
      ["BV","BVT","074","ISO 3166-2:BV"],
      ["BR","BRA","076","ISO 3166-2:BR"],
      ["IO","IOT","086","ISO 3166-2:IO"],
      ["BN","BRN","096","ISO 3166-2:BN"],
      ["BG","BGR","100","ISO 3166-2:BG"],
      ["BF","BFA","854","ISO 3166-2:BF"],
      ["BI","BDI","108","ISO 3166-2:BI"],
      ["KH","KHM","116","ISO 3166-2:KH"],
      ["CM","CMR","120","ISO 3166-2:CM"],
      ["CA","CAN","124","ISO 3166-2:CA"],
      ["CV","CPV","132","ISO 3166-2:CV"],
      ["KY","CYM","136","ISO 3166-2:KY"],
      ["CF","CAF","140","ISO 3166-2:CF"],
      ["TD","TCD","148","ISO 3166-2:TD"],
      ["CL","CHL","152","ISO 3166-2:CL"],
      ["CN","CHN","156","ISO 3166-2:CN"],
      ["CX","CXR","162","ISO 3166-2:CX"],
      ["CC","CCK","166","ISO 3166-2:CC"],
      ["CO","COL","170","ISO 3166-2:CO"],
      ["KM","COM","174","ISO 3166-2:KM"],
      ["CG","COG","178","ISO 3166-2:CG"],
      ["CD","COD","180","ISO 3166-2:CD"],
      ["CK","COK","184","ISO 3166-2:CK"],
      ["CR","CRI","188","ISO 3166-2:CR"],
      ["CI","CIV","384","ISO 3166-2:CI"],
      ["HR","HRV","191","ISO 3166-2:HR"],
      ["CU","CUB","192","ISO 3166-2:CU"],
      ["CW","CUW","531","ISO 3166-2:CW"],
      ["CY","CYP","196","ISO 3166-2:CY"],
      ["CZ","CZE","203","ISO 3166-2:CZ"],
      ["DK","DNK","208","ISO 3166-2:DK"],
      ["DJ","DJI","262","ISO 3166-2:DJ"],
      ["DM","DMA","212","ISO 3166-2:DM"],
      ["DO","DOM","214","ISO 3166-2:DO"],
      ["EC","ECU","218","ISO 3166-2:EC"],
      ["EG","EGY","818","ISO 3166-2:EG"],
      ["SV","SLV","222","ISO 3166-2:SV"],
      ["GQ","GNQ","226","ISO 3166-2:GQ"],
      ["ER","ERI","232","ISO 3166-2:ER"],
      ["EE","EST","233","ISO 3166-2:EE"],
      ["ET","ETH","231","ISO 3166-2:ET"],
      ["FK","FLK","238","ISO 3166-2:FK"],
      ["FO","FRO","234","ISO 3166-2:FO"],
      ["FJ","FJI","242","ISO 3166-2:FJ"],
      ["FI","FIN","246","ISO 3166-2:FI"],
      ["FR","FRA","250","ISO 3166-2:FR"],
      ["GF","GUF","254","ISO 3166-2:GF"],
      ["PF","PYF","258","ISO 3166-2:PF"],
      ["TF","ATF","260","ISO 3166-2:TF"],
      ["GA","GAB","266","ISO 3166-2:GA"],
      ["GM","GMB","270","ISO 3166-2:GM"],
      ["GE","GEO","268","ISO 3166-2:GE"],
      ["DE","DEU","276","ISO 3166-2:DE"],
      ["GH","GHA","288","ISO 3166-2:GH"],
      ["GI","GIB","292","ISO 3166-2:GI"],
      ["GR","GRC","300","ISO 3166-2:GR"],
      ["GL","GRL","304","ISO 3166-2:GL"],
      ["GD","GRD","308","ISO 3166-2:GD"],
      ["GP","GLP","312","ISO 3166-2:GP"],
      ["GU","GUM","316","ISO 3166-2:GU"],
      ["GT","GTM","320","ISO 3166-2:GT"],
      ["GG","GGY","831","ISO 3166-2:GG"],
      ["GN","GIN","324","ISO 3166-2:GN"],
      ["GW","GNB","624","ISO 3166-2:GW"],
      ["GY","GUY","328","ISO 3166-2:GY"],
      ["HT","HTI","332","ISO 3166-2:HT"],
      ["HM","HMD","334","ISO 3166-2:HM"],
      ["VA","VAT","336","ISO 3166-2:VA"],
      ["HN","HND","340","ISO 3166-2:HN"],
      ["HK","HKG","344","ISO 3166-2:HK"],
      ["HU","HUN","348","ISO 3166-2:HU"],
      ["IS","ISL","352","ISO 3166-2:IS"],
      ["IN","IND","356","ISO 3166-2:IN"],
      ["ID","IDN","360","ISO 3166-2:ID"],
      ["IR","IRN","364","ISO 3166-2:IR"],
      ["IQ","IRQ","368","ISO 3166-2:IQ"],
      ["IE","IRL","372","ISO 3166-2:IE"],
      ["IM","IMN","833","ISO 3166-2:IM"],
      ["IL","ISR","376","ISO 3166-2:IL"],
      ["IT","ITA","380","ISO 3166-2:IT"],
      ["JM","JAM","388","ISO 3166-2:JM"],
      ["JP","JPN","392","ISO 3166-2:JP"],
      ["JE","JEY","832","ISO 3166-2:JE"],
      ["JO","JOR","400","ISO 3166-2:JO"],
      ["KZ","KAZ","398","ISO 3166-2:KZ"],
      ["KE","KEN","404","ISO 3166-2:KE"],
      ["KI","KIR","296","ISO 3166-2:KI"],
      ["KP","PRK","408","ISO 3166-2:KP"],
      ["KR","KOR","410","ISO 3166-2:KR"],
      ["KW","KWT","414","ISO 3166-2:KW"],
      ["KG","KGZ","417","ISO 3166-2:KG"],
      ["LA","LAO","418","ISO 3166-2:LA"],
      ["LV","LVA","428","ISO 3166-2:LV"],
      ["LB","LBN","422","ISO 3166-2:LB"],
      ["LS","LSO","426","ISO 3166-2:LS"],
      ["LR","LBR","430","ISO 3166-2:LR"],
      ["LY","LBY","434","ISO 3166-2:LY"],
      ["LI","LIE","438","ISO 3166-2:LI"],
      ["LT","LTU","440","ISO 3166-2:LT"],
      ["LU","LUX","442","ISO 3166-2:LU"],
      ["MO","MAC","446","ISO 3166-2:MO"],
      ["MK","MKD","807","ISO 3166-2:MK"],
      ["MG","MDG","450","ISO 3166-2:MG"],
      ["MW","MWI","454","ISO 3166-2:MW"],
      ["MY","MYS","458","ISO 3166-2:MY"],
      ["MV","MDV","462","ISO 3166-2:MV"],
      ["ML","MLI","466","ISO 3166-2:ML"],
      ["MT","MLT","470","ISO 3166-2:MT"],
      ["MH","MHL","584","ISO 3166-2:MH"],
      ["MQ","MTQ","474","ISO 3166-2:MQ"],
      ["MR","MRT","478","ISO 3166-2:MR"],
      ["MU","MUS","480","ISO 3166-2:MU"],
      ["YT","MYT","175","ISO 3166-2:YT"],
      ["MX","MEX","484","ISO 3166-2:MX"],
      ["FM","FSM","583","ISO 3166-2:FM"],
      ["MD","MDA","498","ISO 3166-2:MD"],
      ["MC","MCO","492","ISO 3166-2:MC"],
      ["MN","MNG","496","ISO 3166-2:MN"],
      ["ME","MNE","499","ISO 3166-2:ME"],
      ["MS","MSR","500","ISO 3166-2:MS"],
      ["MA","MAR","504","ISO 3166-2:MA"],
      ["MZ","MOZ","508","ISO 3166-2:MZ"],
      ["MM","MMR","104","ISO 3166-2:MM"],
      ["NA","NAM","516","ISO 3166-2:NA"],
      ["NR","NRU","520","ISO 3166-2:NR"],
      ["NP","NPL","524","ISO 3166-2:NP"],
      ["NL","NLD","528","ISO 3166-2:NL"],
      ["NC","NCL","540","ISO 3166-2:NC"],
      ["NZ","NZL","554","ISO 3166-2:NZ"],
      ["NI","NIC","558","ISO 3166-2:NI"],
      ["NE","NER","562","ISO 3166-2:NE"],
      ["NG","NGA","566","ISO 3166-2:NG"],
      ["NU","NIU","570","ISO 3166-2:NU"],
      ["NF","NFK","574","ISO 3166-2:NF"],
      ["MP","MNP","580","ISO 3166-2:MP"],
      ["NO","NOR","578","ISO 3166-2:NO"],
      ["OM","OMN","512","ISO 3166-2:OM"],
      ["PK","PAK","586","ISO 3166-2:PK"],
      ["PW","PLW","585","ISO 3166-2:PW"],
      ["PS","PSE","275","ISO 3166-2:PS"],
      ["PA","PAN","591","ISO 3166-2:PA"],
      ["PG","PNG","598","ISO 3166-2:PG"],
      ["PY","PRY","600","ISO 3166-2:PY"],
      ["PE","PER","604","ISO 3166-2:PE"],
      ["PH","PHL","608","ISO 3166-2:PH"],
      ["PN","PCN","612","ISO 3166-2:PN"],
      ["PL","POL","616","ISO 3166-2:PL"],
      ["PT","PRT","620","ISO 3166-2:PT"],
      ["PR","PRI","630","ISO 3166-2:PR"],
      ["QA","QAT","634","ISO 3166-2:QA"],
      ["RE","REU","638","ISO 3166-2:RE"],
      ["RO","ROU","642","ISO 3166-2:RO"],
      ["RU","RUS","643","ISO 3166-2:RU"],
      ["RW","RWA","646","ISO 3166-2:RW"],
      ["BL","BLM","652","ISO 3166-2:BL"],
      ["SH","SHN","654","ISO 3166-2:SH"],
      ["KN","KNA","659","ISO 3166-2:KN"],
      ["LC","LCA","662","ISO 3166-2:LC"],
      ["MF","MAF","663","ISO 3166-2:MF"],
      ["PM","SPM","666","ISO 3166-2:PM"],
      ["VC","VCT","670","ISO 3166-2:VC"],
      ["WS","WSM","882","ISO 3166-2:WS"],
      ["SM","SMR","674","ISO 3166-2:SM"],
      ["ST","STP","678","ISO 3166-2:ST"],
      ["SA","SAU","682","ISO 3166-2:SA"],
      ["SN","SEN","686","ISO 3166-2:SN"],
      ["RS","SRB","688","ISO 3166-2:RS"],
      ["SC","SYC","690","ISO 3166-2:SC"],
      ["SL","SLE","694","ISO 3166-2:SL"],
      ["SG","SGP","702","ISO 3166-2:SG"],
      ["SX","SXM","534","ISO 3166-2:SX"],
      ["SK","SVK","703","ISO 3166-2:SK"],
      ["SI","SVN","705","ISO 3166-2:SI"],
      ["SB","SLB","090","ISO 3166-2:SB"],
      ["SO","SOM","706","ISO 3166-2:SO"],
      ["ZA","ZAF","710","ISO 3166-2:ZA"],
      ["GS","SGS","239","ISO 3166-2:GS"],
      ["SS","SSD","728","ISO 3166-2:SS"],
      ["ES","ESP","724","ISO 3166-2:ES"],
      ["LK","LKA","144","ISO 3166-2:LK"],
      ["SD","SDN","729","ISO 3166-2:SD"],
      ["SR","SUR","740","ISO 3166-2:SR"],
      ["SJ","SJM","744","ISO 3166-2:SJ"],
      ["SZ","SWZ","748","ISO 3166-2:SZ"],
      ["SE","SWE","752","ISO 3166-2:SE"],
      ["CH","CHE","756","ISO 3166-2:CH"],
      ["SY","SYR","760","ISO 3166-2:SY"],
      ["TW","TWN","158","ISO 3166-2:TW"],
      ["TJ","TJK","762","ISO 3166-2:TJ"],
      ["TZ","TZA","834","ISO 3166-2:TZ"],
      ["TH","THA","764","ISO 3166-2:TH"],
      ["TL","TLS","626","ISO 3166-2:TL"],
      ["TG","TGO","768","ISO 3166-2:TG"],
      ["TK","TKL","772","ISO 3166-2:TK"],
      ["TO","TON","776","ISO 3166-2:TO"],
      ["TT","TTO","780","ISO 3166-2:TT"],
      ["TN","TUN","788","ISO 3166-2:TN"],
      ["TR","TUR","792","ISO 3166-2:TR"],
      ["TM","TKM","795","ISO 3166-2:TM"],
      ["TC","TCA","796","ISO 3166-2:TC"],
      ["TV","TUV","798","ISO 3166-2:TV"],
      ["UG","UGA","800","ISO 3166-2:UG"],
      ["UA","UKR","804","ISO 3166-2:UA"],
      ["AE","ARE","784","ISO 3166-2:AE"],
      ["GB","GBR","826","ISO 3166-2:GB"],
      ["US","USA","840","ISO 3166-2:US"],
      ["UM","UMI","581","ISO 3166-2:UM"],
      ["UY","URY","858","ISO 3166-2:UY"],
      ["UZ","UZB","860","ISO 3166-2:UZ"],
      ["VU","VUT","548","ISO 3166-2:VU"],
      ["VE","VEN","862","ISO 3166-2:VE"],
      ["VN","VNM","704","ISO 3166-2:VN"],
      ["VG","VGB","092","ISO 3166-2:VG"],
      ["VI","VIR","850","ISO 3166-2:VI"],
      ["WF","WLF","876","ISO 3166-2:WF"],
      ["EH","ESH","732","ISO 3166-2:EH"],
      ["YE","YEM","887","ISO 3166-2:YE"],
      ["ZM","ZMB","894","ISO 3166-2:ZM"],
      ["ZW","ZWE","716","ISO 3166-2:ZW"],
      ["XK","XKX","","ISO 3166-2:XK"]
    ]
    ;

    var codes$1 = /*#__PURE__*/Object.freeze({
        default: codes
    });

    var codes$2 = ( codes$1 && codes ) || codes$1;

    var registeredLocales = {};

    /*
     * All codes map to ISO 3166-1 alpha-2
     */
    var alpha2 = {},
      alpha3 = {},
      numeric = {},
      invertedNumeric = {};

    codes$2.forEach(function(codeInformation) {
      var s = codeInformation;
      alpha2[s[0]] = s[1];
      alpha3[s[1]] = s[0];
      numeric[s[2]] = s[0];
      invertedNumeric[s[0]] = s[2];
    });

    function formatNumericCode(code) {
      return String('000'+(code ? code : '')).slice(-3);
    }

    function registerLocale(localeData) {
      if (!localeData.locale) {
        throw new TypeError('Missing localeData.locale');
      }

      if (!localeData.countries) {
        throw new TypeError('Missing localeData.countries');
      }

      registeredLocales[localeData.locale] = localeData.countries;
    }

    var registerLocale_1 = registerLocale;

    /*
     * @param code Alpha-3 code
     * @return Alpha-2 code or undefined
     */
    function alpha3ToAlpha2(code) {
      return alpha3[code];
    }
    var alpha3ToAlpha2_1 = alpha3ToAlpha2;

    /*
     * @param code Alpha-2 code
     * @return Alpha-3 code or undefined
     */
    function alpha2ToAlpha3(code) {
      return alpha2[code];
    }
    var alpha2ToAlpha3_1 = alpha2ToAlpha3;

    /*
     * @param code Alpha-3 code
     * @return Numeric code or undefined
     */
    function alpha3ToNumeric(code) {
      return invertedNumeric[alpha3ToAlpha2(code)];
    }
    var alpha3ToNumeric_1 = alpha3ToNumeric;

    /*
     * @param code Alpha-2 code
     * @return Numeric code or undefined
     */
    function alpha2ToNumeric(code) {
      return invertedNumeric[code];
    }
    var alpha2ToNumeric_1 = alpha2ToNumeric;

    /*
     * @param code Numeric code
     * @return Alpha-3 code or undefined
     */
    function numericToAlpha3(code) {
      var padded = formatNumericCode(code);
      return alpha2ToAlpha3(numeric[padded]);
    }
    var numericToAlpha3_1 = numericToAlpha3;

    /*
     * @param code Numeric code
     * @return Alpha-2 code or undefined
     */
    function numericToAlpha2(code) {
      var padded = formatNumericCode(code);
      return numeric[padded];
    }
    var numericToAlpha2_1 = numericToAlpha2;

    /*
     * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code
     * @return ISO 3166-1 alpha-3
     */
    function toAlpha3(code) {
      if (typeof code === "string") {
        if (/^[0-9]*$/.test(code)) {
          return numericToAlpha3(code);
        }
        if(code.length === 2) {
          return alpha2ToAlpha3(code.toUpperCase());
        }
        if (code.length === 3) {
          return code.toUpperCase();
        }
      }
      if (typeof code === "number") {
        return numericToAlpha3(code);
      }
      return undefined;
    }
    var toAlpha3_1 = toAlpha3;

    /*
     * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code
     * @return ISO 3166-1 alpha-2
     */
    function toAlpha2(code) {
      if (typeof code === "string") {
        if (/^[0-9]*$/.test(code)) {
          return numericToAlpha2(code);
        }
        if (code.length === 2) {
          return code.toUpperCase();
        }
        if(code.length === 3) {
          return alpha3ToAlpha2(code.toUpperCase());
        }
      }
      if (typeof code === "number") {
        return numericToAlpha2(code);
      }
      return undefined;
    }
    var toAlpha2_1 = toAlpha2;

    /*
     * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code
     * @param lang language for country name
     * @return name or undefined
     */
    var getName = function(code, lang) {
      try {
        var d = registeredLocales[lang.toLowerCase()];
        return d[toAlpha2(code)];
      } catch (err) {
        return undefined;
      }
    };

    /*
     * @param lang language for country names
     * @return Object of country code mapped to county name
     */
    var getNames = function(lang) {
      var d = registeredLocales[lang.toLowerCase()];
      if (d === undefined) {
        return {};
      }
      return d;
    };

    /*
     * @param name name
     * @param lang language for country name
     * @return ISO 3166-1 alpha-2 or undefined
     */
    var getAlpha2Code = function(name, lang) {
      try {
        var p, codenames = registeredLocales[lang.toLowerCase()];
        for (p in codenames) {
          if (codenames.hasOwnProperty(p)) {
            if (codenames[p].toLowerCase() === name.toLowerCase()) {
              return p;
            }
          }
        }
        return undefined;
      } catch (err) {
        return undefined;
      }
    };

    /*
     * @return Object of alpha-2 codes mapped to alpha-3 codes
     */
    var getAlpha2Codes = function() {
      return alpha2;
    };

    /*
     * @param name name
     * @param lang language for country name
     * @return ISO 3166-1 alpha-3 or undefined
     */
    var getAlpha3Code = function(name, lang) {
      var alpha2 = this.getAlpha2Code(name, lang);
      if (alpha2) {
        return this.toAlpha3(alpha2);
      } else {
        return undefined;
      }
    };

    /*
     * @return Object of alpha-3 codes mapped to alpha-2 codes
     */
    var getAlpha3Codes = function() {
      return alpha3;
    };

    /*
     * @return Object of numeric codes mapped to alpha-2 codes
     */
    var getNumericCodes = function() {
      return numeric;
    };

    /*
     * @return Array of supported languages
     */
    var langs = function() {
      return Object.keys(registeredLocales);
    };

    /*
     * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code
     * @return Boolean
     */
    var isValid = function(code) {
      if (!code) {
        return false;
      }

      var coerced = code.toString().toUpperCase();
      return alpha3.hasOwnProperty(coerced) || alpha2.hasOwnProperty(coerced) ||
        numeric.hasOwnProperty(coerced);
    };

    var i18nIsoCountries = {
    	registerLocale: registerLocale_1,
    	alpha3ToAlpha2: alpha3ToAlpha2_1,
    	alpha2ToAlpha3: alpha2ToAlpha3_1,
    	alpha3ToNumeric: alpha3ToNumeric_1,
    	alpha2ToNumeric: alpha2ToNumeric_1,
    	numericToAlpha3: numericToAlpha3_1,
    	numericToAlpha2: numericToAlpha2_1,
    	toAlpha3: toAlpha3_1,
    	toAlpha2: toAlpha2_1,
    	getName: getName,
    	getNames: getNames,
    	getAlpha2Code: getAlpha2Code,
    	getAlpha2Codes: getAlpha2Codes,
    	getAlpha3Code: getAlpha3Code,
    	getAlpha3Codes: getAlpha3Codes,
    	getNumericCodes: getNumericCodes,
    	langs: langs,
    	isValid: isValid
    };

    var locale = "ar";
    var countries = {
    	AF: " Ø£ÙØºØ§ÙØ³ØªØ§Ù",
    	AL: " Ø£ÙØ¨Ø§ÙÙØ§",
    	DZ: " Ø§ÙØ¬Ø²Ø§Ø¦Ø±",
    	AS: " Ø³Ø§ÙÙØ§ Ø§ÙØ£ÙØ±ÙÙÙØ©",
    	AD: " Ø£ÙØ¯ÙØ±Ø§",
    	AO: " Ø£ÙØºÙÙØ§",
    	AI: " Ø£ÙØºÙÙÙØ§",
    	AQ: " Ø§ÙÙØ§Ø±Ø© Ø§ÙÙØ·Ø¨ÙØ© Ø§ÙØ¬ÙÙØ¨ÙØ©",
    	AG: " Ø£ÙØªÙØºÙØ§ ÙØ¨Ø§Ø±Ø¨ÙØ¯Ø§",
    	AR: " Ø§ÙØ£Ø±Ø¬ÙØªÙÙ",
    	AM: " Ø£Ø±ÙÙÙÙØ§",
    	AW: " Ø£Ø±ÙØ¨Ø§",
    	AU: " Ø£Ø³ØªØ±Ø§ÙÙØ§",
    	AT: " Ø§ÙÙÙØ³Ø§",
    	AZ: " Ø£Ø°Ø±Ø¨ÙØ¬Ø§Ù",
    	BS: " Ø¨Ø§ÙØ§ÙØ§Ø³",
    	BH: " Ø§ÙØ¨Ø­Ø±ÙÙ",
    	BD: " Ø¨ÙØºÙØ§Ø¯ÙØ´",
    	BB: " Ø¨Ø§Ø±Ø¨Ø§Ø¯ÙØ³",
    	BY: " Ø±ÙØ³ÙØ§ Ø§ÙØ¨ÙØ¶Ø§Ø¡",
    	BE: " Ø¨ÙØ¬ÙÙØ§",
    	BZ: " Ø¨ÙÙØ²",
    	BJ: " Ø¨ÙÙÙ",
    	BM: " Ø¨Ø±ÙÙØ¯Ø§",
    	BT: " Ø¨ÙØªØ§Ù",
    	BO: " Ø¨ÙÙÙÙÙØ§",
    	BA: " Ø§ÙØ¨ÙØ³ÙØ© ÙØ§ÙÙØ±Ø³Ù",
    	BW: " Ø¨ÙØªØ³ÙØ§ÙØ§",
    	BV: " Ø¬Ø²ÙØ±Ø© Ø¨ÙÙÙÙ",
    	BR: " Ø§ÙØ¨Ø±Ø§Ø²ÙÙ",
    	IO: " Ø¥ÙÙÙÙ Ø§ÙÙØ­ÙØ· Ø§ÙÙÙØ¯Ù Ø§ÙØ¨Ø±ÙØ·Ø§ÙÙ",
    	BN: " Ø¨Ø±ÙÙØ§Ù",
    	BG: " Ø¨ÙØºØ§Ø±ÙØ§",
    	BF: " Ø¨ÙØ±ÙÙÙØ§ ÙØ§Ø³Ù",
    	BI: " Ø¨ÙØ±ÙÙØ¯Ù",
    	KH: " ÙÙØ¨ÙØ¯ÙØ§",
    	CM: " Ø§ÙÙØ§ÙÙØ±ÙÙ",
    	CA: " ÙÙØ¯Ø§",
    	CV: " Ø§ÙØ±Ø£Ø³ Ø§ÙØ£Ø®Ø¶Ø±",
    	KY: " Ø¬Ø²Ø± ÙØ§ÙÙØ§Ù",
    	CF: " Ø¬ÙÙÙØ±ÙØ© Ø£ÙØ±ÙÙÙØ§ Ø§ÙÙØ³Ø·Ù",
    	TD: " ØªØ´Ø§Ø¯",
    	CL: " ØªØ´ÙÙÙ",
    	CN: " Ø§ÙØµÙÙ",
    	CX: " Ø¬Ø²ÙØ±Ø© Ø¹ÙØ¯ Ø§ÙÙÙÙØ§Ø¯",
    	CC: " Ø¬Ø²Ø± ÙÙÙÙØ³",
    	CO: " ÙÙÙÙÙØ¨ÙØ§",
    	KM: " Ø¬Ø²Ø± Ø§ÙÙÙØ±",
    	CG: " Ø¬ÙÙÙØ±ÙØ© Ø§ÙÙÙÙØºÙ",
    	CD: " Ø¬ÙÙÙØ±ÙØ© Ø§ÙÙÙÙØºÙ Ø§ÙØ¯ÙÙÙØ±Ø§Ø·ÙØ©",
    	CK: " Ø¬Ø²Ø± ÙÙÙ",
    	CR: " ÙÙØ³ØªØ§Ø±ÙÙØ§",
    	CI: " Ø³Ø§Ø­Ù Ø§ÙØ¹Ø§Ø¬",
    	HR: " ÙØ±ÙØ§ØªÙØ§",
    	CU: " ÙÙØ¨Ø§",
    	CY: " ÙØ¨Ø±Øµ",
    	CZ: " Ø¬ÙÙÙØ±ÙØ© Ø§ÙØªØ´ÙÙ",
    	DK: " Ø§ÙØ¯ÙÙØ§Ø±Ù",
    	DJ: " Ø¬ÙØ¨ÙØªÙ",
    	DM: " Ø¯ÙÙÙÙÙÙØ§",
    	DO: " Ø¬ÙÙÙØ±ÙØ© Ø§ÙØ¯ÙÙÙÙÙÙØ§Ù",
    	EC: " Ø§ÙØ¥ÙÙØ§Ø¯ÙØ±",
    	EG: " ÙØµØ±",
    	SV: " Ø§ÙØ³ÙÙØ§Ø¯ÙØ±",
    	GQ: " ØºÙÙÙØ§ Ø§ÙØ§Ø³ØªÙØ§Ø¦ÙØ©",
    	ER: " Ø¥Ø±ÙØªØ±ÙØ§",
    	EE: " Ø¥Ø³ØªÙÙÙØ§",
    	ET: " Ø¥Ø«ÙÙØ¨ÙØ§",
    	FK: " Ø¬Ø²Ø± ÙÙÙÙØ§ÙØ¯",
    	FO: " Ø¬Ø²Ø± ÙØ§Ø±Ù",
    	FJ: " ÙÙØ¬Ù",
    	FI: " ÙÙÙÙØ¯Ø§",
    	FR: " ÙØ±ÙØ³Ø§",
    	GF: " ØºÙÙØ§ÙØ§ Ø§ÙÙØ±ÙØ³ÙØ©",
    	PF: " Ø¨ÙÙÙÙØ²ÙØ§ Ø§ÙÙØ±ÙØ³ÙØ©",
    	TF: " Ø£Ø±Ø§Ø¶ ÙØ±ÙØ³ÙØ© Ø¬ÙÙØ¨ÙØ© ÙØ£ÙØªØ§Ø±ØªÙÙÙØ©",
    	GA: " Ø§ÙØºØ§Ø¨ÙÙ",
    	GM: " ØºØ§ÙØ¨ÙØ§",
    	GE: " Ø¬ÙØ±Ø¬ÙØ§",
    	DE: " Ø£ÙÙØ§ÙÙØ§",
    	GH: " ØºØ§ÙØ§",
    	GI: " Ø¬Ø¨Ù Ø·Ø§Ø±Ù",
    	GR: " Ø§ÙÙÙÙØ§Ù",
    	GL: " Ø¬Ø±ÙÙÙØ§ÙØ¯",
    	GD: " ØºØ±ÙÙØ§Ø¯Ø§",
    	GP: " ØºÙØ§Ø¯ÙÙØ¨",
    	GU: " ØºÙØ§Ù",
    	GT: " ØºÙØ§ØªÙÙØ§ÙØ§",
    	GN: " ØºÙÙÙØ§",
    	GW: " ØºÙÙÙØ§ Ø¨ÙØ³Ø§Ù",
    	GY: " ØºÙØ§ÙØ§",
    	HT: " ÙØ§ÙØªÙ",
    	HM: " Ø¬Ø²ÙØ±Ø© ÙÙØ±Ø¯ ÙØ¬Ø²Ø± ÙØ§ÙØ¯ÙÙØ§ÙØ¯",
    	VA: "  Ø§ÙÙØ§ØªÙÙØ§Ù",
    	HN: " ÙÙØ¯ÙØ±Ø§Ø³",
    	HK: " ÙÙÙØº ÙÙÙØº",
    	HU: " Ø§ÙÙØ¬Ø±",
    	IS: " Ø¢ÙØ³ÙÙØ¯Ø§",
    	IN: " Ø§ÙÙÙØ¯",
    	ID: " Ø¥ÙØ¯ÙÙÙØ³ÙØ§",
    	IR: " Ø¥ÙØ±Ø§Ù",
    	IQ: " Ø§ÙØ¹Ø±Ø§Ù",
    	IE: " Ø£ÙØ±ÙÙØ¯Ø§",
    	IL: " Ø¥Ø³Ø±Ø§Ø¦ÙÙ",
    	IT: " Ø¥ÙØ·Ø§ÙÙØ§",
    	JM: " Ø¬Ø§ÙØ§ÙÙØ§",
    	JP: " Ø§ÙÙØ§Ø¨Ø§Ù",
    	JO: " Ø§ÙØ£Ø±Ø¯Ù",
    	KZ: " ÙØ§Ø²Ø§Ø®Ø³ØªØ§Ù",
    	KE: " ÙÙÙÙØ§",
    	KI: " ÙÙØ±ÙØ¨Ø§ØªÙ",
    	KP: " ÙÙØ±ÙØ§ Ø§ÙØ´ÙØ§ÙÙØ©",
    	KR: " ÙÙØ±ÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ©",
    	KW: " Ø§ÙÙÙÙØª",
    	KG: " ÙÙØ±ØºÙØ²Ø³ØªØ§Ù",
    	LA: " ÙØ§ÙØ³",
    	LV: " ÙØ§ØªÙÙØ§",
    	LB: " ÙØ¨ÙØ§Ù",
    	LS: " ÙÙØ³ÙØªÙ",
    	LR: " ÙÙØ¨ÙØ±ÙØ§",
    	LY: " ÙÙØ¨ÙØ§",
    	LI: " ÙÙØ®ØªÙØ´ØªØ§ÙÙ",
    	LT: " ÙÙØªÙØ§ÙÙØ§",
    	LU: " ÙÙÙØ³ÙØ¨ÙØ±Øº",
    	MO: " ÙØ§ÙØ§Ù",
    	MK: " ÙÙØ¯ÙÙÙØ§",
    	MG: " ÙØ¯ØºØ´ÙØ±",
    	MW: " ÙØ§ÙØ§ÙÙ",
    	MY: " ÙØ§ÙÙØ²ÙØ§",
    	MV: " Ø¬Ø²Ø± Ø§ÙÙØ§ÙØ¯ÙÙ",
    	ML: " ÙØ§ÙÙ",
    	MT: " ÙØ§ÙØ·Ø§",
    	MH: " Ø¬Ø²Ø± ÙØ§Ø±Ø´Ø§Ù",
    	MQ: " ÙØ§Ø±ØªÙÙÙÙ",
    	MR: " ÙÙØ±ÙØªØ§ÙÙØ§",
    	MU: " ÙÙØ±ÙØ´ÙÙØ³",
    	YT: " ÙØ§ÙÙØª",
    	MX: " Ø§ÙÙÙØ³ÙÙ",
    	FM: " ÙÙØ§ÙØ§Øª ÙÙÙØ±ÙÙÙØ³ÙØ§ Ø§ÙÙØªØ­Ø¯Ø©",
    	MD: " ÙÙÙØ¯ÙÙØ§",
    	MC: " ÙÙÙØ§ÙÙ",
    	MN: " ÙÙØºÙÙÙØ§",
    	MS: " ÙÙÙØªØ³Ø±Ø§Øª",
    	MA: " Ø§ÙÙØºØ±Ø¨",
    	MZ: " ÙÙØ²ÙØ¨ÙÙ",
    	MM: " Ø¨ÙØ±ÙØ§",
    	NA: " ÙØ§ÙÙØ¨ÙØ§",
    	NR: " ÙØ§ÙØ±Ù",
    	NP: " ÙÙØ¨Ø§Ù",
    	NL: " ÙÙÙÙØ¯Ø§",
    	NC: " ÙØ§ÙÙØ¯ÙÙÙØ§ Ø§ÙØ¬Ø¯ÙØ¯Ø©",
    	NZ: " ÙÙÙØ²ÙÙÙØ¯Ø§",
    	NI: " ÙÙÙØ§Ø±Ø§ØºÙØ§",
    	NE: " Ø§ÙÙÙØ¬Ø±",
    	NG: " ÙÙØ¬ÙØ±ÙØ§",
    	NU: " ÙÙÙÙÙ",
    	NF: " Ø¬Ø²ÙØ±Ø© ÙÙØ±ÙÙÙÙ",
    	MP: " Ø¬Ø²Ø± ÙØ§Ø±ÙØ§ÙØ§ Ø§ÙØ´ÙØ§ÙÙØ©",
    	NO: " Ø§ÙÙØ±ÙÙØ¬",
    	OM: " Ø¹ÙØ§Ù",
    	PK: " Ø¨Ø§ÙØ³ØªØ§Ù",
    	PW: " Ø¨Ø§ÙØ§Ù",
    	PS: " ÙÙØ³Ø·ÙÙ",
    	PA: " Ø¨ÙÙØ§",
    	PG: " Ø¨Ø§Ø¨ÙØ§ ØºÙÙÙØ§ Ø§ÙØ¬Ø¯ÙØ¯Ø©",
    	PY: " Ø¨Ø§Ø±Ø§ØºÙØ§Ù",
    	PE: " Ø¨ÙØ±Ù",
    	PH: " Ø§ÙÙÙØ¨ÙÙ",
    	PN: " Ø¬Ø²Ø± Ø¨ÙØªÙÙØ±Ù",
    	PL: " Ø¨ÙÙÙØ¯Ø§",
    	PT: " Ø§ÙØ¨Ø±ØªØºØ§Ù",
    	PR: " Ø¨ÙØ±ØªÙØ±ÙÙÙ",
    	QA: " ÙØ·Ø±",
    	RE: " ÙØ§ Ø±ÙÙÙÙÙÙ",
    	RO: " Ø±ÙÙØ§ÙÙØ§",
    	RU: " Ø±ÙØ³ÙØ§",
    	RW: " Ø±ÙØ§ÙØ¯Ø§",
    	SH: " Ø³Ø§ÙØª ÙÙÙÙÙØ§ ÙØ£Ø³ÙÙØ´ÙÙ ÙØªØ±ÙØ³ØªØ§Ù Ø¯Ø§ ÙÙÙØ§",
    	KN: " Ø³Ø§ÙØª ÙÙØªØ³ ÙÙÙÙÙØ³",
    	LC: " Ø³Ø§ÙØª ÙÙØ³ÙØ§",
    	PM: " Ø³Ø§Ù Ø¨ÙÙØ± ÙÙÙÙÙÙÙ",
    	VC: " Ø³Ø§ÙØª ÙÙÙØ³ÙØª ÙØ§ÙØºØ±ÙÙØ§Ø¯ÙÙ",
    	WS: " Ø³Ø§ÙÙØ§",
    	SM: " Ø³Ø§Ù ÙØ§Ø±ÙÙÙ",
    	ST: " Ø³Ø§Ù ØªÙÙÙ ÙØ¨Ø±ÙÙØ³ÙØ¨",
    	SA: " Ø§ÙØ³Ø¹ÙØ¯ÙØ©",
    	SN: " Ø§ÙØ³ÙØºØ§Ù",
    	SC: " Ø³ÙØ´Ù",
    	SL: " Ø³ÙØ±Ø§ÙÙÙÙ",
    	SG: " Ø³ÙØºØ§ÙÙØ±Ø©",
    	SK: " Ø³ÙÙÙØ§ÙÙØ§",
    	SI: " Ø³ÙÙÙÙÙÙØ§",
    	SB: " Ø¬Ø²Ø± Ø³ÙÙÙØ§Ù",
    	SO: " Ø§ÙØµÙÙØ§Ù",
    	ZA: " Ø¬ÙÙØ¨ Ø£ÙØ±ÙÙÙØ§",
    	GS: " Ø¬ÙØ±Ø¬ÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ© ÙØ¬Ø²Ø± Ø³Ø§ÙØ¯ÙÙØªØ´ Ø§ÙØ¬ÙÙØ¨ÙØ©",
    	ES: " Ø¥Ø³Ø¨Ø§ÙÙØ§",
    	LK: " Ø³Ø±ÙÙØ§ÙÙØ§",
    	SD: " Ø§ÙØ³ÙØ¯Ø§Ù",
    	SR: " Ø³ÙØ±ÙÙØ§Ù",
    	SJ: " Ø³ÙØ§ÙØ¨Ø§Ø±Ø¯ ÙÙØ§Ù ÙØ§ÙÙ",
    	SZ: " Ø³ÙØ§Ø²ÙÙØ§ÙØ¯",
    	SE: " Ø§ÙØ³ÙÙØ¯",
    	CH: " Ø³ÙÙØ³Ø±Ø§",
    	SY: " Ø³ÙØ±ÙØ§",
    	TW: " ØªØ§ÙÙØ§Ù",
    	TJ: " Ø·Ø§Ø¬ÙÙØ³ØªØ§Ù",
    	TZ: " ØªØ§ÙØ²Ø§ÙÙØ§",
    	TH: " ØªØ§ÙÙØ§ÙØ¯",
    	TL: " ØªÙÙÙØ± Ø§ÙØ´Ø±ÙÙØ©",
    	TG: " ØªÙØºÙ",
    	TK: " ØªÙÙÙÙØ§Ù",
    	TO: " ØªÙÙØºØ§",
    	TT: "ØªØ±ÙÙÙØ¯Ø§Ø¯ ÙØªÙØ¨Ø§ØºÙ",
    	TN: " ØªÙÙØ³",
    	TR: " ØªØ±ÙÙØ§",
    	TM: " ØªØ±ÙÙØ§ÙØ³ØªØ§Ù",
    	TC: " Ø¬Ø²Ø± ØªÙØ±ÙØ³ ÙÙØ§ÙÙÙØ³",
    	TV: " ØªÙÙØ§ÙÙ",
    	UG: " Ø£ÙØºÙØ¯Ø§",
    	UA: " Ø£ÙÙØ±Ø§ÙÙØ§",
    	AE: " Ø§ÙØ¥ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©",
    	GB: " Ø§ÙÙÙÙÙØ© Ø§ÙÙØªØ­Ø¯Ø©",
    	US: " Ø§ÙÙÙØ§ÙØ§Øª Ø§ÙÙØªØ­Ø¯Ø©",
    	UM: " Ø¬Ø²Ø± Ø§ÙÙÙØ§ÙØ§Øª Ø§ÙÙØªØ­Ø¯Ø©",
    	UY: " Ø§ÙØ£ÙØ±ÙØºÙØ§Ù",
    	UZ: " Ø£ÙØ²Ø¨ÙØ³ØªØ§Ù",
    	VU: " ÙØ§ÙÙØ§ØªÙ",
    	VE: " ÙÙØ²ÙÙÙØ§",
    	VN: " ÙÙØªÙØ§Ù",
    	VG: " Ø¬Ø²Ø± Ø§ÙØ¹Ø°Ø±Ø§Ø¡ Ø§ÙØ¨Ø±ÙØ·Ø§ÙÙØ©",
    	VI: " Ø¬Ø²Ø± Ø§ÙØ¹Ø°Ø±Ø§Ø¡ Ø§ÙØ£ÙØ±ÙÙÙØ©",
    	WF: " ÙØ§ÙØ³ ÙÙÙØªÙÙØ§",
    	EH: " Ø§ÙØµØ­Ø±Ø§Ø¡ Ø§ÙØºØ±Ø¨ÙØ©",
    	YE: " Ø§ÙÙÙÙ",
    	ZM: " Ø²Ø§ÙØ¨ÙØ§",
    	ZW: " Ø²ÙÙØ¨Ø§Ø¨ÙÙ",
    	AX: " Ø¬Ø²Ø± Ø£ÙÙØ§ÙØ¯",
    	BQ: " Ø§ÙØ¬Ø²Ø± Ø§ÙÙØ§Ø±ÙØ¨ÙØ© Ø§ÙÙÙÙÙØ¯ÙØ©",
    	CW: " ÙÙØ±Ø§Ø³Ø§Ù",
    	GG: " ØºÙØ±ÙØ²Ù",
    	IM: " Ø¬Ø²ÙØ±Ø© ÙØ§Ù",
    	JE: " Ø¬ÙØ±Ø²Ù",
    	ME: " Ø§ÙØ¬Ø¨Ù Ø§ÙØ£Ø³ÙØ¯",
    	BL: " Ø³Ø§Ù Ø¨Ø§Ø±ØªÙÙÙÙ",
    	MF: " Ø³Ø§ÙØª ÙØ§Ø±ØªÙ (Ø§ÙØ¬Ø²Ø¡ Ø§ÙÙØ±ÙØ³Ù)",
    	RS: " ØµØ±Ø¨ÙØ§",
    	SX: " Ø³Ø§ÙØª ÙØ§Ø±ØªÙ (Ø§ÙØ¬Ø²Ø¡ Ø§ÙÙÙÙÙØ¯Ù)",
    	SS: " Ø¬ÙÙØ¨ Ø§ÙØ³ÙØ¯Ø§Ù",
    	XK: " ÙÙØ³ÙÙÙ"
    };
    var ar = {
    	locale: locale,
    	countries: countries
    };

    var ar$1 = /*#__PURE__*/Object.freeze({
        locale: locale,
        countries: countries,
        default: ar
    });

    var locale$1 = "az";
    var countries$1 = {
    	AD: "Andorra",
    	AE: "BirlÉÅmiÅ ÆrÉb ÆmirliklÉri",
    	AF: "ÆfqanÄ±stan",
    	AG: "Antiqua vÉ Barbuda",
    	AI: "Angilya",
    	AL: "Albaniya",
    	AM: "ErmÉnistan",
    	AO: "Anqola",
    	AQ: "Antarktika",
    	AR: "Argentina",
    	AS: "Amerika SamoasÄ±",
    	AT: "Avstriya",
    	AU: "Avstraliya",
    	AW: "Aruba",
    	AX: "Aland adalarÄ±",
    	AZ: "AzÉrbaycan",
    	BA: "Bosniya vÉ Herseqovina",
    	BB: "Barbados",
    	BD: "BanqladeÅ",
    	BE: "BelÃ§ika",
    	BF: "Burkina Faso",
    	BG: "BolqarÄ±stan",
    	BH: "BÉhreyn",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Sent-Bartelemi",
    	BM: "Bermud adalarÄ±",
    	BN: "Bruney",
    	BO: "Boliviya",
    	BQ: "Karib NiderlandÄ±",
    	BR: "Braziliya",
    	BS: "Baham adalarÄ±",
    	BT: "Butan",
    	BV: "Buve adasÄ±",
    	BW: "Botsvana",
    	BY: "Belarus",
    	BZ: "Beliz",
    	CA: "Kanada",
    	CC: "Kokos (Kilinq) adalarÄ±",
    	CD: "Konqo - KinÅasa",
    	CF: "MÉrkÉzi Afrika RespublikasÄ±",
    	CG: "Konqo - Brazzavil",
    	CH: "Ä°sveÃ§rÉ",
    	CI: "Kotdâivuar",
    	CK: "Kuk adalarÄ±",
    	CL: "Ãili",
    	CM: "Kamerun",
    	CN: "Ãin",
    	CO: "Kolumbiya",
    	CR: "Kosta Rika",
    	CU: "Kuba",
    	CV: "Kabo-Verde",
    	CW: "Kurasao",
    	CX: "Milad adasÄ±",
    	CY: "Kipr",
    	CZ: "Ãex RespublikasÄ±",
    	DE: "Almaniya",
    	DJ: "Cibuti",
    	DK: "Danimarka",
    	DM: "Dominika",
    	DO: "Dominikan RespublikasÄ±",
    	DZ: "ÆlcÉzair",
    	EC: "Ekvador",
    	EE: "Estoniya",
    	EG: "Misir",
    	EH: "QÉrbi Saxara",
    	ER: "Eritreya",
    	ES: "Ä°spaniya",
    	ET: "Efiopiya",
    	FI: "Finlandiya",
    	FJ: "Fici",
    	FK: "Folklend adalarÄ±",
    	FM: "Mikroneziya",
    	FO: "Farer adalarÄ±",
    	FR: "Fransa",
    	GA: "Qabon",
    	GB: "BirlÉÅmiÅ KrallÄ±q",
    	GD: "Qrenada",
    	GE: "GÃ¼rcÃ¼stan",
    	GF: "Fransa QvianasÄ±",
    	GG: "Gernsi",
    	GH: "Qana",
    	GI: "CÉbÉllÃ¼tariq",
    	GL: "Qrenlandiya",
    	GM: "Qambiya",
    	GN: "Qvineya",
    	GP: "Qvadelupa",
    	GQ: "Ekvatorial Qvineya",
    	GR: "YunanÄ±stan",
    	GS: "CÉnubi Corciya vÉ CÉnubi SendviÃ§ adalarÄ±",
    	GT: "Qvatemala",
    	GU: "Quam",
    	GW: "Qvineya-Bisau",
    	GY: "Qayana",
    	HK: "Honq Konq",
    	HM: "Herd vÉ Makdonald adalarÄ±",
    	HN: "Honduras",
    	HR: "Xorvatiya",
    	HT: "Haiti",
    	HU: "MacarÄ±stan",
    	ID: "Ä°ndoneziya",
    	IE: "Ä°rlandiya",
    	IL: "Ä°srail",
    	IM: "Men adasÄ±",
    	IN: "Hindistan",
    	IO: "BritaniyanÄ±n Hind OkeanÄ± Ærazisi",
    	IQ: "Ä°raq",
    	IR: "Ä°ran",
    	IS: "Ä°slandiya",
    	IT: "Ä°taliya",
    	JE: "Cersi",
    	JM: "Yamayka",
    	JO: "Ä°ordaniya",
    	JP: "Yaponiya",
    	KE: "Keniya",
    	KG: "QÄ±rÄÄ±zÄ±stan",
    	KH: "Kamboca",
    	KI: "Kiribati",
    	KM: "Komor adalarÄ±",
    	KN: "Sent-Kits vÉ Nevis",
    	KP: "Åimali Koreya",
    	KR: "CÉnubi Koreya",
    	KW: "KÃ¼veyt",
    	KY: "Kayman adalarÄ±",
    	KZ: "QazaxÄ±stan",
    	LA: "Laos",
    	LB: "Livan",
    	LC: "Sent-Lusiya",
    	LI: "LixtenÅteyn",
    	LK: "Åri-Lanka",
    	LR: "Liberiya",
    	LS: "Lesoto",
    	LT: "Litva",
    	LU: "LÃ¼ksemburq",
    	LV: "Latviya",
    	LY: "Liviya",
    	MA: "MÉrakeÅ",
    	MC: "Monako",
    	MD: "Moldova",
    	ME: "Monteneqro",
    	MF: "Sent Martin",
    	MG: "Madaqaskar",
    	MH: "MarÅal adalarÄ±",
    	MK: "Makedoniya",
    	ML: "Mali",
    	MM: "Myanma",
    	MN: "Monqolustan",
    	MO: "Makao",
    	MP: "Åimali Marian adalarÄ±",
    	MQ: "Martinik",
    	MR: "Mavritaniya",
    	MS: "Monserat",
    	MT: "Malta",
    	MU: "Mavriki",
    	MV: "Maldiv adalarÄ±",
    	MW: "Malavi",
    	MX: "Meksika",
    	MY: "Malayziya",
    	MZ: "Mozambik",
    	NA: "Namibiya",
    	NC: "Yeni Kaledoniya",
    	NE: "Niger",
    	NF: "Norfolk adasÄ±",
    	NG: "Nigeriya",
    	NI: "Nikaraqua",
    	NL: "Niderland",
    	NO: "NorveÃ§",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Yeni Zelandiya",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Fransa PolineziyasÄ±",
    	PG: "Papua-Yeni Qvineya",
    	PH: "Filippin",
    	PK: "Pakistan",
    	PL: "PolÅa",
    	PM: "MÃ¼qÉddÉs Pyer vÉ Mikelon",
    	PN: "Pitkern adalarÄ±",
    	PR: "Puerto Riko",
    	PS: "FÉlÉstin ÆrazilÉri",
    	PT: "Portuqaliya",
    	PW: "Palau",
    	PY: "Paraqvay",
    	QA: "QÉtÉr",
    	RE: "Reyunyon",
    	RO: "RumÄ±niya",
    	RS: "Serbiya",
    	RU: "Rusiya",
    	RW: "Ruanda",
    	SA: "SÉudiyyÉ ÆrÉbistanÄ±",
    	SB: "Solomon adalarÄ±",
    	SC: "SeyÅel adalarÄ±",
    	SD: "Sudan",
    	SE: "Ä°sveÃ§",
    	SG: "Sinqapur",
    	SH: "MÃ¼qÉddÉs Yelena",
    	SI: "Sloveniya",
    	SJ: "Svalbard vÉ Yan-Mayen",
    	SK: "Slovakiya",
    	SL: "Syerra-Leone",
    	SM: "San-Marino",
    	SN: "Seneqal",
    	SO: "Somali",
    	SR: "Surinam",
    	SS: "CÉnubi Sudan",
    	ST: "San-Tome vÉ Prinsipi",
    	SV: "Salvador",
    	SX: "Sint-Marten",
    	SY: "Suriya",
    	SZ: "Svazilend",
    	TC: "TÃ¶rks vÉ Kaykos adalarÄ±",
    	TD: "Ãad",
    	TF: "FransanÄ±n CÉnub ÆrazilÉri",
    	TG: "Toqo",
    	TH: "Tailand",
    	TJ: "Tacikistan",
    	TK: "Tokelau",
    	TL: "ÅÉrqi Timor",
    	TM: "TÃ¼rkmÉnistan",
    	TN: "Tunis",
    	TO: "Tonqa",
    	TR: "TÃ¼rkiyÉ",
    	TT: "Trinidad vÉ Tobaqo",
    	TV: "Tuvalu",
    	TW: "Tayvan",
    	TZ: "Tanzaniya",
    	UA: "Ukrayna",
    	UG: "Uqanda",
    	UM: "ABÅ-a baÄlÄ± kiÃ§ik adacÄ±qlar",
    	US: "Amerika BirlÉÅmiÅ ÅtatlarÄ±",
    	UY: "Uruqvay",
    	UZ: "ÃzbÉkistan",
    	VA: "Vatikan",
    	VC: "Sent-Vinsent vÉ QrenadinlÉr",
    	VE: "Venesuela",
    	VG: "BritaniyanÄ±n Virgin adalarÄ±",
    	VI: "ABÅ Virgin adalarÄ±",
    	VN: "Vyetnam",
    	VU: "Vanuatu",
    	WF: "Uollis vÉ Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "YÉmÉn",
    	YT: "Mayot",
    	ZA: "CÉnub Afrika",
    	ZM: "Zambiya",
    	ZW: "Zimbabve"
    };
    var az = {
    	locale: locale$1,
    	countries: countries$1
    };

    var az$1 = /*#__PURE__*/Object.freeze({
        locale: locale$1,
        countries: countries$1,
        default: az
    });

    var locale$2 = "be";
    var countries$2 = {
    	AD: "ÐÐ½Ð´Ð¾ÑÐ°",
    	AE: "ÐÐ±âÑÐ´Ð½Ð°Ð½ÑÑ ÐÑÐ°Ð±ÑÐºÑÑ Ð­Ð¼ÑÑÐ°ÑÑ",
    	AF: "ÐÑÐ³Ð°Ð½ÑÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÑÐ³ÑÐ° Ñ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³ÑÐ»ÑÑ",
    	AL: "ÐÐ»Ð±Ð°Ð½ÑÑ",
    	AM: "ÐÑÐ¼ÐµÐ½ÑÑ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÑÐºÐ°",
    	AR: "ÐÑÐ³ÐµÐ½ÑÑÐ½Ð°",
    	AS: "ÐÐ¼ÐµÑÑÐºÐ°Ð½ÑÐºÐ°Ðµ Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÑÑÑÑÑÑ",
    	AU: "ÐÑÑÑÑÐ°Ð»ÑÑ",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½",
    	BA: "ÐÐ¾ÑÐ½ÑÑ Ñ ÐÐµÑÑÐ°Ð³Ð°Ð²ÑÐ½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð°Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÑÑ",
    	BE: "ÐÐµÐ»ÑÐ³ÑÑ",
    	BF: "ÐÑÑÐºÑÐ½Ð°-Ð¤Ð°ÑÐ¾",
    	BG: "ÐÐ°Ð»Ð³Ð°ÑÑÑ",
    	BH: "ÐÐ°ÑÑÑÐ¹Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð·Ñ",
    	BJ: "ÐÐµÐ½ÑÐ½",
    	BL: "Ð¡ÐµÐ½-ÐÐ°ÑÑÑÐ»ÑÐ¼Ñ",
    	BM: "ÐÐµÑÐ¼ÑÐ´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	BN: "ÐÑÑÐ½ÐµÐ¹",
    	BO: "ÐÐ°Ð»ÑÐ²ÑÑ",
    	BQ: "ÐÐ°ÑÑÐ±ÑÐºÑÑ ÐÑÐ´ÑÑÐ»Ð°Ð½Ð´Ñ",
    	BR: "ÐÑÐ°Ð·ÑÐ»ÑÑ",
    	BS: "ÐÐ°Ð³Ð°Ð¼Ñ",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÐ¾ÑÑÑÐ°Ñ ÐÑÐ²Ñ",
    	BW: "ÐÐ°ÑÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð°ÑÑÑÑ",
    	BZ: "ÐÐµÐ»ÑÐ·",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ°ÐºÐ¾ÑÐ°Ð²ÑÑ (ÐÑÐ»ÑÐ½Ð³) Ð°ÑÑÑÐ°Ð²Ñ",
    	CD: "ÐÐ¾Ð½Ð³Ð° (ÐÑÐ½ÑÐ°ÑÐ°)",
    	CF: "Ð¦ÑÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ð°ÑÑÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°",
    	CG: "ÐÐ¾Ð½Ð³Ð° - ÐÑÐ°Ð·Ð°Ð²ÑÐ»Ñ",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÑÑ",
    	CI: "ÐÐ¾Ñ-Ð´âÐÐ²ÑÐ°Ñ",
    	CK: "ÐÑÑÑÐ°Ð²Ñ ÐÑÐºÐ°",
    	CL: "Ð§ÑÐ»Ñ",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÐÑÑÐ°Ð¹",
    	CO: "ÐÐ°Ð»ÑÐ¼Ð±ÑÑ",
    	CR: "ÐÐ¾ÑÑÐ°-Ð ÑÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐ°Ð±Ð°-ÐÐµÑÐ´Ñ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð°",
    	CX: "ÐÐ¾ÑÑÑÐ°Ñ ÐÐ°Ð»ÑÐ´",
    	CY: "ÐÑÐ¿Ñ",
    	CZ: "Ð§ÑÑÑÑ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½ÑÑ",
    	DJ: "ÐÐ¶ÑÐ±ÑÑÑ",
    	DK: "ÐÐ°Ð½ÑÑ",
    	DM: "ÐÐ°Ð¼ÑÐ½ÑÐºÐ°",
    	DO: "ÐÐ°Ð¼ÑÐ½ÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°",
    	DZ: "ÐÐ»Ð¶ÑÑ",
    	EC: "Ð­ÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "Ð­ÑÑÐ¾Ð½ÑÑ",
    	EG: "ÐÐ³ÑÐ¿ÐµÑ",
    	EH: "ÐÐ°ÑÐ¾Ð´Ð½ÑÑ Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "Ð­ÑÑÑÑÑÑ",
    	ES: "ÐÑÐ¿Ð°Ð½ÑÑ",
    	ET: "Ð­ÑÑÐ¾Ð¿ÑÑ",
    	FI: "Ð¤ÑÐ½Ð»ÑÐ½Ð´ÑÑ",
    	FJ: "Ð¤ÑÐ´Ð¶Ñ",
    	FK: "Ð¤Ð°Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	FM: "ÐÑÐºÑÐ°Ð½ÐµÐ·ÑÑ",
    	FO: "Ð¤Ð°ÑÑÑÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	FR: "Ð¤ÑÐ°Ð½ÑÑÑ",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "ÐÑÐ»ÑÐºÐ°Ð±ÑÑÑÐ°Ð½ÑÑ",
    	GD: "ÐÑÑÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·ÑÑ",
    	GF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ²ÑÑÐ½Ð°",
    	GG: "ÐÐµÑÐ½ÑÑ",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÑÐ±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÑÐ½Ð»Ð°Ð½Ð´ÑÑ",
    	GM: "ÐÐ°Ð¼Ð±ÑÑ",
    	GN: "ÐÐ²ÑÐ½ÐµÑ",
    	GP: "ÐÐ²Ð°Ð´ÑÐ»ÑÐ¿Ð°",
    	GQ: "Ð­ÐºÐ²Ð°ÑÐ°ÑÑÑÐ»ÑÐ½Ð°Ñ ÐÐ²ÑÐ½ÐµÑ",
    	GR: "ÐÑÑÑÑÑ",
    	GS: "ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ¶Ð¾ÑÐ´Ð¶ÑÑ Ñ ÐÐ°ÑÐ´Ð½ÑÐ²ÑÑ Ð¡Ð°Ð½Ð´Ð²ÑÑÐ°Ð²Ñ Ð°ÑÑÑÐ°Ð²Ñ",
    	GT: "ÐÐ²Ð°ÑÑÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²ÑÐ½ÐµÑ-ÐÑÑÐ°Ñ",
    	GY: "ÐÐ°ÑÐ½Ð°",
    	HK: "ÐÐ°Ð½ÐºÐ¾Ð½Ð³, Ð¡ÐÐ  (ÐÑÑÐ°Ð¹)",
    	HM: "ÐÑÑÑÐ°Ð²Ñ Ð¥ÐµÑÐ´ Ñ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´",
    	HN: "ÐÐ°Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥Ð°ÑÐ²Ð°ÑÑÑ",
    	HT: "ÐÐ°ÑÑÑ",
    	HU: "ÐÐµÐ½Ð³ÑÑÑ",
    	ID: "ÐÐ½Ð´Ð°Ð½ÐµÐ·ÑÑ",
    	IE: "ÐÑÐ»Ð°Ð½Ð´ÑÑ",
    	IL: "ÐÐ·ÑÐ°ÑÐ»Ñ",
    	IM: "ÐÐ¾ÑÑÑÐ°Ñ ÐÑÐ½",
    	IN: "ÐÐ½Ð´ÑÑ",
    	IO: "ÐÑÑÑÐ°Ð½ÑÐºÐ°Ñ ÑÑÑÑÑÐ¾ÑÑÑ Ñ ÐÐ½Ð´ÑÐ¹ÑÐºÑÐ¼ Ð°ÐºÑÑÐ½Ðµ",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´ÑÑ",
    	IT: "ÐÑÐ°Ð»ÑÑ",
    	JE: "ÐÐ¶ÑÑÑÑ",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JO: "ÐÐ°ÑÐ´Ð°Ð½ÑÑ",
    	JP: "Ð¯Ð¿Ð¾Ð½ÑÑ",
    	KE: "ÐÐµÐ½ÑÑ",
    	KG: "ÐÑÑÐ³ÑÐ·ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	KI: "ÐÑÑÑÐ±Ð°ÑÑ",
    	KM: "ÐÐ°Ð¼Ð¾ÑÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÑÑÑ Ñ ÐÐµÐ²ÑÑ",
    	KP: "ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ ÐÐ°ÑÑÑ",
    	KR: "ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ°ÑÑÑ",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½Ð°Ð²Ñ Ð°ÑÑÑÐ°Ð²Ñ",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÑÐ²Ð°Ð½",
    	LC: "Ð¡ÐµÐ½Ñ-ÐÑÑÑÑ",
    	LI: "ÐÑÑÑÑÐ½ÑÑÑÐ¹Ð½",
    	LK: "Ð¨ÑÑ-ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÑÐ±ÐµÑÑÑ",
    	LS: "ÐÐµÑÐ¾ÑÐ°",
    	LT: "ÐÑÑÐ²Ð°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²ÑÑ",
    	LY: "ÐÑÐ²ÑÑ",
    	MA: "ÐÐ°ÑÐ¾ÐºÐ°",
    	MC: "ÐÐ°Ð½Ð°ÐºÐ°",
    	MD: "ÐÐ°Ð»Ð´Ð¾Ð²Ð°",
    	ME: "Ð§Ð°ÑÐ½Ð°Ð³Ð¾ÑÑÑ",
    	MF: "Ð¡ÐµÐ½-ÐÐ°ÑÑÑÐ½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð°Ð²Ñ ÐÑÑÑÐ°Ð²Ñ",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½ÑÑ",
    	ML: "ÐÐ°Ð»Ñ",
    	MM: "ÐâÑÐ½Ð¼Ð° (ÐÑÑÐ¼Ð°)",
    	MN: "ÐÐ°Ð½Ð³Ð¾Ð»ÑÑ",
    	MO: "ÐÐ°ÐºÐ°Ð°, Ð¡ÐÐ  (ÐÑÑÐ°Ð¹)",
    	MP: "ÐÐ°ÑÐ½Ð¾ÑÐ½ÑÑ ÐÐ°ÑÑÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	MQ: "ÐÐ°ÑÑÑÐ½ÑÐºÐ°",
    	MR: "ÐÐ°ÑÑÑÑÐ°Ð½ÑÑ",
    	MS: "ÐÐ°Ð½ÑÑÐµÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MU: "ÐÐ°ÑÑÑÐºÑÐ¹",
    	MV: "ÐÐ°Ð»ÑÐ´ÑÐ²Ñ",
    	MW: "ÐÐ°Ð»Ð°Ð²Ñ",
    	MX: "ÐÐµÐºÑÑÐºÐ°",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·ÑÑ",
    	MZ: "ÐÐ°Ð·Ð°Ð¼Ð±ÑÐº",
    	NA: "ÐÐ°Ð¼ÑÐ±ÑÑ",
    	NC: "ÐÐ¾Ð²Ð°Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½ÑÑ",
    	NE: "ÐÑÐ³ÐµÑ",
    	NF: "ÐÐ¾ÑÑÑÐ°Ñ ÐÐ¾ÑÑÐ°Ð»Ðº",
    	NG: "ÐÑÐ³ÐµÑÑÑ",
    	NI: "ÐÑÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NL: "ÐÑÐ´ÑÑÐ»Ð°Ð½Ð´Ñ",
    	NO: "ÐÐ°ÑÐ²ÐµÐ³ÑÑ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÑÑÑ",
    	NZ: "ÐÐ¾Ð²Ð°Ñ ÐÐµÐ»Ð°Ð½Ð´ÑÑ",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ°Ð»ÑÐ½ÐµÐ·ÑÑ",
    	PG: "ÐÐ°Ð¿ÑÐ°-ÐÐ¾Ð²Ð°Ñ ÐÐ²ÑÐ½ÐµÑ",
    	PH: "Ð¤ÑÐ»ÑÐ¿ÑÐ½Ñ",
    	PK: "ÐÐ°ÐºÑÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÑÑÐ°",
    	PM: "Ð¡ÐµÐ½-ÐâÐµÑ Ñ ÐÑÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÑÑÑÐ°Ð²Ñ ÐÑÑÐºÑÑÐ½",
    	PR: "ÐÑÑÑÑÐ°-Ð ÑÐºÐ°",
    	PS: "ÐÐ°Ð»ÐµÑÑÑÐ½ÑÐºÑÑ Ð¢ÑÑÑÑÐ¾ÑÑÑ",
    	PT: "ÐÐ°ÑÑÑÐ³Ð°Ð»ÑÑ",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÑÑÐ½ÑÑÐ½",
    	RO: "Ð ÑÐ¼ÑÐ½ÑÑ",
    	RS: "Ð¡ÐµÑÐ±ÑÑ",
    	RU: "Ð Ð°ÑÑÑ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´Ð°ÑÑÐºÐ°Ñ ÐÑÐ°Ð²ÑÑ",
    	SB: "Ð¡Ð°Ð»Ð°Ð¼Ð¾Ð½Ð°Ð²Ñ ÐÑÑÑÐ°Ð²Ñ",
    	SC: "Ð¡ÐµÐ¹ÑÑÐ»ÑÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÑÑÑ",
    	SG: "Ð¡ÑÐ½Ð³Ð°Ð¿ÑÑ",
    	SH: "ÐÐ¾ÑÑÑÐ°Ñ Ð¡Ð²ÑÑÐ¾Ð¹ ÐÐ»ÐµÐ½Ñ",
    	SI: "Ð¡Ð»Ð°Ð²ÐµÐ½ÑÑ",
    	SJ: "Ð¨Ð¿ÑÑÐ±ÐµÑÐ³ÐµÐ½ Ñ Ð¯Ð½-ÐÐ°ÐµÐ½",
    	SK: "Ð¡Ð»Ð°Ð²Ð°ÐºÑÑ",
    	SL: "Ð¡ÑÐµÑÐ°-ÐÐµÐ¾Ð½Ñ",
    	SM: "Ð¡Ð°Ð½-ÐÐ°ÑÑÐ½Ð°",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð°Ð¼Ð°Ð»Ñ",
    	SR: "Ð¡ÑÑÑÐ½Ð°Ð¼",
    	SS: "ÐÐ°ÑÐ´Ð½ÑÐ²Ñ Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð°Ð¼Ñ Ñ ÐÑÑÐ½ÑÑÐ¿Ñ",
    	SV: "Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡ÑÐ½Ñ-ÐÐ°ÑÑÑÐ½",
    	SY: "Ð¡ÑÑÑÑ",
    	SZ: "Ð¡Ð²Ð°Ð·ÑÐ»ÐµÐ½Ð´",
    	TC: "Ð¦ÑÑÐºÑ Ñ ÐÐ°Ð¹ÐºÐ°Ñ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÑÑ ÐÐ°ÑÐ´Ð½ÑÐ²ÑÑ ÑÑÑÑÑÐ¾ÑÑÑ",
    	TG: "Ð¢Ð¾Ð³Ð°",
    	TH: "Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°Ð´Ð¶ÑÐºÑÑÑÐ°Ð½",
    	TK: "Ð¢Ð°ÐºÐµÐ»Ð°Ñ",
    	TL: "Ð¢ÑÐ¼Ð¾Ñ-ÐÐµÑÑÑ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½ÑÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½ÑÑ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢ÑÑÑÑÑ",
    	TT: "Ð¢ÑÑÐ½ÑÐ´Ð°Ð´ Ñ Ð¢Ð°Ð±Ð°Ð³Ð°",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½ÑÑ",
    	UA: "Ð£ÐºÑÐ°ÑÐ½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÐ°Ð»ÑÑ ÐÐ´Ð´Ð°Ð»ÐµÐ½ÑÑ Ð°ÑÑÑÐ°Ð²Ñ ÐÐ¨Ð",
    	US: "ÐÐ»ÑÑÐ°Ð½ÑÑ Ð¨ÑÐ°ÑÑ ÐÐ¼ÐµÑÑÐºÑ",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	UZ: "Ð£Ð·Ð±ÐµÐºÑÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÑÐºÐ°Ð½",
    	VC: "Ð¡ÐµÐ½Ñ-ÐÑÐ½ÑÐµÐ½Ñ Ñ ÐÑÑÐ½Ð°Ð´Ð·ÑÐ½Ñ",
    	VE: "ÐÐµÐ½ÐµÑÑÑÐ»Ð°",
    	VG: "ÐÑÑÑÐ°Ð½ÑÐºÑÑ ÐÑÑÐ³ÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	VI: "ÐÐ¼ÐµÑÑÐºÐ°Ð½ÑÐºÑÑ ÐÑÑÐ³ÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ",
    	VN: "ÐâÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "Ð£Ð¾Ð»ÑÑ Ñ Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ°Ð²Ð°",
    	YE: "ÐÐ¼ÐµÐ½",
    	YT: "ÐÐ°ÑÑÐ°",
    	ZA: "ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ð°ÑÑÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°",
    	ZM: "ÐÐ°Ð¼Ð±ÑÑ",
    	ZW: "ÐÑÐ¼Ð±Ð°Ð±Ð²Ñ"
    };
    var be = {
    	locale: locale$2,
    	countries: countries$2
    };

    var be$1 = /*#__PURE__*/Object.freeze({
        locale: locale$2,
        countries: countries$2,
        default: be
    });

    var locale$3 = "bg";
    var countries$3 = {
    	AD: "ÐÐ½Ð´Ð¾ÑÐ°",
    	AE: "ÐÐ±ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸ Ð°ÑÐ°Ð±ÑÐºÐ¸ ÐµÐ¼Ð¸ÑÑÑÐ²Ð°",
    	AF: "ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³ÑÐ¸Ð»Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸Ñ",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸Ñ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸ÐºÐ°",
    	AR: "ÐÑÐ¶ÐµÐ½ÑÐ¸Ð½Ð°",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÐ²ÑÑÑÐ¸Ñ",
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»Ð³Ð¸Ñ",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾",
    	BG: "ÐÑÐ»Ð³Ð°ÑÐ¸Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡ÐµÐ½ ÐÐ°ÑÑÐµÐ»ÐµÐ¼Ð¸",
    	BM: "ÐÐµÑÐ¼ÑÐ´Ð°",
    	BN: "ÐÑÑÐ½ÐµÐ¹ ÐÐ°ÑÑÑÑÐ°Ð»Ð°Ð¼",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ",
    	BQ: "ÐÐ°ÑÐ¸Ð±ÑÐºÐ° ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ",
    	BS: "ÐÐ°ÑÐ°Ð¼Ð¸",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "Ð¾ÑÑÑÐ¾Ð² ÐÑÐ²Ðµ",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð°ÑÑÑ",
    	BZ: "ÐÐµÐ»Ð¸Ð·",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸ (Ð¾ÑÑÑÐ¾Ð²Ð¸ ÐÐ¸Ð¹Ð»Ð¸Ð½Ð³)",
    	CD: "ÐÐ¾Ð½Ð³Ð¾ (ÐÐ¸Ð½ÑÐ°ÑÐ°)",
    	CF: "Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	CG: "ÐÐ¾Ð½Ð³Ð¾ (ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»)",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ",
    	CI: "ÐÐ¾Ñ Ð´âÐÐ²Ð¾Ð°Ñ",
    	CK: "Ð¾ÑÑÑÐ¾Ð²Ð¸ ÐÑÐº",
    	CL: "Ð§Ð¸Ð»Ð¸",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÐÐ¸ÑÐ°Ð¹",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ",
    	CR: "ÐÐ¾ÑÑÐ° Ð Ð¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐ°Ð±Ð¾ ÐÐµÑÐ´Ðµ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	CX: "Ð¾ÑÑÑÐ¾Ð² Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð¾",
    	CY: "ÐÐ¸Ð¿ÑÑ",
    	CZ: "Ð§ÐµÑÐ¸Ñ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½Ð¸Ñ",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "ÐÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "ÐÑÑÐ¾Ð½Ð¸Ñ",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	EH: "ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "ÐÑÐ¸ÑÑÐµÑ",
    	ES: "ÐÑÐ¿Ð°Ð½Ð¸Ñ",
    	ET: "ÐÑÐ¸Ð¾Ð¿Ð¸Ñ",
    	FI: "Ð¤Ð¸Ð½Ð»Ð°Ð½Ð´Ð¸Ñ",
    	FJ: "Ð¤Ð¸Ð´Ð¶Ð¸",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ",
    	FO: "Ð¤Ð°ÑÑÐ¾ÑÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	FR: "Ð¤ÑÐ°Ð½ÑÐ¸Ñ",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "ÐÐ±ÐµÐ´Ð¸Ð½ÐµÐ½Ð¾ÑÐ¾ ÐºÑÐ°Ð»ÑÑÐ²Ð¾",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·Ð¸Ñ",
    	GF: "Ð¤ÑÐµÐ½ÑÐºÐ° ÐÐ²Ð¸Ð°Ð½Ð°",
    	GG: "ÐÑÑÐ½Ð·Ð¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ",
    	GM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑ",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°",
    	GQ: "ÐÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»Ð½Ð° ÐÐ²Ð¸Ð½ÐµÑ",
    	GR: "ÐÑÑÑÐ¸Ñ",
    	GS: "Ð®Ð¶Ð½Ð° ÐÐ¶Ð¾ÑÐ´Ð¶Ð¸Ñ Ð¸ Ð®Ð¶Ð½Ð¸ Ð¡Ð°Ð½Ð´Ð²Ð¸ÑÐµÐ²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ",
    	GY: "ÐÐ°ÑÐ½Ð°",
    	HK: "Ð¥Ð¾Ð½ÐºÐ¾Ð½Ð³, Ð¡ÐÐ  Ð½Ð° ÐÐ¸ÑÐ°Ð¹",
    	HM: "Ð¾ÑÑÑÐ¾Ð² Ð¥ÑÑÐ´ Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»Ð´",
    	HN: "Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥ÑÑÐ²Ð°ÑÐ¸Ñ",
    	HT: "Ð¥Ð°Ð¸ÑÐ¸",
    	HU: "Ð£Ð½Ð³Ð°ÑÐ¸Ñ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ",
    	IE: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IL: "ÐÐ·ÑÐ°ÐµÐ»",
    	IM: "Ð¾ÑÑÑÐ¾Ð² ÐÐ°Ð½",
    	IN: "ÐÐ½Ð´Ð¸Ñ",
    	IO: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ñ Ð² ÐÐ½Ð´Ð¸Ð¹ÑÐºÐ¸Ñ Ð¾ÐºÐµÐ°Ð½",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IT: "ÐÑÐ°Ð»Ð¸Ñ",
    	JE: "ÐÐ¶ÑÑÑÐ¸",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ",
    	JP: "Ð¯Ð¿Ð¾Ð½Ð¸Ñ",
    	KE: "ÐÐµÐ½Ð¸Ñ",
    	KG: "ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	KN: "Ð¡ÐµÐ¹Ð½Ñ ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑ",
    	KR: "Ð®Ð¶Ð½Ð° ÐÐ¾ÑÐµÑ",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð²Ð°Ð½",
    	LC: "Ð¡ÐµÐ¹Ð½Ñ ÐÑÑÐ¸Ñ",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÐ°Ð¹Ð½",
    	LK: "Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸Ñ",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²Ð¸Ñ",
    	LY: "ÐÐ¸Ð±Ð¸Ñ",
    	MA: "ÐÐ°ÑÐ¾ÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð¾Ð²Ð°",
    	ME: "Ð§ÐµÑÐ½Ð° Ð³Ð¾ÑÐ°",
    	MF: "Ð¡ÐµÐ½ ÐÐ°ÑÑÐµÐ½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÐ¸Ð°Ð½Ð¼Ð°Ñ (ÐÐ¸ÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ",
    	MO: "ÐÐ°ÐºÐ°Ð¾, Ð¡ÐÐ  Ð½Ð° ÐÐ¸ÑÐ°Ð¹",
    	MP: "Ð¡ÐµÐ²ÐµÑÐ½Ð¸ ÐÐ°ÑÐ¸Ð°Ð½ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	MS: "ÐÐ¾Ð½ÑÑÐµÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÐ°",
    	MU: "ÐÐ°Ð²ÑÐ¸ÑÐ¸Ð¹",
    	MV: "ÐÐ°Ð»Ð´Ð¸Ð²Ð¸",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ¾",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ",
    	NC: "ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "Ð¾ÑÑÑÐ¾Ð² ÐÐ¾ÑÑÐ¾Ð»Ðº",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸Ñ",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NL: "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÐµ",
    	NZ: "ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐµÐ½ÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ",
    	PG: "ÐÐ°Ð¿ÑÐ°-ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑ",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÐ°",
    	PM: "Ð¡ÐµÐ½ ÐÐ¸ÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÑÑÑÐ¾Ð²Ð¸ ÐÐ¸ÑÐºÐµÑÐ½",
    	PR: "ÐÑÐµÑÑÐ¾ Ð Ð¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÑÐ½Ð¸Ð¾Ð½",
    	RO: "Ð ÑÐ¼ÑÐ½Ð¸Ñ",
    	RS: "Ð¡ÑÑÐ±Ð¸Ñ",
    	RU: "Ð ÑÑÐ¸Ñ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´Ð¸ÑÑÐºÐ° ÐÑÐ°Ð±Ð¸Ñ",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»Ð¸",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÑÐ¸Ñ",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "Ð¡Ð²ÐµÑÐ° ÐÐ»ÐµÐ½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ",
    	SJ: "Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ Ð¯Ð½ ÐÐ°Ð¹ÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ",
    	SL: "Ð¡Ð¸ÐµÑÐ° ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸Ñ",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	SS: "Ð®Ð¶ÐµÐ½ Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸",
    	SV: "Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð¸Ð½Ñ ÐÐ°ÑÑÐµÐ½",
    	SY: "Ð¡Ð¸ÑÐ¸Ñ",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	TC: "Ð¾ÑÑÑÐ¾Ð²Ð¸ Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¹ÐºÐ¾Ñ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐµÐ½ÑÐºÐ¸ ÑÐ¶Ð½Ð¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "ÐÐ·ÑÐ¾ÑÐµÐ½ Ð¢Ð¸Ð¼Ð¾Ñ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢ÑÑÑÐ¸Ñ",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°Ð¹Ð²Ð°Ð½",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ",
    	UA: "Ð£ÐºÑÐ°Ð¹Ð½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÑÐ´Ð°Ð»ÐµÑÐµÐ½Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸ Ð½Ð° Ð¡ÐÐ©",
    	US: "Ð¡ÑÐµÐ´Ð¸Ð½ÐµÐ½Ð¸ ÑÐ°ÑÐ¸",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	VC: "Ð¡ÐµÐ¹Ð½Ñ ÐÐ¸Ð½ÑÑÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸",
    	VE: "ÐÐµÐ½ÐµÑÑÐµÐ»Ð°",
    	VG: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÐÐ¸ÑÐ´Ð¶Ð¸Ð½ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	VI: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÐÐ¸ÑÐ´Ð¶Ð¸Ð½ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	VN: "ÐÐ¸ÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "Ð£Ð¾Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°Ð¹Ð¾Ñ",
    	ZA: "Ð®Ð¶Ð½Ð° ÐÑÑÐ¸ÐºÐ°",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var bg = {
    	locale: locale$3,
    	countries: countries$3
    };

    var bg$1 = /*#__PURE__*/Object.freeze({
        locale: locale$3,
        countries: countries$3,
        default: bg
    });

    var locale$4 = "bs";
    var countries$4 = {
    	AD: "Andora",
    	AE: "Ujedinjeni Arapski Emirati",
    	AF: "Afganistan",
    	AG: "Antigva i Barbuda",
    	AI: "Angvila",
    	AL: "Albanija",
    	AM: "Armenija",
    	AO: "Angola",
    	AQ: "Antarktika",
    	AR: "Argentina",
    	AS: "AmeriÄka Samoa",
    	AT: "Austrija",
    	AU: "Australija",
    	AW: "Aruba",
    	AX: "Olandska Ostrva",
    	AZ: "AzerbejdÅ¾an",
    	BA: "Bosna i Hercegovina",
    	BB: "Barbados",
    	BD: "BangladeÅ¡",
    	BE: "Belgija",
    	BF: "Burkina Faso",
    	BG: "Bugarska",
    	BH: "Bahrein",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Sveti Bartolomej",
    	BM: "Bermuda",
    	BN: "Brunej",
    	BO: "Bolivija",
    	BQ: "Karipska Holandija",
    	BR: "Brazil",
    	BS: "Bahami",
    	BT: "Butan",
    	BV: "Ostrvo Buve",
    	BW: "Bocvana",
    	BY: "Bjelorusija",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "Kokosova (Kilingova) Ostrva",
    	CD: "Demokratska Republika Kongo",
    	CF: "CentralnoafriÄka Republika",
    	CG: "Kongo",
    	CH: "Å vicarska",
    	CI: "Obala SlonovaÄe",
    	CK: "Kukova Ostrva",
    	CL: "Äile",
    	CM: "Kamerun",
    	CN: "Kina",
    	CO: "Kolumbija",
    	CR: "Kostarika",
    	CU: "Kuba",
    	CV: "Kape Verde",
    	CW: "Kurasao",
    	CX: "BoÅ¾iÄna Ostrva",
    	CY: "Kipar",
    	CZ: "ÄeÅ¡ka",
    	DE: "NjemaÄka",
    	DJ: "DÅ¾ibuti",
    	DK: "Danska",
    	DM: "Dominika",
    	DO: "Dominikanska Republika",
    	DZ: "AlÅ¾ir",
    	EC: "Ekvador",
    	EE: "Estonija",
    	EG: "Egipat",
    	EH: "Zapadna Sahara",
    	ER: "Eritreja",
    	ES: "Å panija",
    	ET: "Etiopija",
    	FI: "Finska",
    	FJ: "FidÅ¾i",
    	FK: "Folklandska Ostrva",
    	FM: "Mikronezija",
    	FO: "Farska Ostrva",
    	FR: "Francuska",
    	GA: "Gabon",
    	GB: "Velika Britanija",
    	GD: "Grenada",
    	GE: "Gruzija",
    	GF: "Francuska Gvajana",
    	GG: "Gernzi",
    	GH: "Gana",
    	GI: "Gibraltar",
    	GL: "Grenland",
    	GM: "Gambija",
    	GN: "Gvineja",
    	GP: "Gvadalupe",
    	GQ: "Ekvatorijalna Gvineja",
    	GR: "GrÄka",
    	GS: "JuÅ¾na DÅ¾ordÅ¾ija i JuÅ¾na SendviÄka Ostrva",
    	GT: "Gvatemala",
    	GU: "Guam",
    	GW: "Gvineja-Bisao",
    	GY: "Gvajana",
    	HK: "Hong Kong (SAR Kina)",
    	HM: "Herd i arhipelag MekDonald",
    	HN: "Honduras",
    	HR: "Hrvatska",
    	HT: "Haiti",
    	HU: "MaÄarska",
    	ID: "Indonezija",
    	IE: "Irska",
    	IL: "Izrael",
    	IM: "Ostrvo Man",
    	IN: "Indija",
    	IO: "Britanska Teritorija u Indijskom Okeanu",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Island",
    	IT: "Italija",
    	JE: "DÅ¾erzi",
    	JM: "Jamajka",
    	JO: "Jordan",
    	JP: "Japan",
    	KE: "Kenija",
    	KG: "Kirgistan",
    	KH: "KambodÅ¾a",
    	KI: "Kiribati",
    	KM: "Komorska Ostrva",
    	KN: "Sveti Kits i Nevis",
    	KP: "Sjeverna Koreja",
    	KR: "JuÅ¾na Koreja",
    	KW: "Kuvajt",
    	KY: "Kajmanska Ostrva",
    	KZ: "Kazahstan",
    	LA: "Laos",
    	LB: "Liban",
    	LC: "Sveta Lucija",
    	LI: "LihtenÅ¡tajn",
    	LK: "Å ri Lanka",
    	LR: "Liberija",
    	LS: "Lesoto",
    	LT: "Litvanija",
    	LU: "Luksemburg",
    	LV: "Latvija",
    	LY: "Libija",
    	MA: "Maroko",
    	MC: "Monako",
    	MD: "Moldavija",
    	ME: "Crna Gora",
    	MF: "Sv. Martin",
    	MG: "Madagaskar",
    	MH: "MarÅ¡alova Ostrva",
    	MK: "Makedonija",
    	ML: "Mali",
    	MM: "Mijanmar",
    	MN: "Mongolija",
    	MO: "Makao (SAR Kina)",
    	MP: "Sjeverna Marijanska Ostrva",
    	MQ: "Martinik",
    	MR: "Mauritanija",
    	MS: "Monserat",
    	MT: "Malta",
    	MU: "Mauricijus",
    	MV: "Maldivi",
    	MW: "Malavi",
    	MX: "Meksiko",
    	MY: "Malezija",
    	MZ: "Mozambik",
    	NA: "Namibija",
    	NC: "Nova Kaledonija",
    	NE: "Niger",
    	NF: "Ostrvo Norfolk",
    	NG: "Nigerija",
    	NI: "Nikaragva",
    	NL: "Holandija",
    	NO: "NorveÅ¡ka",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Novi Zeland",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Francuska Polinezija",
    	PG: "Papua Nova Gvineja",
    	PH: "Filipini",
    	PK: "Pakistan",
    	PL: "Poljska",
    	PM: "Sveti Petar i Mikelon",
    	PN: "Pitkernska Ostrva",
    	PR: "Porto Riko",
    	PS: "Palestinska Teritorija",
    	PT: "Portugal",
    	PW: "Palau",
    	PY: "Paragvaj",
    	QA: "Katar",
    	RE: "Reunion",
    	RO: "Rumunija",
    	RS: "Srbija",
    	RU: "Rusija",
    	RW: "Ruanda",
    	SA: "Saudijska Arabija",
    	SB: "Solomonska Ostrva",
    	SC: "SejÅ¡eli",
    	SD: "Sudan",
    	SE: "Å vedska",
    	SG: "Singapur",
    	SH: "Sveta Helena",
    	SI: "Slovenija",
    	SJ: "Svalbard i Jan Majen",
    	SK: "SlovaÄka",
    	SL: "Sijera Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalija",
    	SR: "Surinam",
    	SS: "JuÅ¾ni Sudan",
    	ST: "Sao Tome i Principe",
    	SV: "Salvador",
    	SX: "Sint Marten",
    	SY: "Sirija",
    	SZ: "Svazilend",
    	TC: "Ostrva Turks i Kaikos",
    	TD: "Äad",
    	TF: "Francuske JuÅ¾ne Teritorije",
    	TG: "Togo",
    	TH: "Tajland",
    	TJ: "TadÅ¾ikistan",
    	TK: "Tokelau",
    	TL: "IstoÄni Timor",
    	TM: "Turkmenistan",
    	TN: "Tunis",
    	TO: "Tonga",
    	TR: "Turska",
    	TT: "Trinidad i Tobago",
    	TV: "Tuvalu",
    	TW: "Tajvan",
    	TZ: "Tanzanija",
    	UA: "Ukrajina",
    	UG: "Uganda",
    	UM: "AmeriÄka Vanjska Ostrva",
    	US: "Sjedinjene AmeriÄke DrÅ¾ave",
    	UY: "Urugvaj",
    	UZ: "Uzbekistan",
    	VA: "Vatikan",
    	VC: "Sveti Vinsent i Grenadin",
    	VE: "Venecuela",
    	VG: "Britanska DjeviÄanska Ostrva",
    	VI: "AmeriÄka DjeviÄanska Ostrva",
    	VN: "Vijetnam",
    	VU: "Vanuatu",
    	WF: "Ostrva Valis i Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Jemen",
    	YT: "Majote",
    	ZA: "JuÅ¾noafriÄka Republika",
    	ZM: "Zambija",
    	ZW: "Zimbabve"
    };
    var bs = {
    	locale: locale$4,
    	countries: countries$4
    };

    var bs$1 = /*#__PURE__*/Object.freeze({
        locale: locale$4,
        countries: countries$4,
        default: bs
    });

    var locale$5 = "ca";
    var countries$5 = {
    	AF: "Afganistan",
    	AX: "Ãland, illes",
    	AL: "AlbÃ nia",
    	DE: "Alemanya",
    	DZ: "AlgÃ¨ria",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "AntÃ rtida",
    	AG: "Antigua i Barbuda",
    	SA: "ArÃ bia Saudita",
    	AR: "Argentina",
    	AM: "ArmÃ¨nia",
    	AW: "Aruba",
    	AU: "AustrÃ lia",
    	AT: "Ãustria",
    	AZ: "Azerbaidjan",
    	BS: "Bahames",
    	BH: "Bahrain",
    	BD: "Bangla Desh",
    	BB: "Barbados",
    	BE: "BÃ¨lgica",
    	BZ: "Belize",
    	BJ: "BenÃ­n",
    	BM: "Bermudes",
    	BT: "Bhutan",
    	BY: "BielorÃºssia",
    	BO: "BolÃ­via",
    	BQ: "Bonaire, Sint Eustatius i Saba",
    	BA: "BÃ²snia i Hercegovina",
    	BW: "Botswana",
    	BV: "Bouvet",
    	BR: "Brasil",
    	BN: "Brunei",
    	BG: "BulgÃ ria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KY: "Caiman, illes",
    	KH: "Cambodja",
    	CM: "Camerun",
    	CA: "CanadÃ ",
    	CV: "Cap Verd",
    	CF: "Centreafricana, RepÃºblica",
    	CX: "Christmas, illa",
    	CC: "Cocos, illes",
    	CO: "ColÃ²mbia",
    	KM: "Comores",
    	CG: "Congo, RepÃºblica del",
    	CD: "Congo, RepÃºblica DemocrÃ tica del",
    	CK: "Cook, illes",
    	KP: "Corea del Nord",
    	KR: "Corea del Sud",
    	CI: "Costa d'Ivori",
    	CR: "Costa Rica",
    	HR: "CroÃ cia",
    	CU: "Cuba",
    	CW: "CuraÃ§ao",
    	DK: "Dinamarca",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominicana, RepÃºblica",
    	EG: "Egipte",
    	EC: "Equador",
    	AE: "Emirats Ãrabs Units",
    	ER: "Eritrea",
    	SK: "EslovÃ quia",
    	SI: "EslovÃ¨nia",
    	ES: "Espanya",
    	US: "Estats UnitsÂ (EUA)",
    	EE: "EstÃ²nia",
    	ET: "EtiÃ²pia",
    	FO: "FÃ¨roe, illes",
    	FJ: "Fiji",
    	PH: "Filipines",
    	FI: "FinlÃ ndia",
    	FR: "FranÃ§a",
    	GA: "Gabon",
    	GM: "GÃ mbia",
    	GE: "GeÃ²rgia",
    	GS: "GeÃ²rgia del Sud i Sandwich del Sud, illes",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "GrÃ¨cia",
    	GD: "Grenada",
    	GL: "GroenlÃ ndia",
    	GP: "Guadeloupe",
    	GF: "Guaiana Francesa",
    	GU: "Guam",
    	GT: "Guatemala",
    	GG: "Guernsey",
    	GN: "RepÃºblica de Guinea",
    	GW: "Guinea Bissau",
    	GQ: "Guinea Equatorial",
    	GY: "Guyana",
    	HT: "HaitÃ­",
    	HM: "Heard, illa i McDonald, illes",
    	HN: "Hondures",
    	HK: "Hong Kong",
    	HU: "Hongria",
    	YE: "Iemen",
    	IM: "Illa de Man",
    	UM: "Illes PerifÃ¨riques Menors dels EUA",
    	IN: "Ãndia",
    	ID: "IndonÃ¨sia",
    	IR: "Iran",
    	IQ: "Iraq",
    	IE: "Irlanda",
    	IS: "IslÃ ndia",
    	IL: "Israel",
    	IT: "ItÃ lia",
    	JM: "Jamaica",
    	JP: "JapÃ³",
    	JE: "Jersey",
    	JO: "JordÃ nia",
    	KZ: "Kazakhstan",
    	KE: "Kenya",
    	KG: "Kirguizistan",
    	KI: "Kiribati",
    	KW: "Kuwait",
    	LA: "Laos",
    	LS: "Lesotho",
    	LV: "LetÃ²nia",
    	LB: "LÃ­ban",
    	LR: "LibÃ¨ria",
    	LY: "LÃ­bia",
    	LI: "Liechtenstein",
    	LT: "LituÃ nia",
    	LU: "Luxemburg",
    	MO: "Macau",
    	MK: "MacedÃ²nia",
    	MG: "Madagascar",
    	MY: "MalÃ isia",
    	MW: "Malawi",
    	MV: "Maldives",
    	ML: "Mali",
    	MT: "Malta",
    	FK: "Malvines, illes",
    	MP: "Mariannes Septentrionals, illes",
    	MA: "Marroc",
    	MH: "Marshall, illes",
    	MQ: "Martinica",
    	MU: "Maurici",
    	MR: "MauritÃ nia",
    	YT: "Mayotte",
    	MX: "MÃ¨xic",
    	FM: "MicronÃ¨sia, Estats Federats de",
    	MZ: "MoÃ§ambic",
    	MD: "MoldÃ via",
    	MC: "MÃ²naco",
    	MN: "MongÃ²lia",
    	ME: "Montenegro",
    	MS: "Montserrat",
    	MM: "Myanmar",
    	NA: "NamÃ­bia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NI: "Nicaragua",
    	NE: "NÃ­ger",
    	NG: "NigÃ¨ria",
    	NU: "Niue",
    	NF: "Norfolk, illa",
    	NO: "Noruega",
    	NC: "Nova CaledÃ²nia",
    	NZ: "Nova Zelanda",
    	OM: "Oman",
    	NL: "PaÃ¯sos Baixos",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestina",
    	PA: "PanamÃ ",
    	PG: "Papua Nova Guinea",
    	PY: "Paraguai",
    	PE: "PerÃº",
    	PN: "Pitcairn, illes",
    	PF: "PolinÃ¨sia Francesa",
    	PL: "PolÃ²nia",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	QA: "Qatar",
    	GB: "Regne Unit",
    	RE: "ReuniÃ³, illa de la",
    	RO: "Romania",
    	RU: "RÃºssia",
    	RW: "Ruanda",
    	EH: "SÃ hara Occidental",
    	KN: "Saint Kitts i Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint-Pierre i Miquelon",
    	VC: "Saint Vincent i les Grenadines",
    	BL: "Saint-BarthÃ©lemy",
    	MF: "Saint-Martin",
    	SB: "SalomÃ³",
    	SV: "Salvador, El",
    	WS: "Samoa",
    	AS: "Samoa Nord-americana",
    	SM: "San Marino",
    	SH: "Santa Helena",
    	ST: "SÃ£o TomÃ© i PrÃ­ncipe",
    	SN: "Senegal",
    	RS: "SÃ¨rbia",
    	SC: "Seychelles",
    	SL: "Sierra Leone",
    	SG: "Singapur",
    	SX: "Sint Maarten",
    	SY: "SÃ­ria",
    	SO: "SomÃ lia",
    	LK: "Sri Lanka",
    	ZA: "Sud-Ã frica",
    	SD: "Sudan",
    	SS: "Sudan del Sud",
    	SE: "SuÃ¨cia",
    	CH: "SuÃ¯ssa",
    	SR: "Surinam",
    	SJ: "Svalbard i Jan Mayen",
    	SZ: "SwazilÃ ndia",
    	TJ: "Tadjikistan",
    	TH: "TailÃ ndia",
    	TW: "Taiwan",
    	TZ: "TanzÃ nia",
    	IO: "Territori BritÃ nic de l'OceÃ  Ãndic",
    	TF: "Territoris Francesos del Sud",
    	TL: "Timor Oriental",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinitat i Tobago",
    	TN: "TunÃ­sia",
    	TM: "Turkmenistan",
    	TC: "Turks i Caicos, illes",
    	TR: "Turquia",
    	TV: "Tuvalu",
    	TD: "Txad",
    	CZ: "TxÃ¨quia",
    	UA: "UcraÃ¯na",
    	UG: "Uganda",
    	UY: "Uruguai",
    	UZ: "Uzbekistan",
    	VU: "Vanuatu",
    	VA: "VaticÃ , Ciutat del",
    	VE: "VeneÃ§uela",
    	VG: "Verges BritÃ niques, illes",
    	VI: "Verges Nord-americanes, illes",
    	VN: "Vietnam",
    	WF: "Wallis i Futuna",
    	CL: "Xile",
    	CN: "Xina",
    	CY: "Xipre",
    	ZM: "ZÃ mbia",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var ca = {
    	locale: locale$5,
    	countries: countries$5
    };

    var ca$1 = /*#__PURE__*/Object.freeze({
        locale: locale$5,
        countries: countries$5,
        default: ca
    });

    var locale$6 = "cs";
    var countries$6 = {
    	AF: "AfghÃ¡nistÃ¡n",
    	AX: "Ãlandy",
    	AL: "AlbÃ¡nie",
    	DZ: "AlÅ¾Ã­rsko",
    	AS: "AmerickÃ¡ Samoa",
    	VI: "AmerickÃ© PanenskÃ© ostrovy",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktida",
    	AG: "Antigua a Barbuda",
    	AR: "Argentina",
    	AM: "ArmÃ©nie",
    	AW: "Aruba",
    	AU: "AustrÃ¡lie",
    	AZ: "ÃzerbÃ¡jdÅ¾Ã¡n",
    	BS: "Bahamy",
    	BH: "Bahrajn",
    	BD: "BangladÃ©Å¡",
    	BB: "Barbados",
    	BE: "Belgie",
    	BZ: "Belize",
    	BY: "BÄlorusko",
    	BJ: "Benin",
    	BM: "Bermudy",
    	BT: "BhÃºtÃ¡n",
    	BO: "BolÃ­vie",
    	BQ: "Bonaire, SvatÃ½ Eustach a Saba",
    	BA: "Bosna a Hercegovina",
    	BW: "Botswana",
    	BV: "BouvetÅ¯v ostrov",
    	BR: "BrazÃ­lie",
    	IO: "BritskÃ© indickooceÃ¡nskÃ© ÃºzemÃ­",
    	VG: "BritskÃ© PanenskÃ© ostrovy",
    	BN: "Brunej",
    	BG: "Bulharsko",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	CK: "Cookovy ostrovy",
    	CW: "CuraÃ§ao",
    	TD: "Äad",
    	ME: "ÄernÃ¡ Hora",
    	CZ: "Äesko",
    	CN: "ÄÃ­na",
    	DK: "DÃ¡nsko",
    	CD: "DemokratickÃ¡ republika Kongo",
    	DM: "Dominika",
    	DO: "DominikÃ¡nskÃ¡ republika",
    	DJ: "DÅ¾ibutsko",
    	EG: "Egypt",
    	EC: "EkvÃ¡dor",
    	ER: "Eritrea",
    	EE: "Estonsko",
    	ET: "Etiopie",
    	FO: "FaerskÃ© ostrovy",
    	FK: "Falklandy (MalvÃ­ny)",
    	FJ: "FidÅ¾i",
    	PH: "FilipÃ­ny",
    	FI: "Finsko",
    	FR: "Francie",
    	GF: "FrancouzskÃ¡ Guyana",
    	TF: "FrancouzskÃ¡ jiÅ¾nÃ­ a antarktickÃ¡ ÃºzemÃ­",
    	PF: "FrancouzskÃ¡ PolynÃ©sie",
    	GA: "Gabon",
    	GM: "Gambie",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GD: "Grenada",
    	GL: "GrÃ³nsko",
    	GE: "Gruzie",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GG: "Guernsey",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "HeardÅ¯v ostrov a McDonaldovy ostrovy",
    	HN: "Honduras",
    	HK: "Hongkong",
    	CL: "Chile",
    	HR: "Chorvatsko",
    	IN: "Indie",
    	ID: "IndonÃ©sie",
    	IQ: "IrÃ¡k",
    	IR: "ÃrÃ¡n",
    	IE: "Irsko",
    	IS: "Island",
    	IT: "ItÃ¡lie",
    	IL: "Izrael",
    	JM: "Jamajka",
    	JP: "Japonsko",
    	YE: "Jemen",
    	JE: "Jersey",
    	ZA: "JihoafrickÃ¡ republika",
    	GS: "JiÅ¾nÃ­ Georgie a JiÅ¾nÃ­ Sandwichovy ostrovy",
    	KR: "JiÅ¾nÃ­ Korea",
    	SS: "JiÅ¾nÃ­ SÃºdÃ¡n",
    	JO: "JordÃ¡nsko",
    	KY: "KajmanskÃ© ostrovy",
    	KH: "KambodÅ¾a",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "Kapverdy",
    	QA: "Katar",
    	KZ: "KazachstÃ¡n",
    	KE: "KeÅa",
    	KI: "Kiribati",
    	CC: "KokosovÃ© ostrovy",
    	CO: "Kolumbie",
    	KM: "Komory",
    	CG: "Kongo",
    	CR: "Kostarika",
    	CU: "Kuba",
    	KW: "Kuvajt",
    	CY: "Kypr",
    	KG: "KyrgyzstÃ¡n",
    	LA: "Laos",
    	LS: "Lesotho",
    	LB: "Libanon",
    	LR: "LibÃ©rie",
    	LY: "Libye",
    	LI: "LichtenÅ¡tejnsko",
    	LT: "Litva",
    	LV: "LotyÅ¡sko",
    	LU: "Lucembursko",
    	MO: "Macao",
    	MG: "Madagaskar",
    	HU: "MaÄarsko",
    	MK: "Makedonie",
    	MY: "Malajsie",
    	MW: "Malawi",
    	MV: "Maledivy",
    	ML: "Mali",
    	MT: "Malta",
    	IM: "Ostrov Man",
    	MA: "Maroko",
    	MH: "Marshallovy ostrovy",
    	MQ: "Martinik",
    	MU: "Mauricius",
    	MR: "MauritÃ¡nie",
    	YT: "Mayotte",
    	UM: "MenÅ¡Ã­ odlehlÃ© ostrovy USA",
    	MX: "Mexiko",
    	FM: "MikronÃ©sie",
    	MD: "Moldavsko",
    	MC: "Monako",
    	MN: "Mongolsko",
    	MS: "Montserrat",
    	MZ: "Mosambik",
    	MM: "Myanmar",
    	NA: "Namibie",
    	NR: "Nauru",
    	DE: "NÄmecko",
    	NP: "NepÃ¡l",
    	NE: "Niger",
    	NG: "NigÃ©rie",
    	NI: "Nikaragua",
    	NU: "Niue",
    	NL: "Nizozemsko",
    	NF: "Norfolk",
    	NO: "Norsko",
    	NC: "NovÃ¡ Kaledonie",
    	NZ: "NovÃ½ ZÃ©land",
    	OM: "OmÃ¡n",
    	PK: "PÃ¡kistÃ¡n",
    	PW: "Palau",
    	PS: "PalestinskÃ¡ autonomie",
    	PA: "Panama",
    	PG: "Papua-NovÃ¡ Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PN: "Pitcairnovy ostrovy",
    	CI: "PobÅeÅ¾Ã­ slonoviny",
    	PL: "Polsko",
    	PR: "Portoriko",
    	PT: "Portugalsko",
    	AT: "Rakousko",
    	RE: "RÃ©union",
    	GQ: "RovnÃ­kovÃ¡ Guinea",
    	RO: "Rumunsko",
    	RU: "Rusko",
    	RW: "Rwanda",
    	GR: "Åecko",
    	PM: "Saint-Pierre a Miquelon",
    	SV: "Salvador",
    	WS: "Samoa",
    	SM: "San Marino",
    	SA: "SaÃºdskÃ¡ ArÃ¡bie",
    	SN: "Senegal",
    	KP: "SevernÃ­ Korea",
    	MP: "SevernÃ­ Mariany",
    	SC: "Seychely",
    	SL: "Sierra Leone",
    	SG: "Singapur",
    	SK: "Slovensko",
    	SI: "Slovinsko",
    	SO: "SomÃ¡lsko",
    	AE: "SpojenÃ© arabskÃ© emirÃ¡ty",
    	GB: "SpojenÃ© krÃ¡lovstvÃ­",
    	US: "SpojenÃ© stÃ¡ty americkÃ©",
    	RS: "Srbsko",
    	CF: "StÅedoafrickÃ¡ republika",
    	SD: "SÃºdÃ¡n",
    	SR: "Surinam",
    	SH: "SvatÃ¡ Helena, Ascension a Tristan da Cunha",
    	LC: "SvatÃ¡ Lucie",
    	BL: "SvatÃ½ BartolomÄj",
    	KN: "SvatÃ½ KryÅ¡tof a Nevis",
    	MF: "SvatÃ½ Martin (francouzskÃ¡ ÄÃ¡st)",
    	SX: "SvatÃ½ Martin (nizozemskÃ¡ ÄÃ¡st)",
    	ST: "SvatÃ½ TomÃ¡Å¡ a PrincÅ¯v ostrov",
    	VC: "SvatÃ½ Vincenc a Grenadiny",
    	SZ: "Svazijsko",
    	SY: "SÃ½rie",
    	SB: "Å alamounovy ostrovy",
    	ES: "Å panÄlsko",
    	SJ: "Å picberky a Jan Mayen",
    	LK: "Å rÃ­ Lanka",
    	SE: "Å vÃ©dsko",
    	CH: "Å vÃ½carsko",
    	TJ: "TÃ¡dÅ¾ikistÃ¡n",
    	TZ: "Tanzanie",
    	TH: "Thajsko",
    	TW: "Tchaj-wan",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad a Tobago",
    	TN: "Tunisko",
    	TR: "Turecko",
    	TM: "TurkmenistÃ¡n",
    	TC: "Turks a Caicos",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukrajina",
    	UY: "Uruguay",
    	UZ: "UzbekistÃ¡n",
    	CX: "VÃ¡noÄnÃ­ ostrov",
    	VU: "Vanuatu",
    	VA: "VatikÃ¡n",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	TL: "VÃ½chodnÃ­ Timor",
    	WF: "Wallis a Futuna",
    	ZM: "Zambie",
    	EH: "ZÃ¡padnÃ­ Sahara",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var cs = {
    	locale: locale$6,
    	countries: countries$6
    };

    var cs$1 = /*#__PURE__*/Object.freeze({
        locale: locale$6,
        countries: countries$6,
        default: cs
    });

    var locale$7 = "da";
    var countries$7 = {
    	AF: "Afghanistan",
    	AL: "Albanien",
    	DZ: "Algeriet",
    	AS: "Amerikansk Samoa",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktis",
    	AG: "Antigua og Barbuda",
    	AR: "Argentina",
    	AM: "Armenien",
    	AW: "Aruba",
    	AU: "Australien",
    	AT: "Ãstrig",
    	AZ: "Aserbajdsjan",
    	BS: "Bahamas",
    	BH: "Bahrain",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BY: "Hviderusland",
    	BE: "Belgien",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Bolivia",
    	BA: "Bosnien-Hercegovina",
    	BW: "Botswana",
    	BV: "Bouvet Island",
    	BR: "Brasilien",
    	IO: "British Indian Ocean Territory",
    	BN: "Brunei Darussalam",
    	BG: "Bulgarien",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Cambodja",
    	CM: "Cameroun",
    	CA: "Canada",
    	CV: "Kap Verde",
    	KY: "CaymanÃ¸erne",
    	CF: "Den Centralafrikanske Republik",
    	TD: "Tchad",
    	CL: "Chile",
    	CN: "Kina",
    	CX: "JulÃ¸en",
    	CC: "CocosÃ¸erne",
    	CO: "Colombia",
    	KM: "Comorerne",
    	CG: "Congo",
    	CD: "Demokratiske Republik Congo",
    	CK: "CookÃ¸erne",
    	CR: "Costa Rica",
    	CI: "Elfenbenskysten",
    	HR: "Kroatien",
    	CU: "Cuba",
    	CY: "Cypern",
    	CZ: "Tjekkiet",
    	DK: "Danmark",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominikanske Republik",
    	EC: "Ecuador",
    	EG: "Egypten",
    	SV: "El Salvador",
    	GQ: "Ãkvatorialguinea",
    	ER: "Eritrea",
    	EE: "Estland",
    	ET: "Etiopien",
    	FK: "FalklandsÃ¸erne",
    	FO: "FÃ¦rÃ¸erne",
    	FJ: "Fiji",
    	FI: "Finland",
    	FR: "Frankrig",
    	GF: "Fransk Guiana",
    	PF: "Fransk Polynesien",
    	TF: "Franske Sydterritorier",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "Georgien",
    	DE: "Tyskland",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "GrÃ¦kenland",
    	GL: "GrÃ¸nland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard-Ã¸en og McDonald-Ã¸erne",
    	VA: "Vatikanstaten",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "Ungarn",
    	IS: "Island",
    	IN: "Indien",
    	ID: "Indonesien",
    	IR: "Iran",
    	IQ: "Irak",
    	IE: "Irland",
    	IL: "Israel",
    	IT: "Italien",
    	JM: "Jamaica",
    	JP: "Japan",
    	JO: "Jordan",
    	KZ: "Kazakhstan",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "Nordkorea",
    	KR: "Sydkorea",
    	KW: "Kuwait",
    	KG: "Kirgisistan",
    	LA: "Laos",
    	LV: "Letland",
    	LB: "Libanon",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "Libyen",
    	LI: "Liechtenstein",
    	LT: "Litauen",
    	LU: "Luxembourg",
    	MO: "Macao",
    	MK: "Makedonien",
    	MG: "Madagaskar",
    	MW: "Malawi",
    	MY: "Malaysia",
    	MV: "Maldiverne",
    	ML: "Mali",
    	MT: "Malta",
    	MH: "MarshallÃ¸erne",
    	MQ: "Martinique",
    	MR: "Mauretanien",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Mexico",
    	FM: "Mikronesien",
    	MD: "Moldova",
    	MC: "Monaco",
    	MN: "Mongoliet",
    	MS: "Montserrat",
    	MA: "Marokko",
    	MZ: "Mozambique",
    	MM: "Myanmar (Burma)",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "Holland",
    	NC: "Ny Kaledonien",
    	NZ: "New Zealand",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Norfolk Island",
    	MP: "Nordmarianerne",
    	NO: "Norge",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "PalÃ¦stina",
    	PA: "Panama",
    	PG: "Papua Ny Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "Filippinerne",
    	PN: "Pitcairn",
    	PL: "Polen",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "RumÃ¦nien",
    	RU: "Rusland",
    	RW: "Rwanda",
    	SH: "Sankt Helena",
    	KN: "Saint Kitts og Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint-Pierre og Miquelon",
    	VC: "Saint Vincent og Grenadinerne",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© og PrÃ­ncipe",
    	SA: "Saudi-Arabien",
    	SN: "Senegal",
    	SC: "Seychellerne",
    	SL: "Sierra Leone",
    	SG: "Singapore",
    	SK: "Slovakiet",
    	SI: "Slovenien",
    	SB: "SalomonÃ¸erne",
    	SO: "Somalia",
    	ZA: "Sydafrika",
    	GS: "South Georgia og South Sandwich Islands",
    	ES: "Spanien",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	SR: "Surinam",
    	SJ: "Norge Svalbard og Jan Mayen",
    	SZ: "Swaziland",
    	SE: "Sverige",
    	CH: "Schweiz",
    	SY: "Syrien",
    	TW: "Republikken Kina Taiwan",
    	TJ: "Tadsjikistan",
    	TZ: "Tanzania",
    	TH: "Thailand",
    	TL: "Ãsttimor",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad og Tobago",
    	TN: "Tunesien",
    	TR: "Tyrkiet",
    	TM: "Turkmenistan",
    	TC: "Turks- og CaicosÃ¸erne",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraine",
    	AE: "Forenede Arabiske Emirater",
    	GB: "Storbritannien",
    	US: "USA",
    	UM: "USA's ydre smÃ¥Ã¸er",
    	UY: "Uruguay",
    	UZ: "Usbekistan",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	VG: "Britiske JomfruÃ¸er",
    	VI: "Amerikanske JomfruÃ¸er",
    	WF: "Wallis og Futuna",
    	EH: "Vestsahara",
    	YE: "Yemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "ÃlandsÃ¸erne",
    	BQ: "Nederlandske Antiller",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Isle of Man",
    	JE: "Jersey",
    	ME: "Montenegro",
    	BL: "Saint-BarthÃ©lemy",
    	MF: "Saint Martin (fransk side)",
    	RS: "Serbien",
    	SX: "Saint Martin (hollandsk side)",
    	SS: "Sydsudan",
    	XK: "Kosovo"
    };
    var da = {
    	locale: locale$7,
    	countries: countries$7
    };

    var da$1 = /*#__PURE__*/Object.freeze({
        locale: locale$7,
        countries: countries$7,
        default: da
    });

    var locale$8 = "de";
    var countries$8 = {
    	AF: "Afghanistan",
    	EG: "Ãgypten",
    	AX: "Ãland",
    	AL: "Albanien",
    	DZ: "Algerien",
    	AS: "Amerikanisch-Samoa",
    	VI: "Amerikanische Jungferninseln",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktika",
    	AG: "Antigua und Barbuda",
    	GQ: "Ãquatorialguinea",
    	AR: "Argentinien",
    	AM: "Armenien",
    	AW: "Aruba",
    	AZ: "Aserbaidschan",
    	ET: "Ãthiopien",
    	AU: "Australien",
    	BS: "Bahamas",
    	BH: "Bahrain",
    	BD: "Bangladesch",
    	BB: "Barbados",
    	BY: "WeiÃrussland",
    	BE: "Belgien",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Bolivien",
    	BQ: "Bonaire",
    	BA: "Bosnien und Herzegowina",
    	BW: "Botswana",
    	BV: "Bouvetinsel",
    	BR: "Brasilien",
    	VG: "Britische Jungferninseln",
    	IO: "Britisches Territorium im Indischen Ozean",
    	BN: "Brunei Darussalam",
    	BG: "Bulgarien",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	CL: "Chile",
    	CN: "China",
    	CK: "Cookinseln",
    	CR: "Costa Rica",
    	CI: "ElfenbeinkÃ¼ste",
    	CW: "CuraÃ§ao",
    	DK: "DÃ¤nemark",
    	DE: "Deutschland",
    	DM: "Dominica",
    	DO: "Dominikanische Republik",
    	DJ: "Dschibuti",
    	EC: "Ecuador",
    	SV: "El Salvador",
    	ER: "Eritrea",
    	EE: "Estland",
    	FK: "Falklandinseln",
    	FO: "FÃ¤rÃ¶er",
    	FJ: "Fidschi",
    	FI: "Finnland",
    	FR: "Frankreich",
    	GF: "FranzÃ¶sisch-Guayana",
    	PF: "FranzÃ¶sisch-Polynesien",
    	TF: "FranzÃ¶sische SÃ¼d- und Antarktisgebiete",
    	GA: "Gabun",
    	GM: "Gambia",
    	GE: "Georgien",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GD: "Grenada",
    	GR: "Griechenland",
    	GL: "GrÃ¶nland",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GG: "Guernsey",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard und McDonaldinseln",
    	HN: "Honduras",
    	HK: "Hongkong",
    	IN: "Indien",
    	ID: "Indonesien",
    	IM: "Insel Man",
    	IQ: "Irak",
    	IR: "Iran",
    	IE: "Irland",
    	IS: "Island",
    	IL: "Israel",
    	IT: "Italien",
    	JM: "Jamaika",
    	JP: "Japan",
    	YE: "Jemen",
    	JE: "Jersey",
    	JO: "Jordanien",
    	KY: "Kaimaninseln",
    	KH: "Kambodscha",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "Kap Verde",
    	KZ: "Kasachstan",
    	QA: "Katar",
    	KE: "Kenia",
    	KG: "Kirgisistan",
    	KI: "Kiribati",
    	CC: "Kokosinseln",
    	CO: "Kolumbien",
    	KM: "Komoren",
    	CD: "Kongo",
    	KP: "Nordkorea",
    	KR: "SÃ¼dkorea",
    	HR: "Kroatien",
    	CU: "Kuba",
    	KW: "Kuwait",
    	LA: "Laos",
    	LS: "Lesotho",
    	LV: "Lettland",
    	LB: "Libanon",
    	LR: "Liberia",
    	LY: "Libyen",
    	LI: "Liechtenstein",
    	LT: "Litauen",
    	LU: "Luxemburg",
    	MO: "Macao",
    	MG: "Madagaskar",
    	MW: "Malawi",
    	MY: "Malaysia",
    	MV: "Malediven",
    	ML: "Mali",
    	MT: "Malta",
    	MA: "Marokko",
    	MH: "Marshallinseln",
    	MQ: "Martinique",
    	MR: "Mauretanien",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MK: "Mazedonien",
    	MX: "Mexiko",
    	FM: "Mikronesien",
    	MD: "Moldawien",
    	MC: "Monaco",
    	MN: "Mongolei",
    	ME: "Montenegro",
    	MS: "Montserrat",
    	MZ: "Mosambik",
    	MM: "Myanmar",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NC: "Neukaledonien",
    	NZ: "Neuseeland",
    	NI: "Nicaragua",
    	NL: "Niederlande",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	MP: "NÃ¶rdliche Marianen",
    	NF: "Norfolkinsel",
    	NO: "Norwegen",
    	OM: "Oman",
    	AT: "Ãsterreich",
    	TL: "Osttimor",
    	PK: "Pakistan",
    	PS: "Staat PalÃ¤stina",
    	PW: "Palau",
    	PA: "Panama",
    	PG: "Papua-Neuguinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "Philippinen",
    	PN: "Pitcairninseln",
    	PL: "Polen",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	TW: "Taiwan",
    	CG: "Republik Kongo",
    	RE: "RÃ©union",
    	RW: "Ruanda",
    	RO: "RumÃ¤nien",
    	RU: "Russische FÃ¶deration",
    	BL: "Saint-BarthÃ©lemy",
    	MF: "Saint-Martin",
    	SB: "Salomonen",
    	ZM: "Sambia",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© und PrÃ­ncipe",
    	SA: "Saudi-Arabien",
    	SE: "Schweden",
    	CH: "Schweiz",
    	SN: "Senegal",
    	RS: "Serbien",
    	SC: "Seychellen",
    	SL: "Sierra Leone",
    	ZW: "Simbabwe",
    	SG: "Singapur",
    	SX: "Sint Maarten",
    	SK: "Slowakei",
    	SI: "Slowenien",
    	SO: "Somalia",
    	ES: "Spanien",
    	LK: "Sri Lanka",
    	SH: "St. Helena",
    	KN: "St. Kitts und Nevis",
    	LC: "St. Lucia",
    	PM: "Saint-Pierre und Miquelon",
    	VC: "St. Vincent und die Grenadinen",
    	ZA: "SÃ¼dafrika",
    	SD: "Sudan",
    	GS: "SÃ¼dgeorgien und die SÃ¼dlichen Sandwichinseln",
    	SS: "SÃ¼dsudan",
    	SR: "Suriname",
    	SJ: "Svalbard und Jan Mayen",
    	SZ: "Swasiland",
    	SY: "Syrien, Arabische Republik",
    	TJ: "Tadschikistan",
    	TZ: "Tansania, Vereinigte Republik",
    	TH: "Thailand",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad und Tobago",
    	TD: "Tschad",
    	CZ: "Tschechische Republik",
    	TN: "Tunesien",
    	TR: "TÃ¼rkei",
    	TM: "Turkmenistan",
    	TC: "Turks- und Caicosinseln",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraine",
    	HU: "Ungarn",
    	UM: "United States Minor Outlying Islands",
    	UY: "Uruguay",
    	UZ: "Usbekistan",
    	VU: "Vanuatu",
    	VA: "Vatikanstadt",
    	VE: "Venezuela",
    	AE: "Vereinigte Arabische Emirate",
    	US: "Vereinigte Staaten von Amerika",
    	GB: "Vereinigtes KÃ¶nigreich",
    	VN: "Vietnam",
    	WF: "Wallis und Futuna",
    	CX: "Weihnachtsinsel",
    	EH: "Westsahara",
    	CF: "Zentralafrikanische Republik",
    	CY: "Zypern",
    	XK: "Kosovo"
    };
    var de = {
    	locale: locale$8,
    	countries: countries$8
    };

    var de$1 = /*#__PURE__*/Object.freeze({
        locale: locale$8,
        countries: countries$8,
        default: de
    });

    var locale$9 = "el";
    var countries$9 = {
    	AF: "ÎÏÎ³Î±Î½Î¹ÏÏÎ¬Î½",
    	AL: "ÎÎ»Î²Î±Î½Î¯Î±",
    	DZ: "ÎÎ»Î³ÎµÏÎ¯Î±",
    	AS: "ÎÎ¼ÎµÏÎ¹ÎºÎ±Î½Î¹ÎºÎ® Î£Î±Î¼ÏÎ±",
    	AD: "ÎÎ½Î´ÏÏÏÎ±",
    	AO: "ÎÎ½Î³ÎºÏÎ»Î±",
    	AI: "ÎÎ½Î³ÎºÎ¿ÏÎ¯Î»Î±",
    	AQ: "ÎÎ½ÏÎ±ÏÎºÏÎ¹ÎºÎ®",
    	AG: "ÎÎ½ÏÎ¯Î³ÎºÎ¿ÏÎ± ÎºÎ±Î¹ ÎÏÎ±ÏÎ¼ÏÎ¿ÏÎ½ÏÎ±",
    	AR: "ÎÏÎ³ÎµÎ½ÏÎ¹Î½Î®",
    	AM: "ÎÏÎ¼ÎµÎ½Î¯Î±",
    	AW: "ÎÏÎ¿ÏÎ¼ÏÎ±",
    	AU: "ÎÏÏÏÏÎ±Î»Î¯Î±",
    	AT: "ÎÏÏÏÏÎ¯Î±",
    	AZ: "ÎÎ¶ÎµÏÎ¼ÏÎ±ÏÏÎ¶Î¬Î½",
    	BS: "ÎÏÎ±ÏÎ¬Î¼ÎµÏ",
    	BH: "ÎÏÎ±ÏÏÎ­Î¹Î½",
    	BD: "ÎÏÎ±Î½Î³ÎºÎ»Î±Î½ÏÎ­Ï",
    	BB: "ÎÏÎ±ÏÎ¼ÏÎ¬Î½ÏÎ¿Ï",
    	BY: "ÎÎµÏÎºÎ¿ÏÏÏÎ¯Î±",
    	BE: "ÎÎ­Î»Î³Î¹Î¿",
    	BZ: "ÎÏÎµÎ»Î¯Î¶",
    	BJ: "ÎÏÎµÎ½Î¯Î½",
    	BM: "ÎÎµÏÎ¼Î¿ÏÎ´ÎµÏ",
    	BT: "ÎÏÎ¿ÏÏÎ¬Î½",
    	BO: "ÎÎ¿Î»Î¹Î²Î¯Î±",
    	BA: "ÎÎ¿ÏÎ½Î¯Î± ÎºÎ±Î¹ ÎÏÎ¶ÎµÎ³Î¿Î²Î¯Î½Î·",
    	BW: "ÎÏÎ¿ÏÏÎ¿ÏÎ¬Î½Î±",
    	BV: "ÎÏÎ¿ÏÎ²Î­",
    	BR: "ÎÏÎ±Î¶Î¹Î»Î¯Î±",
    	IO: "ÎÏÎµÏÎ±Î½Î¹ÎºÏ ÎÎ´Î±ÏÎ¿Ï ÎÎ½Î´Î¹ÎºÎ¿Ï Î©ÎºÎµÎ±Î½Î¿Ï",
    	BN: "Î£Î¿ÏÎ»ÏÎ±Î½Î¬ÏÎ¿ ÏÎ¿Ï ÎÏÏÎ¿ÏÎ½Î­Î¹",
    	BG: "ÎÎ¿ÏÎ»Î³Î±ÏÎ¯Î±",
    	BF: "ÎÏÎ¿ÏÏÎºÎ¯Î½Î± Î¦Î¬ÏÎ¿",
    	BI: "ÎÏÎ¿ÏÏÎ¿ÏÎ½ÏÎ¯",
    	KH: "ÎÎ±Î¼ÏÏÏÎ¶Î·",
    	CM: "ÎÎ±Î¼ÎµÏÎ¿ÏÎ½",
    	CA: "ÎÎ±Î½Î±Î´Î¬Ï",
    	CV: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ¿Ï Î ÏÎ¬ÏÎ¹Î½Î¿Ï ÎÎºÏÏÏÎ·ÏÎ¯Î¿Ï",
    	KY: "ÎÎ­Î¹Î¼Î±Î½ ÎÎ®ÏÎ¿Î¹",
    	CF: "ÎÎµÎ½ÏÏÎ¿Î±ÏÏÎ¹ÎºÎ±Î½Î¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±c",
    	TD: "Î¤ÏÎ¬Î½Ï",
    	CL: "Î§Î¹Î»Î®",
    	CN: "ÎÎ¯Î½Î±",
    	CX: "ÎÎ®ÏÎ¿Ï ÏÏÎ½ Î§ÏÎ¹ÏÏÎ¿ÏÎ³Î­Î½Î½ÏÎ½",
    	CC: "ÎÎ·ÏÎ¹Î¬ ÎÏÎºÎ¿Ï",
    	CO: "ÎÎ¿Î»Î¿Î¼Î²Î¯Î±",
    	KM: "ÎÎ½ÏÏÎ· ÏÏÎ½ ÎÎ¿Î¼Î¿ÏÏÎ½",
    	CG: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ¿Ï ÎÎ¿Î½Î³ÎºÏ",
    	CD: "ÎÎ±ÏÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ¿Ï ÎÎ¿Î½Î³ÎºÏ",
    	CK: "ÎÎ®ÏÎ¿Î¹ ÎÎ¿ÏÎº",
    	CR: "ÎÏÏÏÎ± Î¡Î¯ÎºÎ±",
    	CI: "ÎÎºÏÎ® ÎÎ»ÎµÏÎ±Î½ÏÎ¿ÏÏÎ¿Ï",
    	HR: "ÎÏÎ¿Î±ÏÎ¯Î±",
    	CU: "ÎÎ¿ÏÎ²Î±",
    	CY: "ÎÏÏÏÎ¿Ï",
    	CZ: "Î¤ÏÎµÏÎ¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±",
    	DK: "ÎÎ±Î½Î¯Î±",
    	DJ: "Î¤Î¶Î¹Î¼ÏÎ¿ÏÏÎ¯",
    	DM: "ÎÎ¿Î¹Î½Î¿ÏÎ¿Î»Î¹ÏÎµÎ¯Î± ÏÎ·Ï ÎÎ¿Î¼Î¹Î½Î¯ÎºÎ±Ï",
    	DO: "ÎÎ¿Î¼Î¹Î½Î¹ÎºÎ±Î½Î® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±",
    	EC: "ÎÎºÎ¿ÏÎ±Î´ÏÏ",
    	EG: "ÎÎ¯Î³ÏÏÏÎ¿Ï",
    	SV: "ÎÎ» Î£Î±Î»Î²Î±Î´ÏÏ",
    	GQ: "ÎÏÎ·Î¼ÎµÏÎ¹Î½Î®-ÎÎ¿ÏÎ¹Î½Î­Î±",
    	ER: "ÎÏÎ¬ÏÎ¿Ï ÏÎ·Ï ÎÏÏÎ¸ÏÎ±Î¯Î±Ï",
    	EE: "ÎÏÎ¸Î¿Î½Î¯Î±",
    	ET: "ÎÎ¹Î¸Î¹Î¿ÏÎ¯Î±",
    	FK: "ÎÎ®ÏÎ¿Î¹ Î¦ÏÎºÎ»Î±Î½Ï (ÎÎ±Î»Î²Î¯Î½Î±Ï)",
    	FO: "ÎÎ®ÏÎ¿Î¹ Î¦ÎµÏÏÎµÏ",
    	FJ: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÏÎ½ Î¦Î¯ÏÎ¶Î¹",
    	FI: "Î¦Î¹Î½Î»Î±Î½Î´Î¯Î±",
    	FR: "ÎÎ±Î»Î»Î¯Î±",
    	GF: "ÎÎ±Î»Î»Î¹ÎºÎ® ÎÎ¿ÏÎ¹Î¬Î½Î±",
    	PF: "ÎÎ±Î»Î»Î¹ÎºÎ® Î Î¿Î»ÏÎ½Î·ÏÎ¯Î±",
    	TF: "ÎÎ±Î»Î»Î¹ÎºÎ¬ ÎÏÏÎ¹Î± ÎºÎ±Î¹ ÎÎ½ÏÎ±ÏÎºÏÎ¹ÎºÎ¬ ÎÎ´Î¬ÏÎ·",
    	GA: "ÎÎºÎ±Î¼ÏÏÎ½",
    	GM: "ÎÎºÎ¬Î¼ÏÎ¹Î±",
    	GE: "ÎÎµÏÏÎ³Î¯Î±",
    	DE: "ÎÎµÏÎ¼Î±Î½Î¯Î±",
    	GH: "ÎÎºÎ¬Î½Î±",
    	GI: "ÎÎ¹Î²ÏÎ±Î»ÏÎ¬Ï",
    	GR: "ÎÎ»Î»Î¬Î´Î±",
    	GL: "ÎÏÎ¿Î¹Î»Î±Î½Î´Î¯Î±",
    	GD: "ÎÏÎµÎ½Î¬Î´Î±",
    	GP: "ÎÎ¿ÏÎ±Î´ÎµÎ»Î¿ÏÏÎ·",
    	GU: "ÎÎºÎ¿ÏÎ¬Î¼",
    	GT: "ÎÎ¿ÏÎ±ÏÎµÎ¼Î¬Î»Î±",
    	GN: "ÎÎ¿ÏÎ¹Î½Î­Î±",
    	GW: "ÎÎ¿ÏÎ¹Î½Î­Î±-ÎÏÎ¹ÏÏÎ¬Î¿Ï",
    	GY: "ÎÎ¿ÏÎ¹Î¬Î½Î±",
    	HT: "ÎÏÏÎ·",
    	HM: "ÎÎ®ÏÎ¿Î¹ Î§ÎµÏÎ½Ï ÎºÎ±Î¹ ÎÎ±ÎºÎ½ÏÏÎ½Î±Î»Î½Ï",
    	VA: "ÎÏÎ¬ÏÎ¿Ï ÏÎ·Ï Î ÏÎ»Î·Ï ÏÎ¿Ï ÎÎ±ÏÎ¹ÎºÎ±Î½Î¿Ï",
    	HN: "ÎÎ½Î´Î¿ÏÏÎ±",
    	HK: "Î§Î¿Î½Î³Îº ÎÏÎ½Î³Îº",
    	HU: "ÎÏÎ³Î³Î±ÏÎ¯Î±",
    	IS: "ÎÏÎ»Î±Î½Î´Î¯Î±",
    	IN: "ÎÎ½Î´Î¯Î±",
    	ID: "ÎÎ½Î´Î¿Î½Î·ÏÎ¯Î±",
    	IR: "ÎÏÎ»Î±Î¼Î¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ¿Ï ÎÏÎ¬Î½",
    	IQ: "ÎÏÎ¬Îº",
    	IE: "ÎÏÎ»Î±Î½Î´Î¯Î±",
    	IL: "ÎÏÏÎ±Î®Î»",
    	IT: "ÎÏÎ±Î»Î¯Î±",
    	JM: "Î¤Î¶Î±Î¼Î¬Î¹ÎºÎ±",
    	JP: "ÎÎ±ÏÏÎ½Î¯Î±",
    	JO: "ÎÎ¿ÏÎ´Î±Î½Î¯Î±",
    	KZ: "ÎÎ±Î¶Î±ÎºÏÏÎ¬Î½",
    	KE: "ÎÎ­Î½ÏÎ±",
    	KI: "ÎÎ¹ÏÎ¹Î¼ÏÎ¬ÏÎ¹",
    	KP: "ÎÎ±Î¿ÎºÏÎ±ÏÎ¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï ÎÎ¿ÏÎ­Î±Ï",
    	KR: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï ÎÎ¿ÏÎ­Î±Ï",
    	KW: "ÎÎ¿ÏÎ²Î­Î¹Ï",
    	KG: "ÎÎ¹ÏÎ³Î¹Î¶Î¯Î±",
    	LA: "ÎÎ±ÏÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ¿Ï ÎÎ¬Î¿Ï",
    	LV: "ÎÎµÏÎ¿Î½Î¯Î±",
    	LB: "ÎÎ¯Î²Î±Î½Î¿",
    	LS: "ÎÎ±ÏÎ¯Î»ÎµÎ¹Î¿ ÏÎ¿Ï ÎÎµÏÏÏÎ¿",
    	LR: "ÎÎ¹Î²ÎµÏÎ¯Î±",
    	LY: "ÎÏÎ¬ÏÎ¿Ï ÏÎ·Ï ÎÎ¹Î²ÏÎ·Ï",
    	LI: "Î ÏÎ¹Î³ÎºÎ¹ÏÎ¬ÏÎ¿ ÏÎ¿Ï ÎÎ¯ÏÏÎµÎ½ÏÏÎ±ÏÎ½",
    	LT: "ÎÎ¹Î¸Î¿ÏÎ±Î½Î¯Î±",
    	LU: "ÎÎ¿ÏÎ¾ÎµÎ¼Î²Î¿ÏÏÎ³Î¿",
    	MO: "ÎÎ±ÎºÎ¬Î¿Ï",
    	MK: "ÏÏÏÎ·Î½ ÎÎ¹Î¿ÏÎ³ÎºÎ¿ÏÎ»Î±Î²Î¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï ÎÎ±ÎºÎµÎ´Î¿Î½Î¯Î±Ï",
    	MG: "ÎÎ±Î´Î±Î³Î±ÏÎºÎ¬ÏÎ·",
    	MW: "ÎÎ±Î»Î¬Î¿ÏÎ¹",
    	MY: "ÎÎ±Î»Î±Î¹ÏÎ¯Î±",
    	MV: "ÎÎ±Î»Î²Î¯Î´ÎµÏ",
    	ML: "ÎÎ±Î»Î¯",
    	MT: "ÎÎ¬Î»ÏÎ±",
    	MH: "ÎÎ®ÏÎ¿Î¹ ÎÎ¬ÏÏÎ±Î»",
    	MQ: "ÎÎ±ÏÏÎ¹Î½Î¯ÎºÎ±",
    	MR: "ÎÎ±ÏÏÎ¹ÏÎ±Î½Î¯Î±",
    	MU: "ÎÎ±ÏÏÎ¯ÎºÎ¹Î¿Ï",
    	YT: "ÎÎ±Î³Î¹ÏÏ",
    	MX: "ÎÎµÎ¾Î¹ÎºÏ",
    	FM: "ÎÎ¼ÏÏÏÎ¿Î½Î´ÎµÏ Î Î¿Î»Î¹ÏÎµÎ¯ÎµÏ ÏÎ·Ï ÎÎ¹ÎºÏÎ¿Î½Î·ÏÎ¯Î±Ï",
    	MD: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï ÎÎ¿Î»Î´Î±Î²Î¯Î±Ï",
    	MC: "Î ÏÎ¹Î³ÎºÎ¹ÏÎ¬ÏÎ¿ ÏÎ¿Ï ÎÎ¿Î½Î±ÎºÏ",
    	MN: "ÎÎ¿Î³Î³Î¿Î»Î¯Î±",
    	MS: "ÎÎ¿Î½ÏÏÎµÏÏÎ¬Ï",
    	MA: "ÎÎ±ÏÏÎºÎ¿",
    	MZ: "ÎÎ¿Î¶Î±Î¼Î²Î¯ÎºÎ·",
    	MM: "ÎÎ¹Î±Î½Î¼Î¬Ï",
    	NA: "ÎÎ±Î¼Î¯Î¼ÏÎ¹Î±",
    	NR: "ÎÎ±Î¿ÏÏÎ¿Ï",
    	NP: "ÎÎµÏÎ¬Î»",
    	NL: "ÎÎ»Î»Î±Î½Î´Î¯Î±",
    	NC: "ÎÎ­Î± ÎÎ±Î»Î·Î´Î¿Î½Î¯Î±",
    	NZ: "ÎÎ­Î± ÎÎ·Î»Î±Î½Î´Î¯Î±",
    	NI: "ÎÎ¹ÎºÎ±ÏÎ¬Î³Î¿ÏÎ±",
    	NE: "ÎÎ¯Î³Î·ÏÎ±Ï",
    	NG: "ÎÎ¹Î³Î·ÏÎ¯Î±",
    	NU: "ÎÎ¹Î¿ÏÎµ",
    	NF: "ÎÎ·ÏÎ¯ ÎÏÏÏÎ¿Î»Îº",
    	MP: "ÎÏÏÎµÎ¹ÎµÏ ÎÎ±ÏÎ¹Î¬Î½ÎµÏ ÎÎ®ÏÎ¿Î¹",
    	NO: "ÎÎ¿ÏÎ²Î·Î³Î¯Î±",
    	OM: "ÎÎ¼Î¬Î½",
    	PK: "Î Î±ÎºÎ¹ÏÏÎ¬Î½",
    	PW: "Î Î±Î»Î¬Î¿Ï",
    	PS: "ÎÏÎ¬ÏÎ¿Ï ÏÎ·Ï Î Î±Î»Î±Î¹ÏÏÎ¯Î½Î·Ï",
    	PA: "Î Î±Î½Î±Î¼Î¬Ï",
    	PG: "Î Î±ÏÎ¿ÏÎ± ÎÎ­Î± ÎÎ¿ÏÎ¹Î½Î­Î±",
    	PY: "Î Î±ÏÎ±Î³Î¿ÏÎ¬Î·",
    	PE: "Î ÎµÏÎ¿Ï",
    	PH: "Î¦Î¹Î»Î¹ÏÏÎ¯Î½ÎµÏ",
    	PN: "ÎÎ®ÏÎ¿Î¹ Î Î¯ÏÎºÎ±Î¹ÏÎ½",
    	PL: "Î Î¿Î»ÏÎ½Î¯Î±",
    	PT: "Î Î¿ÏÏÎ¿Î³Î±Î»Î¯Î±",
    	PR: "Î Î¿ÏÎ­ÏÏÎ¿ Î¡Î¯ÎºÎ¿",
    	QA: "ÎÎ±ÏÎ¬Ï",
    	RE: "Î¡ÎµÏÎ½Î¹ÏÎ½",
    	RO: "Î¡Î¿ÏÎ¼Î±Î½Î¯Î±",
    	RU: "Î¡ÏÏÎ¹ÎºÎ® ÎÎ¼Î¿ÏÏÎ¿Î½Î´Î¯Î±",
    	RW: "Î¡Î¿ÏÎ¬Î½ÏÎ±",
    	SH: "ÎÎ®ÏÎ¿Ï ÎÎ³Î¯Î±Ï ÎÎ»Î­Î½Î·Ï",
    	KN: "ÎÎ¼Î¿ÏÏÎ¿Î½Î´Î¯Î± ÎÎ³Î¯Î¿Ï Î§ÏÎ¹ÏÏÏÏÎ¿ÏÎ¿Ï ÎºÎ±Î¹ ÎÎ­Î²Î¹Ï",
    	LC: "ÎÎ³Î¯Î± ÎÎ¿ÏÎºÎ¯Î±",
    	PM: "Î£Î±Î¹Î½ Î Î¹ÎµÏ ÎºÎ±Î¹ ÎÎ¹ÎºÎµÎ»ÏÎ½",
    	VC: "ÎÎ³Î¹Î¿Ï ÎÎ¹ÎºÎ­Î½ÏÎ¹Î¿Ï ÎºÎ±Î¹ ÎÏÎµÎ½Î±Î´Î¯Î½ÎµÏ",
    	WS: "Î£Î±Î¼ÏÎ±",
    	SM: "ÎÎ³Î¹Î¿Ï ÎÎ±ÏÎ¯Î½Î¿Ï",
    	ST: "Î£Î¬Î¿ Î¤Î¿Î¼Î­ ÎºÎ±Î¹ Î ÏÎ¯Î½ÏÎ¹ÏÎµ",
    	SA: "Î£Î±Î¿ÏÎ´Î¹ÎºÎ® ÎÏÎ±Î²Î¯Î±",
    	SN: "Î£ÎµÎ½ÎµÎ³Î¬Î»Î·",
    	SC: "Î£ÎµÏÏÎ­Î»Î»ÎµÏ",
    	SL: "Î£Î¹Î­ÏÎ± ÎÎµÏÎ½Îµ",
    	SG: "Î£Î¹Î³ÎºÎ±ÏÎ¿ÏÏÎ·",
    	SK: "Î£Î»Î¿Î²Î±ÎºÎ¯Î±",
    	SI: "Î£Î»Î¿Î²ÎµÎ½Î¯Î±",
    	SB: "ÎÎ®ÏÎ¿Î¹ Î£Î¿Î»Î¿Î¼ÏÎ½ÏÎ±",
    	SO: "Î£Î¿Î¼Î±Î»Î¯Î±",
    	ZA: "ÎÏÏÎ¹Î± ÎÏÏÎ¹ÎºÎ®",
    	GS: "ÎÏÏÎ¹Î¿Ï ÎÎµÏÏÎ³Î¯Î± ÎºÎ±Î¹ ÎÏÏÎ¹Î¿Î¹ Î£Î¬Î½ÏÎ¿ÏÎ¹ÏÏ ÎÎ®ÏÎ¿Î¹",
    	ES: "ÎÏÏÎ±Î½Î¯Î±",
    	LK: "Î£ÏÎ¹ ÎÎ¬Î½ÎºÎ±",
    	SD: "Î£Î¿ÏÎ´Î¬Î½",
    	SR: "Î£Î¿ÏÏÎ¹Î½Î¬Î¼",
    	SJ: "Î£Î²Î¬Î»Î¼ÏÎ±ÏÎ½Ï ÎºÎ±Î¹ ÎÎ¹Î±Î½ ÎÎ±Î³Î¹Î­Î½",
    	SZ: "Î£Î¿ÏÎ±Î¶Î¹Î»Î¬Î½Î´Î·",
    	SE: "Î£Î¿ÏÎ·Î´Î¯Î±",
    	CH: "ÎÎ»Î²ÎµÏÎ¯Î±",
    	SY: "ÎÏÎ±Î²Î¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï Î£ÏÏÎ¯Î±Ï",
    	TW: "ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï ÎÎ¯Î½Î±Ï",
    	TJ: "Î¤Î±ÏÎ¶Î¹ÎºÎ¹ÏÏÎ¬Î½",
    	TZ: "ÎÎ½ÏÎ¼Î­Î½Î· ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î± ÏÎ·Ï Î¤Î±Î½Î¶Î±Î½Î¯Î±Ï",
    	TH: "Î¤Î±ÏÎ»Î¬Î½Î´Î·",
    	TL: "ÎÎ½Î±ÏÎ¿Î»Î¹ÎºÏ Î¤Î¹Î¼ÏÏ",
    	TG: "Î¤Î¿Î³ÎºÏ",
    	TK: "Î¤Î¿ÎºÎµÎ»Î¬Î¿Ï",
    	TO: "Î¤ÏÎ½Î³ÎºÎ±",
    	TT: "Î¤ÏÎ¹Î½Î¹Î½ÏÎ¬Î½Ï ÎºÎ±Î¹ Î¤Î¿Î¼ÏÎ¬Î³ÎºÎ¿",
    	TN: "Î¤ÏÎ½Î·ÏÎ¯Î±",
    	TR: "Î¤Î¿ÏÏÎºÎ¯Î±",
    	TM: "Î¤Î¿ÏÏÎºÎ¼ÎµÎ½Î¹ÏÏÎ¬Î½",
    	TC: "Î¤ÎµÏÎºÏ ÎºÎ±Î¹ ÎÎ­Î¹ÎºÎ¿Ï",
    	TV: "Î¤Î¿ÏÎ²Î±Î»Î¿Ï",
    	UG: "ÎÏÎ³ÎºÎ¬Î½ÏÎ±",
    	UA: "ÎÏÎºÏÎ±Î½Î¹Î±",
    	AE: "ÎÎ½ÏÎ¼Î­Î½Î± ÎÏÎ±Î²Î¹ÎºÎ¬ ÎÎ¼Î¹ÏÎ¬ÏÎ±",
    	GB: "ÎÎ½ÏÎ¼Î­Î½Î¿ ÎÎ±ÏÎ¯Î»ÎµÎ¹Î¿",
    	US: "ÎÎ½ÏÎ¼Î­Î½ÎµÏ Î Î¿Î»Î¹ÏÎµÎ¯ÎµÏ ÎÎ¼ÎµÏÎ¹ÎºÎ®Ï",
    	UM: "ÎÏÎ¿Î¼Î±ÎºÏÏÏÎ¼Î­Î½ÎµÏ ÎÎ·ÏÎ¯Î´ÎµÏ ÏÏÎ½ ÎÎ½ÏÎ¼Î­Î½ÏÎ½ Î Î¿Î»Î¹ÏÎµÎ¹ÏÎ½",
    	UY: "ÎÏÏÎ¿ÏÎ³Î¿ÏÎ¬Î·",
    	UZ: "ÎÏÎ¶Î¼ÏÎµÎºÎ¹ÏÏÎ¬Î½",
    	VU: "ÎÎ±Î½Î¿ÏÎ¬ÏÎ¿Ï",
    	VE: "ÎÎµÎ½ÎµÎ¶Î¿ÏÎ­Î»Î±",
    	VN: "ÎÎ¹ÎµÏÎ½Î¬Î¼",
    	VG: "ÎÏÎµÏÎ±Î½Î¹ÎºÎ­Ï Î Î±ÏÎ¸Î­Î½Î¿Î¹ ÎÎ®ÏÎ¿Î¹",
    	VI: "ÎÎ¼ÎµÏÎ¹ÎºÎ±Î½Î¹ÎºÎ­Ï Î Î±ÏÎ¸Î­Î½Î¿Î¹ ÎÎ®ÏÎ¿Î¹",
    	WF: "ÎÏÎ±Î»Î¯Ï ÎºÎ±Î¹ Î¦Î¿ÏÏÎ¿ÏÎ½Î¬",
    	EH: "ÎÏÏÎ¹ÎºÎ® Î£Î±ÏÎ¬ÏÎ±",
    	YE: "Î¥ÎµÎ¼Î­Î½Î·",
    	ZM: "ÎÎ¬Î¼ÏÎ¹Î±",
    	ZW: "ÎÎ¹Î¼ÏÎ¬Î¼ÏÎ¿ÏÎµ",
    	AX: "ÎÎ®ÏÎ¿Î¹ ÎÎ»Î±Î½Ï",
    	BQ: "ÎÏÎ¿Î½Î±Î¯Ï, ÎÎ³Î¹Î¿Ï ÎÏÏÏÎ¬Î¸Î¹Î¿Ï ÎºÎ±Î¹ Î£Î¬Î¼ÏÎ±",
    	CW: "ÎÎ¿ÏÏÎ±ÏÎ¬Î¿",
    	GG: "ÎÎºÎ¿ÏÎ­ÏÎ½ÏÎµÏ",
    	IM: "ÎÎ®ÏÎ¿Ï ÏÎ¿Ï ÎÎ±Î½",
    	JE: "ÎÎ±ÏÎ»Î¬ÏÎ¿ ÏÎ¿Ï Î¤Î¶Î­ÏÏÎµÏ",
    	ME: "ÎÎ±ÏÏÎ¿Î²Î¿ÏÎ½Î¹Î¿",
    	BL: "ÎÎ³Î¹Î¿Ï ÎÎ±ÏÎ¸Î¿Î»Î¿Î¼Î±Î¯Î¿Ï",
    	MF: "ÎÎ³Î¹Î¿Ï ÎÎ±ÏÏÎ¯Î½Î¿Ï (ÎÎ±Î»Î»Î¯Î±)",
    	RS: "Î£ÎµÏÎ²Î¯Î±",
    	SX: "ÎÎ³Î¹Î¿Ï ÎÎ±ÏÏÎ¯Î½Î¿Ï (ÎÎ»Î»Î±Î½Î´Î¯Î±)",
    	SS: "ÎÏÏÎ¹Î¿ Î£Î¿ÏÎ´Î¬Î½",
    	XK: "ÎÏÏÎ¿Î²Î¿"
    };
    var el = {
    	locale: locale$9,
    	countries: countries$9
    };

    var el$1 = /*#__PURE__*/Object.freeze({
        locale: locale$9,
        countries: countries$9,
        default: el
    });

    var locale$a = "en";
    var countries$a = {
    	AF: "Afghanistan",
    	AL: "Albania",
    	DZ: "Algeria",
    	AS: "American Samoa",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarctica",
    	AG: "Antigua and Barbuda",
    	AR: "Argentina",
    	AM: "Armenia",
    	AW: "Aruba",
    	AU: "Australia",
    	AT: "Austria",
    	AZ: "Azerbaijan",
    	BS: "Bahamas",
    	BH: "Bahrain",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BY: "Belarus",
    	BE: "Belgium",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Bolivia",
    	BA: "Bosnia and Herzegovina",
    	BW: "Botswana",
    	BV: "Bouvet Island",
    	BR: "Brazil",
    	IO: "British Indian Ocean Territory",
    	BN: "Brunei Darussalam",
    	BG: "Bulgaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Cambodia",
    	CM: "Cameroon",
    	CA: "Canada",
    	CV: "Cape Verde",
    	KY: "Cayman Islands",
    	CF: "Central African Republic",
    	TD: "Chad",
    	CL: "Chile",
    	CN: "China",
    	CX: "Christmas Island",
    	CC: "Cocos (Keeling) Islands",
    	CO: "Colombia",
    	KM: "Comoros",
    	CG: "Congo",
    	CD: "Congo, the Democratic Republic of the",
    	CK: "Cook Islands",
    	CR: "Costa Rica",
    	CI: "Cote D'Ivoire",
    	HR: "Croatia",
    	CU: "Cuba",
    	CY: "Cyprus",
    	CZ: "Czech Republic",
    	DK: "Denmark",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominican Republic",
    	EC: "Ecuador",
    	EG: "Egypt",
    	SV: "El Salvador",
    	GQ: "Equatorial Guinea",
    	ER: "Eritrea",
    	EE: "Estonia",
    	ET: "Ethiopia",
    	FK: "Falkland Islands (Malvinas)",
    	FO: "Faroe Islands",
    	FJ: "Fiji",
    	FI: "Finland",
    	FR: "France",
    	GF: "French Guiana",
    	PF: "French Polynesia",
    	TF: "French Southern Territories",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "Georgia",
    	DE: "Germany",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "Greece",
    	GL: "Greenland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard Island and Mcdonald Islands",
    	VA: "Holy See (Vatican City State)",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "Hungary",
    	IS: "Iceland",
    	IN: "India",
    	ID: "Indonesia",
    	IR: "Iran, Islamic Republic of",
    	IQ: "Iraq",
    	IE: "Ireland",
    	IL: "Israel",
    	IT: "Italy",
    	JM: "Jamaica",
    	JP: "Japan",
    	JO: "Jordan",
    	KZ: "Kazakhstan",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "North Korea",
    	KR: "South Korea",
    	KW: "Kuwait",
    	KG: "Kyrgyzstan",
    	LA: "Lao People's Democratic Republic",
    	LV: "Latvia",
    	LB: "Lebanon",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "Libya",
    	LI: "Liechtenstein",
    	LT: "Lithuania",
    	LU: "Luxembourg",
    	MO: "Macao",
    	MK: "Macedonia, the Former Yugoslav Republic of",
    	MG: "Madagascar",
    	MW: "Malawi",
    	MY: "Malaysia",
    	MV: "Maldives",
    	ML: "Mali",
    	MT: "Malta",
    	MH: "Marshall Islands",
    	MQ: "Martinique",
    	MR: "Mauritania",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Mexico",
    	FM: "Micronesia, Federated States of",
    	MD: "Moldova, Republic of",
    	MC: "Monaco",
    	MN: "Mongolia",
    	MS: "Montserrat",
    	MA: "Morocco",
    	MZ: "Mozambique",
    	MM: "Myanmar",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "Netherlands",
    	NC: "New Caledonia",
    	NZ: "New Zealand",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Norfolk Island",
    	MP: "Northern Mariana Islands",
    	NO: "Norway",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestinian Territory, Occupied",
    	PA: "Panama",
    	PG: "Papua New Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "Philippines",
    	PN: "Pitcairn",
    	PL: "Poland",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	QA: "Qatar",
    	RE: "Reunion",
    	RO: "Romania",
    	RU: "Russian Federation",
    	RW: "Rwanda",
    	SH: "Saint Helena",
    	KN: "Saint Kitts and Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint Pierre and Miquelon",
    	VC: "Saint Vincent and the Grenadines",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "Sao Tome and Principe",
    	SA: "Saudi Arabia",
    	SN: "Senegal",
    	SC: "Seychelles",
    	SL: "Sierra Leone",
    	SG: "Singapore",
    	SK: "Slovakia",
    	SI: "Slovenia",
    	SB: "Solomon Islands",
    	SO: "Somalia",
    	ZA: "South Africa",
    	GS: "South Georgia and the South Sandwich Islands",
    	ES: "Spain",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	SR: "Suriname",
    	SJ: "Svalbard and Jan Mayen",
    	SZ: "Swaziland",
    	SE: "Sweden",
    	CH: "Switzerland",
    	SY: "Syrian Arab Republic",
    	TW: "Taiwan",
    	TJ: "Tajikistan",
    	TZ: "Tanzania, United Republic of",
    	TH: "Thailand",
    	TL: "Timor-Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad and Tobago",
    	TN: "Tunisia",
    	TR: "Turkey",
    	TM: "Turkmenistan",
    	TC: "Turks and Caicos Islands",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraine",
    	AE: "United Arab Emirates",
    	GB: "United Kingdom",
    	US: "United States of America",
    	UM: "United States Minor Outlying Islands",
    	UY: "Uruguay",
    	UZ: "Uzbekistan",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Viet Nam",
    	VG: "Virgin Islands, British",
    	VI: "Virgin Islands, U.S.",
    	WF: "Wallis and Futuna",
    	EH: "Western Sahara",
    	YE: "Yemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Ãland Islands",
    	BQ: "Bonaire, Sint Eustatius and Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Isle of Man",
    	JE: "Jersey",
    	ME: "Montenegro",
    	BL: "Saint BarthÃ©lemy",
    	MF: "Saint Martin (French part)",
    	RS: "Serbia",
    	SX: "Sint Maarten (Dutch part)",
    	SS: "South Sudan",
    	XK: "Kosovo"
    };
    var en = {
    	locale: locale$a,
    	countries: countries$a
    };

    var en$1 = /*#__PURE__*/Object.freeze({
        locale: locale$a,
        countries: countries$a,
        default: en
    });

    var locale$b = "es";
    var countries$b = {
    	AF: "AfganistÃ¡n",
    	AL: "Albania",
    	DZ: "Argelia",
    	AS: "Samoa Americana",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguila",
    	AQ: "AntÃ¡rtida",
    	AG: "Antigua y Barbuda",
    	AR: "Argentina",
    	AM: "Armenia",
    	AW: "Aruba",
    	AU: "Australia",
    	AT: "Austria",
    	AZ: "AzerbaiyÃ¡n",
    	BS: "Bahamas",
    	BH: "Bahrein",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BY: "BelarÃºs",
    	BE: "BÃ©lgica",
    	BZ: "Belice",
    	BJ: "Benin",
    	BM: "Bermudas",
    	BT: "BhutÃ¡n",
    	BO: "Bolivia",
    	BA: "Bosnia y Herzegovina",
    	BW: "Botswana",
    	BV: "Isla Bouvet",
    	BR: "Brasil",
    	IO: "Territorio BritÃ¡nico del OcÃ©ano Ãndico",
    	BN: "Brunei Darussalam",
    	BG: "Bulgaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Camboya",
    	CM: "CamerÃºn",
    	CA: "CanadÃ¡",
    	CV: "Cabo Verde",
    	KY: "Islas CaimÃ¡n",
    	CF: "RepÃºblica Centroafricana",
    	TD: "Chad",
    	CL: "Chile",
    	CN: "China",
    	CX: "Isla de Navidad",
    	CC: "Islas Cocos (Keeling)",
    	CO: "Colombia",
    	KM: "Comoras",
    	CG: "Congo",
    	CD: "Congo (RepÃºblica DemocrÃ¡tica del)",
    	CK: "Islas Cook",
    	CR: "Costa Rica",
    	CI: "Costa de Marfil",
    	HR: "Croacia",
    	CU: "Cuba",
    	CY: "Chipre",
    	CZ: "RepÃºblica Checa",
    	DK: "Dinamarca",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "RepÃºblica Dominicana",
    	EC: "Ecuador",
    	EG: "Egipto",
    	SV: "El Salvador",
    	GQ: "Guinea Ecuatorial",
    	ER: "Eritrea",
    	EE: "Estonia",
    	ET: "EtiopÃ­a",
    	FK: "Islas Malvinas",
    	FO: "Islas Feroe",
    	FJ: "Fiji",
    	FI: "Finlandia",
    	FR: "Francia",
    	GF: "Guayana Francesa",
    	PF: "Polinesia Francesa",
    	TF: "Tierras Australes Francesas",
    	GA: "GabÃ³n",
    	GM: "Gambia",
    	GE: "Georgia",
    	DE: "Alemania",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "Grecia",
    	GL: "Groenlandia",
    	GD: "Granada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Guinea Bissau",
    	GY: "Guyana",
    	HT: "HaitÃ­",
    	HM: "Heard e Islas McDonald",
    	VA: "Santa Sede",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "HungrÃ­a",
    	IS: "Islandia",
    	IN: "India",
    	ID: "Indonesia",
    	IR: "IrÃ¡n (RepÃºblica IslÃ¡mica de)",
    	IQ: "Iraq",
    	IE: "Irlanda",
    	IL: "Israel",
    	IT: "Italia",
    	JM: "Jamaica",
    	JP: "JapÃ³n",
    	JO: "Jordania",
    	KZ: "KazajstÃ¡n",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "RepÃºblica Popular DemocrÃ¡tica de Corea",
    	KR: "RepÃºblica de Corea",
    	KW: "Kuwait",
    	KG: "KirguistÃ¡n",
    	LA: "RepÃºblica DemocrÃ¡tica Popular de Lao",
    	LV: "Letonia",
    	LB: "LÃ­bano",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "Libia",
    	LI: "Liechtenstein",
    	LT: "Lituania",
    	LU: "Luxemburgo",
    	MO: "Macao",
    	MK: "Macedonia",
    	MG: "Madagascar",
    	MW: "Malawi",
    	MY: "Malasia",
    	MV: "Maldivas",
    	ML: "MalÃ­",
    	MT: "Malta",
    	MH: "Islas Marshall",
    	MQ: "Martinique",
    	MR: "Mauritania",
    	MU: "Mauricio",
    	YT: "Mayotte",
    	MX: "MÃ©xico",
    	FM: "Micronesia",
    	MD: "Moldavia",
    	MC: "MÃ³naco",
    	MN: "Mongolia",
    	MS: "Montserrat",
    	MA: "Marruecos",
    	MZ: "Mozambique",
    	MM: "Myanmar",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "PaÃ­ses Bajos",
    	NC: "Nueva Caledonia",
    	NZ: "Nueva Zelanda",
    	NI: "Nicaragua",
    	NE: "NÃ­ger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Isla Norfolk",
    	MP: "Isla Marianas del Norte",
    	NO: "Noruega",
    	OM: "OmÃ¡n",
    	PK: "PakistÃ¡n",
    	PW: "Palau",
    	PS: "Palestina",
    	PA: "PanamÃ¡",
    	PG: "Papua Nueva Guinea",
    	PY: "Paraguay",
    	PE: "PerÃº",
    	PH: "Filipinas",
    	PN: "Pitcairn",
    	PL: "Polonia",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	QA: "Qatar",
    	RE: "ReuniÃ³n",
    	RO: "Rumania",
    	RU: "Rusia",
    	RW: "Rwanda",
    	SH: "Santa Helena, AscensiÃ³n y TristÃ¡n de AcuÃ±a",
    	KN: "Saint Kitts y Nevis",
    	LC: "Santa LucÃ­a",
    	PM: "San Pedro y MiquelÃ³n",
    	VC: "San Vicente y las Granadinas",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "Santo TomÃ© y PrÃ­ncipe",
    	SA: "Arabia Saudita",
    	SN: "Senegal",
    	SC: "Seychelles",
    	SL: "Sierra Leona",
    	SG: "Singapur",
    	SK: "Eslovaquia",
    	SI: "Eslovenia",
    	SB: "Islas SalomÃ³n",
    	SO: "Somalia",
    	ZA: "SudÃ¡frica",
    	GS: "Georgia del Sur y las Islas Sandwich del Sur",
    	ES: "EspaÃ±a",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	SR: "Suriname",
    	SJ: "Svalbard y Jan Mayen",
    	SZ: "Swazilandia",
    	SE: "Suecia",
    	CH: "Suiza",
    	SY: "RepÃºblica Ãrabe Siria",
    	TW: "TaiwÃ¡n",
    	TJ: "TayikistÃ¡n",
    	TZ: "Tanzania",
    	TH: "Tailandia",
    	TL: "Timor-Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad y Tobago",
    	TN: "TÃºnez",
    	TR: "TurquÃ­a",
    	TM: "TurkmenistÃ¡n",
    	TC: "Islas Turcas y Caicos",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ucrania",
    	AE: "Emiratos Ãrabes Unidos",
    	GB: "Reino Unido",
    	US: "Estados Unidos",
    	UM: "Islas Ultramarinas Menores de los Estados Unidos",
    	UY: "Uruguay",
    	UZ: "UzbekistÃ¡n",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	VG: "Islas VÃ­rgenes britÃ¡nicas",
    	VI: "Islas VÃ­rgenes de los Estados Unidos",
    	WF: "Wallis y Futuna",
    	EH: "Sahara Occidental",
    	YE: "Yemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Islas Ãland",
    	BQ: "Bonaire, San Eustaquio y Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Isla de Man",
    	JE: "Jersey",
    	ME: "Montenegro",
    	BL: "Saint BarthÃ©lemy",
    	MF: "Saint Martin (francesa)",
    	RS: "Serbia",
    	SX: "Sint Maarten (neerlandesa)",
    	SS: "SudÃ¡n del Sur",
    	XK: "Kosovo"
    };
    var es = {
    	locale: locale$b,
    	countries: countries$b
    };

    var es$1 = /*#__PURE__*/Object.freeze({
        locale: locale$b,
        countries: countries$b,
        default: es
    });

    var locale$c = "et";
    var countries$c = {
    	AF: "Afganistan",
    	AX: "Ahvenamaa",
    	AL: "Albaania",
    	DZ: "AlÅ¾eeria",
    	AS: "Ameerika Samoa",
    	US: "Ameerika Ãhendriigid",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktis",
    	AG: "Antigua ja Barbuda",
    	MO: "Aomen - Hiina erihalduspiirkond",
    	AE: "Araabia Ãhendemiraadid",
    	AR: "Argentina",
    	AM: "Armeenia",
    	AW: "Aruba",
    	AZ: "AserbaidÅ¾aan",
    	AU: "Austraalia",
    	AT: "Austria",
    	BS: "Bahama",
    	BH: "Bahrein",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	PW: "Belau",
    	BE: "Belgia",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Boliivia",
    	BA: "Bosnia ja Hertsegoviina",
    	BW: "Botswana",
    	BV: "Bouvetâi saar",
    	BR: "Brasiilia",
    	BQ: "Bonaire, Sint Eustatius ja Saba",
    	IO: "Briti India ookeani ala",
    	VG: "Briti Neitsisaared",
    	BN: "Brunei",
    	BG: "Bulgaaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	CO: "Colombia",
    	CK: "Cooki saared",
    	CR: "Costa Rica",
    	CI: "CÃ´te d'Ivoire",
    	CW: "CuraÃ§ao",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominikaani Vabariik",
    	EC: "Ecuador",
    	EE: "Eesti",
    	EG: "Egiptus",
    	GQ: "Ekvatoriaal-Guinea",
    	SV: "El Salvador",
    	ER: "Eritrea",
    	ET: "Etioopia",
    	FK: "Falklandi saared",
    	FJ: "FidÅ¾i",
    	PH: "Filipiinid",
    	FO: "FÃ¤Ã¤ri saared",
    	GA: "Gabon",
    	GM: "Gambia",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GD: "Grenada",
    	GE: "Gruusia",
    	GL: "GrÃ¶Ã¶nimaa",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GG: "Guernsey",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard ja McDonald saared",
    	CN: "Hiina",
    	ES: "Hispaania",
    	NL: "Holland",
    	HN: "Honduras",
    	HK: "Hongkong - Hiina erihalduspiirkond",
    	HR: "Horvaatia",
    	TL: "Ida-Timor",
    	IE: "Iirimaa",
    	IL: "Iisrael",
    	IN: "India",
    	ID: "Indoneesia",
    	IQ: "Iraak",
    	IR: "Iraan",
    	IS: "Island",
    	IT: "Itaalia",
    	JP: "Jaapan",
    	JM: "Jamaica",
    	YE: "Jeemen",
    	JE: "Jersey",
    	JO: "Jordaania",
    	CX: "JÃµulusaar",
    	KY: "Kaimanisaared",
    	KH: "KambodÅ¾a",
    	CM: "Kamerun",
    	CA: "Kanada",
    	KZ: "Kasahstan",
    	QA: "Katar",
    	KE: "Kenya",
    	CF: "Kesk-Aafrika Vabariik",
    	KI: "Kiribati",
    	KM: "Komoorid",
    	CD: "Kongo DV",
    	CG: "Kongo-Brazzaville",
    	CC: "Kookossaared",
    	GR: "Kreeka",
    	CU: "Kuuba",
    	KW: "Kuveit",
    	KG: "KÃµrgÃµzstan",
    	CY: "KÃ¼pros",
    	LA: "Laos",
    	LT: "Leedu",
    	LS: "Lesotho",
    	LR: "Libeeria",
    	LI: "Liechtenstein",
    	LB: "Liibanon",
    	LY: "LiibÃ¼a",
    	LU: "Luksemburg",
    	ZA: "LÃµuna-Aafrika Vabariik",
    	GS: "LÃµuna-Georgia ja LÃµuna-Sandwichi saared",
    	KR: "LÃµuna-Korea",
    	LV: "LÃ¤ti",
    	EH: "LÃ¤Ã¤ne-Sahara",
    	MG: "Madagaskar",
    	MK: "Makedoonia",
    	MY: "Malaisia",
    	MW: "Malawi",
    	MV: "Maldiivid",
    	ML: "Mali",
    	MT: "Malta",
    	IM: "Mani saar",
    	MA: "Maroko",
    	MH: "Marshalli saared",
    	MQ: "Martinique",
    	MR: "Mauritaania",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Mehhiko",
    	FM: "Mikroneesia Liiduriigid",
    	MD: "Moldova",
    	MC: "Monaco",
    	MN: "Mongoolia",
    	ME: "Montenegro",
    	MS: "Montserrat",
    	MZ: "Mosambiik",
    	MM: "Myanmar",
    	NA: "Namiibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NI: "Nicaragua",
    	NG: "Nigeeria",
    	NE: "Niger",
    	NU: "Niue",
    	NF: "Norfolk",
    	NO: "Norra",
    	OM: "Omaan",
    	PG: "Paapua Uus-Guinea",
    	PK: "Pakistan",
    	PS: "Palestiina ala",
    	PA: "Panama",
    	PY: "Paraguay",
    	PE: "Peruu",
    	PN: "Pitcairn",
    	PL: "Poola",
    	PT: "Portugal",
    	GF: "Prantsuse Guajaana",
    	TF: "Prantsuse LÃµunaalad",
    	PF: "Prantsuse PolÃ¼neesia",
    	FR: "Prantsusmaa",
    	PR: "Puerto Rico",
    	KP: "PÃµhja-Korea",
    	MP: "PÃµhja-Mariaanid",
    	RE: "RÃ©union",
    	CV: "Roheneemesaared",
    	SE: "Rootsi",
    	SX: "Sint Maarten",
    	RO: "Rumeenia",
    	RW: "Rwanda",
    	SB: "Saalomoni Saared",
    	BL: "Saint BarthÃ©lemy",
    	SH: "Saint Helena",
    	KN: "Saint Kitts ja Nevis",
    	LC: "Saint Lucia",
    	MF: "Saint Martin",
    	PM: "Saint Pierre ja Miquelon",
    	VC: "Saint Vincent ja Grenadiinid",
    	DE: "Saksamaa",
    	ZM: "Sambia",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© ja PrÃ­ncipe",
    	SA: "Saudi Araabia",
    	SC: "SeiÅ¡ellid",
    	SN: "Senegal",
    	RS: "Serbia",
    	SL: "Sierra Leone",
    	SG: "Singapur",
    	SK: "Slovakkia",
    	SI: "Sloveenia",
    	SO: "Somaalia",
    	FI: "Soome",
    	LK: "Sri Lanka",
    	SD: "Sudaan",
    	SS: "LÃµuna-Sudaan",
    	SR: "Suriname",
    	GB: "Suurbritannia",
    	SZ: "Svaasimaa",
    	SJ: "Svalbard ja Jan Mayen",
    	SY: "SÃ¼Ã¼ria",
    	CH: "Å veits",
    	ZW: "Zimbabwe",
    	DK: "Taani",
    	TJ: "TadÅ¾ikistan",
    	TH: "Tai",
    	TW: "Taiwan",
    	TZ: "Tansaania",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad ja Tobago",
    	TD: "TÅ¡aad",
    	CZ: "TÅ¡ehhi",
    	CL: "TÅ¡iili",
    	TN: "Tuneesia",
    	TC: "Turks ja Caicos",
    	TV: "Tuvalu",
    	TR: "TÃ¼rgi",
    	TM: "TÃ¼rkmenistan",
    	UG: "Uganda",
    	UA: "Ukraina",
    	HU: "Ungari",
    	UY: "Uruguay",
    	VI: "USA Neitsisaared",
    	UZ: "Usbekistan",
    	NC: "Uus-Kaledoonia",
    	NZ: "Uus-Meremaa",
    	BY: "Valgevene",
    	WF: "Wallis ja Futuna",
    	VU: "Vanuatu",
    	VA: "Vatikan",
    	RU: "Venemaa",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	UM: "Ãhendriikide hajasaared",
    	XK: "Kosovo"
    };
    var et = {
    	locale: locale$c,
    	countries: countries$c
    };

    var et$1 = /*#__PURE__*/Object.freeze({
        locale: locale$c,
        countries: countries$c,
        default: et
    });

    var locale$d = "fa";
    var countries$d = {
    	AD: "Ø¢ÙØ¯ÙØ±Ø§",
    	AE: "Ø§ÙØ§Ø±Ø§Øª ÙØªØ­Ø¯ÙÙ Ø¹Ø±Ø¨Û",
    	AF: "Ø§ÙØºØ§ÙØ³ØªØ§Ù",
    	AG: "Ø¢ÙØªÛÚ¯ÙØ§ Ù Ø¨Ø§Ø±Ø¨ÙØ¯Ø§",
    	AI: "Ø¢ÙÚ¯ÙÛÙØ§",
    	AL: "Ø¢ÙØ¨Ø§ÙÛ",
    	AM: "Ø§Ø±ÙÙØ³ØªØ§Ù",
    	AO: "Ø¢ÙÚ¯ÙÙØ§",
    	AQ: "Ø¬ÙÙØ¨Ú¯Ø§Ù",
    	AR: "Ø¢Ø±ÚØ§ÙØªÛÙ",
    	AS: "Ø³Ø§ÙÙØ¢Û Ø§ÙØ±ÛÚ©Ø§",
    	AT: "Ø§ØªØ±ÛØ´",
    	AU: "Ø§Ø³ØªØ±Ø§ÙÛØ§",
    	AW: "Ø¢Ø±ÙØ¨Ø§",
    	AX: "Ø¬Ø²Ø§ÛØ± Ø¢ÙØ§ÙØ¯",
    	AZ: "Ø¬ÙÙÙØ±Û Ø¢Ø°Ø±Ø¨Ø§ÛØ¬Ø§Ù",
    	BA: "Ø¨ÙØ³ÙÛ Ù ÙØ±Ø²Ú¯ÙÛÙ",
    	BB: "Ø¨Ø§Ø±Ø¨Ø§Ø¯ÙØ³",
    	BD: "Ø¨ÙÚ¯ÙØ§Ø¯Ø´",
    	BE: "Ø¨ÙÚÛÚ©",
    	BF: "Ø¨ÙØ±Ú©ÛÙØ§ÙØ§Ø³Ù",
    	BG: "Ø¨ÙØºØ§Ø±Ø³ØªØ§Ù",
    	BH: "Ø¨Ø­Ø±ÛÙ",
    	BI: "Ø¨ÙØ±ÙÙØ¯Û",
    	BJ: "Ø¨ÙÛÙ",
    	BL: "Ø³Ù Ø¨Ø§Ø±ØªÙÙÛ",
    	BM: "Ø¨Ø±ÙÙØ¯Ø§",
    	BN: "Ø¨Ø±ÙÙØ¦Û",
    	BO: "Ø¨ÙÙÛÙÛ",
    	BQ: "Ø¬Ø²Ø§ÛØ± Ú©Ø§Ø±Ø§Ø¦ÛØ¨ ÙÙÙØ¯",
    	BR: "Ø¨Ø±Ø²ÛÙ",
    	BS: "Ø¨Ø§ÙØ§ÙØ§",
    	BT: "Ø¨ÙØªØ§Ù",
    	BV: "Ø¬Ø²ÛØ±ÙÙ Ø¨ÙÙÙ",
    	BW: "Ø¨ÙØªØ³ÙØ§ÙØ§",
    	BY: "Ø¨ÙØ§Ø±ÙØ³",
    	BZ: "Ø¨ÙÛØ²",
    	CA: "Ú©Ø§ÙØ§Ø¯Ø§",
    	CC: "Ø¬Ø²Ø§ÛØ± Ú©ÙÚ©ÙØ³",
    	CD: "Ú©ÙÚ¯Ù - Ú©ÛÙØ´Ø§Ø³Ø§",
    	CF: "Ø¬ÙÙÙØ±Û Ø§ÙØ±ÛÙØ§Û ÙØ±Ú©Ø²Û",
    	CG: "Ú©ÙÚ¯Ù - Ø¨Ø±Ø§Ø²ÙÛÙ",
    	CH: "Ø³ÙØ¦ÛØ³",
    	CI: "Ø³Ø§Ø­Ù Ø¹Ø§Ø¬",
    	CK: "Ø¬Ø²Ø§ÛØ± Ú©ÙÚ©",
    	CL: "Ø´ÛÙÛ",
    	CM: "Ú©Ø§ÙØ±ÙÙ",
    	CN: "ÚÛÙ",
    	CO: "Ú©ÙÙØ¨ÛØ§",
    	CR: "Ú©Ø§Ø³ØªØ§Ø±ÛÚ©Ø§",
    	CU: "Ú©ÙØ¨Ø§",
    	CV: "Ú©ÛÙ¾âÙØ±Ø¯",
    	CW: "Ú©ÙØ±Ø§Ø³Ø§Ø¦Ù",
    	CX: "Ø¬Ø²ÛØ±ÙÙ Ú©Ø±ÛØ³ÙØ³",
    	CY: "ÙØ¨Ø±Ø³",
    	CZ: "Ø¬ÙÙÙØ±Û ÚÚ©",
    	DE: "Ø¢ÙÙØ§Ù",
    	DJ: "Ø¬ÛØ¨ÙØªÛ",
    	DK: "Ø¯Ø§ÙÙØ§Ø±Ú©",
    	DM: "Ø¯ÙÙÛÙÛÚ©Ø§",
    	DO: "Ø¬ÙÙÙØ±Û Ø¯ÙÙÛÙÛÚ©Ù",
    	DZ: "Ø§ÙØ¬Ø²Ø§ÛØ±",
    	EC: "Ø§Ú©ÙØ§Ø¯ÙØ±",
    	EE: "Ø§Ø³ØªÙÙÛ",
    	EG: "ÙØµØ±",
    	EH: "ØµØ­Ø±Ø§Û ØºØ±Ø¨Û",
    	ER: "Ø§Ø±ÛØªØ±Ù",
    	ES: "Ø§Ø³Ù¾Ø§ÙÛØ§",
    	ET: "Ø§ØªÛÙÙ¾Û",
    	FI: "ÙÙÙØ§ÙØ¯",
    	FJ: "ÙÛØ¬Û",
    	FK: "Ø¬Ø²Ø§ÛØ± ÙØ§ÙÚ©ÙÙØ¯",
    	FM: "ÙÛÚ©Ø±ÙÙØ²Û",
    	FO: "Ø¬Ø²Ø§ÛØ± ÙØ§Ø±Ù",
    	FR: "ÙØ±Ø§ÙØ³Ù",
    	GA: "Ú¯Ø§Ø¨Ù",
    	GB: "Ø¨Ø±ÛØªØ§ÙÛØ§",
    	GD: "Ú¯Ø±ÙØ§Ø¯Ø§",
    	GE: "Ú¯Ø±Ø¬Ø³ØªØ§Ù",
    	GF: "Ú¯ÙÛØ§Ù ÙØ±Ø§ÙØ³Ù",
    	GG: "Ú¯Ø±ÙØ²Û",
    	GH: "ØºÙØ§",
    	GI: "Ø¬Ø¨ÙâØ§ÙØ·Ø§Ø±Ù",
    	GL: "Ú¯Ø±ÛÙÙÙØ¯",
    	GM: "Ú¯Ø§ÙØ¨ÛØ§",
    	GN: "Ú¯ÛÙÙ",
    	GP: "Ú¯ÙØ§Ø¯ÙÙÙ¾",
    	GQ: "Ú¯ÛÙÙÙ Ø§Ø³ØªÙØ§ÛÛ",
    	GR: "ÛÙÙØ§Ù",
    	GS: "Ø¬Ø²Ø§ÛØ± Ø¬ÙØ±Ø¬ÛØ§Û Ø¬ÙÙØ¨Û Ù Ø³Ø§ÙØ¯ÙÛÚ Ø¬ÙÙØ¨Û",
    	GT: "Ú¯ÙØ§ØªÙØ§ÙØ§",
    	GU: "Ú¯ÙØ§Ù",
    	GW: "Ú¯ÛÙÙÙ Ø¨ÛØ³Ø§Ø¦Ù",
    	GY: "Ú¯ÙÛØ§Ù",
    	HK: "ÙÙÚ¯âÚ©ÙÚ¯",
    	HM: "Ø¬Ø²ÛØ±ÙÙ ÙØ±Ø¯ Ù Ø¬Ø²Ø§ÛØ± ÙÚ©âØ¯ÙÙØ§ÙØ¯",
    	HN: "ÙÙØ¯ÙØ±Ø§Ø³",
    	HR: "Ú©Ø±ÙØ§Ø³Û",
    	HT: "ÙØ§Ø¦ÛØªÛ",
    	HU: "ÙØ¬Ø§Ø±Ø³ØªØ§Ù",
    	ID: "Ø§ÙØ¯ÙÙØ²Û",
    	IE: "Ø§ÛØ±ÙÙØ¯",
    	IL: "Ø§Ø³Ø±Ø§Ø¦ÛÙ",
    	IM: "Ø¬Ø²ÛØ±ÙÙ ÙÙ",
    	IN: "ÙÙØ¯",
    	IO: "ÙÙÙØ±Ù Ø¨Ø±ÛØªØ§ÙÛØ§ Ø¯Ø± Ø§ÙÛØ§ÙÙØ³ ÙÙØ¯",
    	IQ: "Ø¹Ø±Ø§Ù",
    	IR: "Ø§ÛØ±Ø§Ù",
    	IS: "Ø§ÛØ³ÙÙØ¯",
    	IT: "Ø§ÛØªØ§ÙÛØ§",
    	JE: "Ø¬Ø±Ø²Û",
    	JM: "Ø¬Ø§ÙØ§Ø¦ÛÚ©Ø§",
    	JO: "Ø§Ø±Ø¯Ù",
    	JP: "ÚØ§Ù¾Ù",
    	KE: "Ú©ÙÛØ§",
    	KG: "ÙØ±ÙÛØ²Ø³ØªØ§Ù",
    	KH: "Ú©Ø§ÙØ¨ÙØ¬",
    	KI: "Ú©ÛØ±ÛØ¨Ø§ØªÛ",
    	KM: "Ú©ÙÙÙØ±Ù",
    	KN: "Ø³ÙØª Ú©ÛØªØ³ Ù ÙÙÛØ³",
    	KP: "Ú©Ø±ÙÙ Ø´ÙØ§ÙÛ",
    	KR: "Ú©Ø±ÙÙ Ø¬ÙÙØ¨Û",
    	KW: "Ú©ÙÛØª",
    	KY: "Ø¬Ø²Ø§ÛØ± Ú©ÙÛÙÙ",
    	KZ: "ÙØ²Ø§ÙØ³ØªØ§Ù",
    	LA: "ÙØ§Ø¦ÙØ³",
    	LB: "ÙØ¨ÙØ§Ù",
    	LC: "Ø³ÙØª ÙÙØ³ÛØ§",
    	LI: "ÙÛØ®ØªÙâØ§Ø´ØªØ§ÛÙ",
    	LK: "Ø³Ø±ÛâÙØ§ÙÚ©Ø§",
    	LR: "ÙÛØ¨Ø±ÛØ§",
    	LS: "ÙØ³ÙØªÙ",
    	LT: "ÙÛØªÙØ§ÙÛ",
    	LU: "ÙÙÚ©Ø²Ø§ÙØ¨ÙØ±Ú¯",
    	LV: "ÙØªÙÙÛ",
    	LY: "ÙÛØ¨Û",
    	MA: "ÙØ±Ø§Ú©Ø´",
    	MC: "ÙÙÙØ§Ú©Ù",
    	MD: "ÙÙÙØ¯Ø§ÙÛ",
    	ME: "ÙÙÙØªÙâÙÚ¯Ø±Ù",
    	MF: "Ø³ÙØª ÙØ§Ø±ØªÛÙ",
    	MG: "ÙØ§Ø¯Ø§Ú¯Ø§Ø³Ú©Ø§Ø±",
    	MH: "Ø¬Ø²Ø§ÛØ± ÙØ§Ø±Ø´Ø§Ù",
    	MK: "ÙÙØ¯ÙÙÛÙ",
    	ML: "ÙØ§ÙÛ",
    	MM: "ÙÛØ§ÙÙØ§Ø± (Ø¨Ø±ÙÙ)",
    	MN: "ÙØºÙÙØ³ØªØ§Ù",
    	MO: "ÙØ§Ú©Ø§Ø¦Ù",
    	MP: "Ø¬Ø²Ø§ÛØ± ÙØ§Ø±ÛØ§ÙØ§Û Ø´ÙØ§ÙÛ",
    	MQ: "ÙØ§Ø±ØªÛÙÛÚ©",
    	MR: "ÙÙØ±ÛØªØ§ÙÛ",
    	MS: "ÙÙÙØªâØ³Ø±Ø§Øª",
    	MT: "ÙØ§ÙØª",
    	MU: "ÙÙØ±ÛØ³",
    	MV: "ÙØ§ÙØ¯ÛÙ",
    	MW: "ÙØ§ÙØ§ÙÛ",
    	MX: "ÙÚ©Ø²ÛÚ©",
    	MY: "ÙØ§ÙØ²Û",
    	MZ: "ÙÙØ²Ø§ÙØ¨ÛÚ©",
    	NA: "ÙØ§ÙÛØ¨ÛØ§",
    	NC: "Ú©Ø§ÙØ¯ÙÙÛØ§Û Ø¬Ø¯ÛØ¯",
    	NE: "ÙÛØ¬Ø±",
    	NF: "Ø¬Ø²ÛØ±ÙÙ ÙÙØ±ÙÙÙÚ©",
    	NG: "ÙÛØ¬Ø±ÛÙ",
    	NI: "ÙÛÚ©Ø§Ø±Ø§Ú¯ÙØ¦Ù",
    	NL: "ÙÙÙØ¯",
    	NO: "ÙØ±ÙÚ",
    	NP: "ÙÙ¾Ø§Ù",
    	NR: "ÙØ§Ø¦ÙØ±Ù",
    	NU: "ÙÛÙØ¦Ù",
    	NZ: "ÙÛÙØ²ÛÙÙØ¯",
    	OM: "Ø¹ÙØ§Ù",
    	PA: "Ù¾Ø§ÙØ§ÙØ§",
    	PE: "Ù¾Ø±Ù",
    	PF: "Ù¾ÙÛâÙØ²Û ÙØ±Ø§ÙØ³Ù",
    	PG: "Ù¾Ø§Ù¾ÙØ§ Ú¯ÛÙÙÙ ÙÙ",
    	PH: "ÙÛÙÛÙ¾ÛÙ",
    	PK: "Ù¾Ø§Ú©Ø³ØªØ§Ù",
    	PL: "ÙÙØ³ØªØ§Ù",
    	PM: "Ø³Ù Ù¾ÛØ± Ù ÙÛÚ©ÙÙ",
    	PN: "Ø¬Ø²Ø§ÛØ± Ù¾ÛØªâÚ©Ø±Ù",
    	PR: "Ù¾ÙØ±ØªÙØ±ÛÚ©Ù",
    	PS: "Ø³Ø±Ø²ÙÛÙâÙØ§Û ÙÙØ³Ø·ÛÙÛ",
    	PT: "Ù¾Ø±ØªØºØ§Ù",
    	PW: "Ù¾Ø§ÙØ§Ø¦Ù",
    	PY: "Ù¾Ø§Ø±Ø§Ú¯ÙØ¦Ù",
    	QA: "ÙØ·Ø±",
    	RE: "Ø±Ø¦ÙÙÛÙÙ",
    	RO: "Ø±ÙÙØ§ÙÛ",
    	RS: "ØµØ±Ø¨Ø³ØªØ§Ù",
    	RU: "Ø±ÙØ³ÛÙ",
    	RW: "Ø±ÙØ§ÙØ¯Ø§",
    	SA: "Ø¹Ø±Ø¨Ø³ØªØ§Ù Ø³Ø¹ÙØ¯Û",
    	SB: "Ø¬Ø²Ø§ÛØ± Ø³ÙÛÙØ§Ù",
    	SC: "Ø³ÛØ´Ù",
    	SD: "Ø³ÙØ¯Ø§Ù",
    	SE: "Ø³ÙØ¦Ø¯",
    	SG: "Ø³ÙÚ¯Ø§Ù¾ÙØ±",
    	SH: "Ø³ÙØª ÙÙÙ",
    	SI: "Ø§Ø³ÙÙÙÙÛ",
    	SJ: "Ø§Ø³ÙØ§ÙØ¨Ø§Ø±Ø¯ Ù Ø¬Ø§ÙâÙØ§ÛÙ",
    	SK: "Ø§Ø³ÙÙØ§Ú©Û",
    	SL: "Ø³ÛØ±Ø§ÙØ¦ÙÙ",
    	SM: "Ø³Ø§ÙâÙØ§Ø±ÛÙÙ",
    	SN: "Ø³ÙÚ¯Ø§Ù",
    	SO: "Ø³ÙÙØ§ÙÛ",
    	SR: "Ø³ÙØ±ÛÙØ§Ù",
    	SS: "Ø³ÙØ¯Ø§Ù Ø¬ÙÙØ¨Û",
    	ST: "Ø³Ø§Ø¦ÙØªÙÙÙ Ù Ù¾Ø±ÛÙØ³ÛÙ¾",
    	SV: "Ø§ÙØ³Ø§ÙÙØ§Ø¯ÙØ±",
    	SX: "Ø³ÙØª ÙØ§Ø±ØªÙ",
    	SY: "Ø³ÙØ±ÛÙ",
    	SZ: "Ø³ÙØ§Ø²ÛÙÙØ¯",
    	TC: "Ø¬Ø²Ø§ÛØ± ØªÙØ±Ú©Ø³ Ù Ú©Ø§ÛÚ©ÙØ³",
    	TD: "ÚØ§Ø¯",
    	TF: "ÙÙÙØ±ÙÙØ§Û Ø¬ÙÙØ¨Û ÙØ±Ø§ÙØ³Ù",
    	TG: "ØªÙÚ¯Ù",
    	TH: "ØªØ§ÛÙÙØ¯",
    	TJ: "ØªØ§Ø¬ÛÚ©Ø³ØªØ§Ù",
    	TK: "ØªÙÚ©ÙØ§Ø¦Ù",
    	TL: "ØªÛÙÙØ±-ÙØ³ØªÙ",
    	TM: "ØªØ±Ú©ÙÙØ³ØªØ§Ù",
    	TN: "ØªÙÙØ³",
    	TO: "ØªÙÙÚ¯Ø§",
    	TR: "ØªØ±Ú©ÛÙ",
    	TT: "ØªØ±ÛÙÛØ¯Ø§Ø¯ Ù ØªÙØ¨Ø§Ú¯Ù",
    	TV: "ØªÙÙØ§ÙÙ",
    	TW: "ØªØ§ÛÙØ§Ù",
    	TZ: "ØªØ§ÙØ²Ø§ÙÛØ§",
    	UA: "Ø§ÙÚ©Ø±Ø§ÛÙ",
    	UG: "Ø§ÙÚ¯Ø§ÙØ¯Ø§",
    	UM: "Ø¬Ø²Ø§ÛØ± Ø¯ÙØ±Ø§ÙØªØ§Ø¯ÙÙ Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯Ù",
    	US: "Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯Ù",
    	UY: "Ø§Ø±ÙÚ¯ÙØ¦Ù",
    	UZ: "Ø§Ø²Ø¨Ú©Ø³ØªØ§Ù",
    	VA: "ÙØ§ØªÛÚ©Ø§Ù",
    	VC: "Ø³ÙØª ÙÛÙØ³ÙØª Ù Ú¯Ø±ÙØ§Ø¯ÛÙ",
    	VE: "ÙÙØ²ÙØ¦ÙØ§",
    	VG: "Ø¬Ø²Ø§ÛØ± ÙÛØ±Ø¬ÛÙ Ø¨Ø±ÛØªØ§ÙÛØ§",
    	VI: "Ø¬Ø²Ø§ÛØ± ÙÛØ±Ø¬ÛÙ Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯Ù",
    	VN: "ÙÛØªÙØ§Ù",
    	VU: "ÙØ§ÙÙØ§ØªÙ",
    	WF: "ÙØ§ÙÛØ³ Ù ÙÙØªÙÙØ§",
    	WS: "Ø³Ø§ÙÙØ¢",
    	XK: "Ú©ÙØ²ÙÙ",
    	YE: "ÛÙÙ",
    	YT: "ÙØ§ÛÙØª",
    	ZA: "Ø§ÙØ±ÛÙØ§Û Ø¬ÙÙØ¨Û",
    	ZM: "Ø²Ø§ÙØ¨ÛØ§",
    	ZW: "Ø²ÛÙØ¨Ø§Ø¨ÙÙ"
    };
    var fa = {
    	locale: locale$d,
    	countries: countries$d
    };

    var fa$1 = /*#__PURE__*/Object.freeze({
        locale: locale$d,
        countries: countries$d,
        default: fa
    });

    var locale$e = "fi";
    var countries$e = {
    	AF: "Afganistan",
    	AX: "Ahvenanmaa",
    	NL: "Alankomaat",
    	AL: "Albania",
    	DZ: "Algeria",
    	AS: "Amerikan Samoa",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktis",
    	AG: "Antigua ja Barbuda",
    	AE: "Arabiemiirikunnat",
    	AR: "Argentiina",
    	AM: "Armenia",
    	AW: "Aruba",
    	AU: "Australia",
    	AZ: "AzerbaidÅ¾an",
    	BS: "Bahama",
    	BH: "Bahrain",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BE: "Belgia",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Bolivia",
    	BQ: "Bonaire, Sint Eustatius ja Saba",
    	BA: "Bosnia ja Hertsegovina",
    	BW: "Botswana",
    	BV: "Bouvetânsaari",
    	BR: "Brasilia",
    	IO: "BrittilÃ¤inen Intian valtameren alue",
    	VG: "BrittilÃ¤iset Neitsytsaaret",
    	BN: "Brunei",
    	BG: "Bulgaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KY: "Caymansaaret",
    	CL: "Chile",
    	CK: "Cookinsaaret",
    	CR: "Costa Rica",
    	CW: "CuraÃ§ao",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominikaaninen tasavalta",
    	EC: "Ecuador",
    	EG: "Egypti",
    	SV: "El Salvador",
    	ER: "Eritrea",
    	ES: "Espanja",
    	ET: "Etiopia",
    	ZA: "EtelÃ¤-Afrikka",
    	GS: "EtelÃ¤-Georgia ja EtelÃ¤iset Sandwichsaaret",
    	SS: "EtelÃ¤-Sudan",
    	FK: "Falklandinsaaret",
    	FO: "FÃ¤rsaaret",
    	FJ: "FidÅ¾i",
    	PH: "Filippiinit",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "Georgia",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GD: "Grenada",
    	GL: "GrÃ¶nlanti",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GG: "Guernsey",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard ja McDonaldinsaaret",
    	HN: "Honduras",
    	HK: "Hongkong",
    	ID: "Indonesia",
    	IN: "Intia",
    	IQ: "Irak",
    	IR: "Iran",
    	IE: "Irlanti",
    	IS: "Islanti",
    	IL: "Israel",
    	IT: "Italia",
    	TL: "ItÃ¤-Timor",
    	AT: "ItÃ¤valta",
    	JM: "Jamaika",
    	JP: "Japani",
    	YE: "Jemen",
    	JE: "Jersey",
    	JO: "Jordania",
    	CX: "Joulusaari",
    	KH: "KambodÅ¾a",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "Kap Verde",
    	KZ: "Kazakstan",
    	KE: "Kenia",
    	CF: "Keski-Afrikan tasavalta",
    	CN: "Kiina",
    	KG: "Kirgisia",
    	KI: "Kiribati",
    	CO: "Kolumbia",
    	KM: "Komorit",
    	CD: "Kongon demokraattinen tasavalta",
    	CG: "Kongon tasavalta",
    	CC: "Kookossaaret",
    	KP: "Korean demokraattinen kansantasavalta",
    	KR: "Korean tasavalta",
    	GR: "Kreikka",
    	HR: "Kroatia",
    	CU: "Kuuba",
    	KW: "Kuwait",
    	CY: "Kypros",
    	LA: "Laos",
    	LV: "Latvia",
    	LS: "Lesotho",
    	LB: "Libanon",
    	LR: "Liberia",
    	LY: "Libya",
    	LI: "Liechtenstein",
    	LT: "Liettua",
    	LU: "Luxemburg",
    	EH: "LÃ¤nsi-Sahara",
    	MO: "Macao",
    	MG: "Madagaskar",
    	MK: "Makedonia",
    	MW: "Malawi",
    	MV: "Malediivit",
    	MY: "Malesia",
    	ML: "Mali",
    	MT: "Malta",
    	IM: "Mansaari",
    	MA: "Marokko",
    	MH: "Marshallinsaaret",
    	MQ: "Martinique",
    	MR: "Mauritania",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Meksiko",
    	FM: "Mikronesian liittovaltio",
    	MD: "Moldova",
    	MC: "Monaco",
    	MN: "Mongolia",
    	ME: "Montenegro",
    	MS: "Montserrat",
    	MZ: "Mosambik",
    	MM: "Myanmar",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Norfolkinsaari",
    	NO: "Norja",
    	CI: "Norsunluurannikko",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestiina",
    	PA: "Panama",
    	PG: "Papua-Uusi-Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	MP: "Pohjois-Mariaanit",
    	PN: "Pitcairn",
    	PT: "Portugali",
    	PR: "Puerto Rico",
    	PL: "Puola",
    	GQ: "PÃ¤ivÃ¤ntasaajan Guinea",
    	QA: "Qatar",
    	FR: "Ranska",
    	TF: "Ranskan etelÃ¤iset alueet",
    	GF: "Ranskan Guayana",
    	PF: "Ranskan Polynesia",
    	RE: "RÃ©union",
    	RO: "Romania",
    	RW: "Ruanda",
    	SE: "Ruotsi",
    	BL: "Saint-BarthÃ©lemy",
    	SH: "Saint Helena",
    	KN: "Saint Kitts ja Nevis",
    	LC: "Saint Lucia",
    	MF: "Saint-Martin",
    	PM: "Saint-Pierre ja Miquelon",
    	VC: "Saint Vincent ja Grenadiinit",
    	DE: "Saksa",
    	SB: "Salomonsaaret",
    	ZM: "Sambia",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© ja PrÃ­ncipe",
    	SA: "Saudi-Arabia",
    	SN: "Senegal",
    	RS: "Serbia",
    	SC: "Seychellit",
    	SL: "Sierra Leone",
    	SG: "Singapore",
    	SX: "Sint Maarten",
    	SK: "Slovakia",
    	SI: "Slovenia",
    	SO: "Somalia",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	FI: "Suomi",
    	SR: "Suriname",
    	SJ: "Svalbard ja Jan Mayen",
    	SZ: "Swazimaa",
    	CH: "Sveitsi",
    	SY: "Syyria",
    	TJ: "TadÅ¾ikistan",
    	TW: "Taiwan",
    	TZ: "Tansania",
    	DK: "Tanska",
    	TH: "Thaimaa",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad ja Tobago",
    	TD: "TÅ¡ad",
    	CZ: "TÅ¡ekki",
    	TN: "Tunisia",
    	TR: "Turkki",
    	TM: "Turkmenistan",
    	TC: "Turks- ja Caicossaaret",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraina",
    	HU: "Unkari",
    	UY: "Uruguay",
    	NC: "Uusi-Kaledonia",
    	NZ: "Uusi-Seelanti",
    	UZ: "Uzbekistan",
    	BY: "Valko-VenÃ¤jÃ¤",
    	VU: "Vanuatu",
    	VA: "Vatikaanivaltio",
    	VE: "Venezuela",
    	RU: "VenÃ¤jÃ¤",
    	VN: "Vietnam",
    	EE: "Viro",
    	WF: "Wallis ja Futunasaaret",
    	GB: "Yhdistynyt kuningaskunta",
    	US: "Yhdysvallat",
    	VI: "Yhdysvaltain Neitsytsaaret",
    	UM: "Yhdysvaltain pienet erillissaaret",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var fi = {
    	locale: locale$e,
    	countries: countries$e
    };

    var fi$1 = /*#__PURE__*/Object.freeze({
        locale: locale$e,
        countries: countries$e,
        default: fi
    });

    var locale$f = "fr";
    var countries$f = {
    	AF: "Afghanistan",
    	AL: "Albanie",
    	DZ: "AlgÃ©rie",
    	AS: "Samoa amÃ©ricaine",
    	AD: "Andorre",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarctique",
    	AG: "Antigua et Barbuda",
    	AR: "Argentine",
    	AM: "ArmÃ©nie",
    	AW: "Aruba",
    	AU: "Australie",
    	AT: "Autriche",
    	AZ: "Azerbaidjan",
    	BS: "Bahamas",
    	BH: "Bahrein",
    	BD: "Bangladesh",
    	BB: "Barbade",
    	BY: "Bielorussie",
    	BE: "Belgique",
    	BZ: "Belize",
    	BJ: "BÃ©nin",
    	BM: "Bermudes",
    	BT: "Bhoutan",
    	BO: "Bolivie",
    	BA: "Bosnie-HerzÃ©govine",
    	BW: "Botswana",
    	BV: "Ãle Bouvet",
    	BR: "BrÃ©sil",
    	IO: "OcÃ©an Indien Britannique",
    	BN: "Brunei Darussalam",
    	BG: "Bulgarie",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Cambodge",
    	CM: "Cameroun",
    	CA: "Canada",
    	CV: "Cap-Vert",
    	KY: "CaÃ¯manes",
    	CF: "Centrafricaine, RÃ©publique",
    	TD: "Tchad",
    	CL: "Chili",
    	CN: "Chine",
    	CX: "Ãle Christmas",
    	CC: "Cocos",
    	CO: "Colombie",
    	KM: "Comores",
    	CG: "Congo, RÃ©publique populaire",
    	CD: "Congo, RÃ©publique dÃ©mocratique",
    	CK: "Ãles Cook",
    	CR: "Costa Rica",
    	CI: "CÃ´te-d'Ivoire",
    	HR: "Croatie",
    	CU: "Cuba",
    	CY: "Chypre",
    	CZ: "TchÃ©quie",
    	DK: "Danemark",
    	DJ: "Djibouti",
    	DM: "Dominique",
    	DO: "RÃ©publique Dominicaine",
    	EC: "Ãquateur",
    	EG: "Ãgypte",
    	SV: "El Salvador",
    	GQ: "GuinÃ©e Ã©quatoriale",
    	ER: "ÃrythrÃ©e",
    	EE: "Estonie",
    	ET: "Ãthiopie",
    	FK: "Ãles Malouines",
    	FO: "Ãles FÃ©roÃ©",
    	FJ: "Fidji",
    	FI: "Finlande",
    	FR: "France",
    	GF: "Guyane franÃ§aise",
    	PF: "PolynÃ©sie franÃ§aise",
    	TF: "Terres australes franÃ§aises",
    	GA: "Gabon",
    	GM: "Gambie",
    	GE: "GÃ©orgie",
    	DE: "Allemagne",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "GrÃ¨ce",
    	GL: "Groenland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "GuinÃ©e",
    	GW: "GuinÃ©e-Bissau",
    	GY: "Guyana",
    	HT: "HaÃ¯ti",
    	HM: "Ãles Heard-et-MacDonald",
    	VA: "Saint-SiÃ¨ge",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "Hongrie",
    	IS: "Islande",
    	IN: "Inde",
    	ID: "IndonÃ©sie",
    	IR: "Iran",
    	IQ: "Irak",
    	IE: "Irlande",
    	IL: "IsraÃ«l",
    	IT: "Italie",
    	JM: "JamaÃ¯que",
    	JP: "Japon",
    	JO: "Jordanie",
    	KZ: "Kazakhstan",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "CorÃ©e du Nord, RÃ©publique populaire dÃ©mocratique",
    	KR: "CorÃ©e du Sud, RÃ©publique",
    	KW: "Koweit",
    	KG: "Kirghistan",
    	LA: "Laos",
    	LV: "Lettonie",
    	LB: "Liban",
    	LS: "Lesotho",
    	LR: "LibÃ©ria",
    	LY: "Libye",
    	LI: "Liechtenstein",
    	LT: "Lituanie",
    	LU: "Luxembourg, Grand-DuchÃ©",
    	MO: "Macao",
    	MK: "MacÃ©doine, Ex-RÃ©publique yougoslave",
    	MG: "Madagascar",
    	MW: "Malawi",
    	MY: "Malaisie",
    	MV: "Maldives",
    	ML: "Mali",
    	MT: "Malte",
    	MH: "Ãles Marshall",
    	MQ: "Martinique",
    	MR: "Mauritanie",
    	MU: "Maurice",
    	YT: "Mayotte",
    	MX: "Mexique",
    	FM: "MicronÃ©sie",
    	MD: "Moldavie",
    	MC: "Monaco",
    	MN: "Mongolie",
    	MS: "Montserrat",
    	MA: "Maroc",
    	MZ: "Mozambique",
    	MM: "Myanmar",
    	NA: "Namibie",
    	NR: "Nauru",
    	NP: "NÃ©pal",
    	NL: "Pays-Bas",
    	NC: "Nouvelle-CalÃ©donie",
    	NZ: "Nouvelle-ZÃ©lande",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "NigÃ©ria",
    	NU: "NiuÃ©",
    	NF: "Ãle Norfolk",
    	MP: "Mariannes du Nord",
    	NO: "NorvÃ¨ge",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestine",
    	PA: "Panama",
    	PG: "Papouasie-Nouvelle-GuinÃ©e",
    	PY: "Paraguay",
    	PE: "PÃ©rou",
    	PH: "Philippines",
    	PN: "Pitcairn",
    	PL: "Pologne",
    	PT: "Portugal",
    	PR: "Porto Rico",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "Roumanie",
    	RU: "Russie",
    	RW: "Rwanda",
    	SH: "Sainte-HÃ©lÃ¨ne",
    	KN: "Saint-Christophe-et-NiÃ©vÃ¨s",
    	LC: "Sainte-Lucie",
    	PM: "Saint Pierre and Miquelon",
    	VC: "Saint-Vincent et les Grenadines",
    	WS: "Samoa",
    	SM: "Saint-Marin",
    	ST: "SÃ£o TomÃ© et Principe",
    	SA: "Arabie Saoudite",
    	SN: "SÃ©nÃ©gal",
    	SC: "Seychelles",
    	SL: "Sierra Leone",
    	SG: "Singapour",
    	SK: "Slovaquie",
    	SI: "SlovÃ©nie",
    	SB: "Salomon",
    	SO: "Somalie",
    	ZA: "Afrique du Sud",
    	GS: "GÃ©orgie du Sud-et-les Ãles Sandwich du Sud",
    	ES: "Espagne",
    	LK: "Sri Lanka",
    	SD: "Soudan",
    	SR: "Suriname",
    	SJ: "Svalbard et Ãle Jan Mayen",
    	SZ: "Ngwane, Royaume du Swaziland",
    	SE: "SuÃ¨de",
    	CH: "Suisse",
    	SY: "Syrie",
    	TW: "TaÃ¯wan",
    	TJ: "Tadjikistan",
    	TZ: "Tanzanie, RÃ©publique unie",
    	TH: "ThaÃ¯lande",
    	TL: "Timor Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad et Tobago",
    	TN: "Tunisie",
    	TR: "Turquie",
    	TM: "TurkmÃ©nistan",
    	TC: "Ãles Turques-et-CaÃ¯ques",
    	TV: "Tuvalu",
    	UG: "Ouganda",
    	UA: "Ukraine",
    	AE: "Ãmirats Arabes Unis",
    	GB: "Royaume-Uni",
    	US: "Ãtats-Unis d'AmÃ©rique",
    	UM: "Ãles mineures Ã©loignÃ©es des Ãtats-Unis",
    	UY: "Uruguay",
    	UZ: "OuzbÃ©kistan",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	VG: "Ãles vierges britanniques",
    	VI: "Ãles vierges amÃ©ricaines",
    	WF: "Wallis et Futuna",
    	EH: "Sahara occidental",
    	YE: "YÃ©men",
    	ZM: "Zambie",
    	ZW: "Zimbabwe",
    	AX: "Ãland",
    	BQ: "Bonaire, Saint-Eustache et Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernesey",
    	IM: "Ãle de Man",
    	JE: "Jersey",
    	ME: "MontÃ©nÃ©gro",
    	BL: "Saint-BarthÃ©lemy",
    	MF: "Saint-Martin (partie franÃ§aise)",
    	RS: "Serbie",
    	SX: "Saint-Martin (partie nÃ©erlandaise)",
    	SS: "Sud-Soudan",
    	XK: "Kosovo"
    };
    var fr = {
    	locale: locale$f,
    	countries: countries$f
    };

    var fr$1 = /*#__PURE__*/Object.freeze({
        locale: locale$f,
        countries: countries$f,
        default: fr
    });

    var locale$g = "he";
    var countries$g = {
    	AF: "××¤×× ××¡××",
    	AX: "××× ×××× ×",
    	AL: "×××× ××",
    	DZ: "××××³××¨××",
    	AS: "×¡×××× ××××¨××§× ××ª",
    	AD: "×× ×××¨×",
    	AO: "×× ××××",
    	AI: "×× ××××",
    	AQ: "×× ×××¨×§×××§×",
    	AG: "×× ×××××× ×××¨××××",
    	AR: "××¨×× ××× ×",
    	AM: "××¨×× ××",
    	AW: "××¨×××",
    	AU: "×××¡××¨×××",
    	AT: "×××¡××¨××",
    	AZ: "×××¨×××××³×",
    	BS: "××× ×××××",
    	BH: "×××¨×××",
    	BD: "×× ××××©",
    	BB: "××¨××××¡",
    	BY: "××××¨××¡",
    	BE: "×××××",
    	BZ: "××××",
    	BJ: "×× ××",
    	BM: "××¨××××",
    	BT: "×××××",
    	BO: "×××××××",
    	BQ: "××××× ××§×¨××××× ××××× ××××",
    	BA: "×××¡× ×× ×××¨×¦××××× ×",
    	BW: "×××¦×××× ×",
    	BV: "××× ××××",
    	BR: "××¨×××",
    	IO: "×××¨××××¨×× ×××¨××××ª ××××§××× ××¡ ×××××",
    	BN: "××¨×× ××",
    	BG: "×××××¨××",
    	BF: "×××¨×§×× × ×¤××¡×",
    	BI: "×××¨×× ××",
    	KH: "×§××××××",
    	CM: "×§××¨××",
    	CA: "×§× ××",
    	CV: "××£ ××¨××",
    	KY: "××× ×§××××",
    	CF: "××¨×¤×××××§× ×©× ××¨×× ××¤×¨××§×",
    	TD: "×¦×³××",
    	CL: "×¦×³×××",
    	CN: "×¡××",
    	CX: "××× ××¨××¡×××¡",
    	CC: "××× ×§××§××¡ (×§×××× ×)",
    	CO: "×§×××××××",
    	KM: "×§××××¨×",
    	CG: "×§×× ×× - ××¨×××××",
    	CD: "×§×× ×× - ×§×× ×©××¡×",
    	CK: "××× ×§××§",
    	CR: "×§××¡×× ×¨××§×",
    	CI: "×××£ ××©× ××",
    	HR: "×§×¨×××××",
    	CU: "×§×××",
    	CW: "×§××¨××¡××",
    	CY: "×§×¤×¨××¡××",
    	CZ: "×¦×³×××",
    	DK: "×× ××¨×§",
    	DJ: "××³×××××",
    	DM: "××××× ××§×",
    	DO: "××¨×¤×××××§× ×××××× ××§× ××ª",
    	EC: "××§×××××¨",
    	EG: "××¦×¨××",
    	SV: "×× ×¡×××××¨",
    	GQ: "××× ×× ×××©××× ××ª",
    	ER: "××¨××ª×¨×××",
    	EE: "××¡××× ××",
    	ET: "××ª×××¤××",
    	FK: "××× ×¤××§×× ×",
    	FO: "××× ×¤××¨×",
    	FJ: "×¤×××³×",
    	FI: "×¤×× ×× ×",
    	FR: "×¦×¨×¤×ª",
    	GF: "×××× × ××¦×¨×¤×ª××ª",
    	PF: "×¤×××× ××× ××¦×¨×¤×ª××ª",
    	TF: "×××¨××××¨×××ª ×××¨×××××ª ×©× ×¦×¨×¤×ª",
    	GA: "××××",
    	GM: "×××××",
    	GE: "××××¨×××",
    	DE: "××¨×× ××",
    	GH: "××× ×",
    	GI: "××××¨×××¨",
    	GR: "××××",
    	GL: "××¨×× ×× ×",
    	GD: "××¨× ××",
    	GP: "××××××××¤",
    	GU: "××××",
    	GT: "×××××××",
    	GG: "××¨× ×¡×",
    	GN: "××× ××",
    	GW: "××× ×× ×××¡××",
    	GY: "×××× ×",
    	HT: "×××××",
    	HM: "××× ××¨× ×××§××× ××",
    	VA: "××××ª××§×",
    	HN: "××× ×××¨×¡",
    	HK: "××× × ×§×× × (×××× ×× ××× ××××× ×©× ×¡××)",
    	HU: "××× ××¨××",
    	IS: "×××¡×× ×",
    	IN: "××××",
    	ID: "××× ××× ×××",
    	IR: "×××¨××",
    	IQ: "×¢××¨××§",
    	IE: "×××¨×× ×",
    	IM: "××× ×××",
    	IL: "××©×¨××",
    	IT: "××××××",
    	JM: "××³××××§×",
    	JP: "××¤×",
    	JE: "××³×¨×¡×",
    	JO: "××¨××",
    	KZ: "×§×××¡××",
    	KE: "×§× ××",
    	KI: "×§××¨×××××",
    	KP: "×§××¨××× ××¦×¤×× ××ª",
    	KR: "×§××¨××× ×××¨××××ª",
    	KW: "×××××ª",
    	KG: "×§××¨××××¡××",
    	LA: "××××¡",
    	LV: "×××××",
    	LB: "××× ××",
    	LS: "××¡×××",
    	LR: "××××¨××",
    	LY: "×××",
    	LI: "××××× ×©××××",
    	LT: "××××",
    	LU: "×××§×¡××××¨×",
    	MO: "××§×× (×××× ×× ××× ××××× ×©× ×¡××)",
    	MK: "××§××× ××",
    	MG: "××××¡×§×¨",
    	MW: "××××××",
    	MY: "×××××",
    	MV: "××××× ×××××××××",
    	ML: "××××",
    	MT: "××××",
    	MH: "××× ××¨×©×",
    	MQ: "××¨××× ××§",
    	MR: "××××¨××× ××",
    	MU: "××××¨××¦×××¡",
    	YT: "×××××",
    	MX: "××§×¡××§×",
    	FM: "×××§×¨×× ×××",
    	MD: "×××××××",
    	MC: "××× ×§×",
    	MN: "××× ×××××",
    	ME: "××× ×× ××¨×",
    	MS: "××× ×¡×¨××",
    	MA: "××¨××§×",
    	MZ: "×××××××§",
    	MM: "×××× ××¨ (×××¨××)",
    	NA: "× ×××××",
    	NR: "× ×××¨×",
    	NP: "× ×¤××",
    	NL: "×××× ×",
    	NC: "×§×××× ×× ××××©×",
    	NZ: "× ×× ×××× ×",
    	NI: "× ××§×¨××××",
    	NE: "× ×××³×¨",
    	NG: "× ×××¨××",
    	NU: "× ××××",
    	NF: "××× × ××¨×¤××§",
    	MP: "××× ××¨××× × ××¦×¤×× ×××",
    	NO: "× ××¨×××××",
    	OM: "×¢××××",
    	PK: "×¤×§××¡××",
    	PW: "×¤×××",
    	PS: "××©×××× ××¤××¡××× ×××",
    	PA: "×¤× ××",
    	PG: "×¤×¤××× ××× ×× ××××©×",
    	PY: "×¤×¨×××××",
    	PE: "×¤×¨×",
    	PH: "××¤××××¤×× ××",
    	PN: "××× ×¤×××§×¨×",
    	PL: "×¤××××",
    	PT: "×¤××¨××××",
    	PR: "×¤×××¨×× ×¨××§×",
    	QA: "×§×××¨",
    	RE: "×¨××× ×××",
    	RO: "×¨××× ××",
    	RU: "×¨××¡××",
    	RW: "×¨××× ××",
    	BL: "×¡× × ××¨×ª×××××××",
    	SH: "×¡× × ××× ×",
    	KN: "×¡× × ×§×××¡ ×× ××××¡",
    	LC: "×¡× × ×××¡××",
    	MF: "×¡× ××¨××",
    	PM: "×¡× × ×¤×××¨ ××××§×××",
    	VC: "×¡× × ××× ×¡× × ××××¨× ××× ××",
    	WS: "×¡××××",
    	SM: "×¡× ××¨×× ×",
    	ST: "×¡×× ×××× ××¤×¨×× ×¡××¤×",
    	SA: "×¢×¨× ××¡×¢××××ª",
    	SN: "×¡× ××",
    	RS: "×¡×¨×××",
    	SC: "××× ×¡×××©×",
    	SL: "×¡×××¨× ×××× ×",
    	SG: "×¡×× ××¤××¨",
    	SX: "×¡× × ×××¨××",
    	SK: "×¡××××§××",
    	SI: "×¡×××× ××",
    	SB: "××× ×©×××",
    	SO: "×¡×××××",
    	ZA: "××¨×× ××¤×¨××§×",
    	GS: "××³××¨××³×× ×××¨××××ª ×××× ×¡× ×××××¥×³ ×××¨×××××",
    	SS: "××¨×× ×¡×××",
    	ES: "×¡×¤×¨×",
    	LK: "×¡×¨× ×× ×§×",
    	SD: "×¡×××",
    	SR: "×¡××¨×× ×",
    	SJ: "×¡××××××¨× ×××× ×××××",
    	SZ: "×¡×××××× ×",
    	SE: "×©×××××",
    	CH: "×©×××××¥",
    	SY: "×¡××¨××",
    	TW: "×××××××",
    	TJ: "×××³××§××¡××",
    	TZ: "×× ×× ××",
    	TH: "×ª×××× ×",
    	TL: "×××××¨ ××¡××",
    	TG: "××××",
    	TK: "×××§×××",
    	TO: "××× ××",
    	TT: "××¨×× ××× ××××××",
    	TN: "××× ××¡××",
    	TR: "×××¨×§××",
    	TM: "×××¨×§×× ××¡××",
    	TC: "××× ×××¨×§×¡ ××§×××§××¡",
    	TV: "××××××",
    	UG: "×××× ××",
    	UA: "×××§×¨××× ×",
    	AE: "××××× ×××××¨××××ª ××¢×¨××××ª",
    	GB: "×××××× ×××××××ª",
    	US: "××¨×¦××ª ×××¨××ª",
    	UM: "××××× ×××¨×××§×× ××§×× ×× ×©× ××¨××´×",
    	UY: "×××¨××××××",
    	UZ: "×××××§××¡××",
    	VU: "×× ××××",
    	VE: "×× ×¦××××",
    	VN: "××××× ××",
    	VG: "××× ×××ª××× ×××¨×××××",
    	VI: "××× ×××ª××× ×©× ××¨×¦××ª ×××¨××ª",
    	WF: "××× ×××××¡ ××¤×××× ×",
    	EH: "×¡××¨× ×××¢×¨×××ª",
    	YE: "×ª×××",
    	ZM: "×××××",
    	ZW: "××××××××",
    	XK: "×§××¡×××"
    };
    var he = {
    	locale: locale$g,
    	countries: countries$g
    };

    var he$1 = /*#__PURE__*/Object.freeze({
        locale: locale$g,
        countries: countries$g,
        default: he
    });

    var locale$h = "hr";
    var countries$h = {
    	AD: "Andora",
    	AE: "Ujedinjeni Arapski Emirati",
    	AF: "Afganistan",
    	AG: "Antigva i Barbuda",
    	AI: "Angvila",
    	AL: "Albanija",
    	AM: "Armenija",
    	AO: "Angola",
    	AQ: "Antarktika",
    	AR: "Argentina",
    	AS: "AmeriÄka Samoa",
    	AT: "Austrija",
    	AU: "Australija",
    	AW: "Aruba",
    	AX: "Ãlandski otoci",
    	AZ: "AzerbajdÅ¾an",
    	BA: "Bosna i Hercegovina",
    	BB: "Barbados",
    	BD: "BangladeÅ¡",
    	BE: "Belgija",
    	BF: "Burkina Faso",
    	BG: "Bugarska",
    	BH: "Bahrein",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint BarthÃ©lemy",
    	BM: "Bermudi",
    	BN: "Brunej",
    	BO: "Bolivija",
    	BQ: "Karipski otoci Nizozemske",
    	BR: "Brazil",
    	BS: "Bahami",
    	BT: "Butan",
    	BV: "Otok Bouvet",
    	BW: "Bocvana",
    	BY: "Bjelorusija",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "Kokosovi (Keelingovi) otoci",
    	CD: "Kongo - Kinshasa",
    	CF: "SrednjoafriÄka Republika",
    	CG: "Kongo - Brazzaville",
    	CH: "Å vicarska",
    	CI: "Obala Bjelokosti",
    	CK: "Cookovi Otoci",
    	CL: "Äile",
    	CM: "Kamerun",
    	CN: "Kina",
    	CO: "Kolumbija",
    	CR: "Kostarika",
    	CU: "Kuba",
    	CV: "Zelenortska Republika",
    	CW: "CuraÃ§ao",
    	CX: "BoÅ¾iÄni otok",
    	CY: "Cipar",
    	CZ: "ÄeÅ¡ka",
    	DE: "NjemaÄka",
    	DJ: "DÅ¾ibuti",
    	DK: "Danska",
    	DM: "Dominika",
    	DO: "Dominikanska Republika",
    	DZ: "AlÅ¾ir",
    	EC: "Ekvador",
    	EE: "Estonija",
    	EG: "Egipat",
    	EH: "Zapadna Sahara",
    	ER: "Eritreja",
    	ES: "Å panjolska",
    	ET: "Etiopija",
    	FI: "Finska",
    	FJ: "FidÅ¾i",
    	FK: "Falklandski otoci",
    	FM: "Mikronezija",
    	FO: "Farski otoci",
    	FR: "Francuska",
    	GA: "Gabon",
    	GB: "Ujedinjeno Kraljevstvo",
    	GD: "Grenada",
    	GE: "Gruzija",
    	GF: "Francuska Gijana",
    	GG: "Guernsey",
    	GH: "Gana",
    	GI: "Gibraltar",
    	GL: "Grenland",
    	GM: "Gambija",
    	GN: "Gvineja",
    	GP: "Guadalupe",
    	GQ: "Ekvatorska Gvineja",
    	GR: "GrÄka",
    	GS: "JuÅ¾na Georgija i JuÅ¾ni SendviÄki Otoci",
    	GT: "Gvatemala",
    	GU: "Guam",
    	GW: "Gvineja Bisau",
    	GY: "Gvajana",
    	HK: "PUP Hong Kong Kina",
    	HM: "Otoci Heard i McDonald",
    	HN: "Honduras",
    	HR: "Hrvatska",
    	HT: "Haiti",
    	HU: "MaÄarska",
    	ID: "Indonezija",
    	IE: "Irska",
    	IL: "Izrael",
    	IM: "Otok Man",
    	IN: "Indija",
    	IO: "Britanski Indijskooceanski teritorij",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Island",
    	IT: "Italija",
    	JE: "Jersey",
    	JM: "Jamajka",
    	JO: "Jordan",
    	JP: "Japan",
    	KE: "Kenija",
    	KG: "Kirgistan",
    	KH: "KambodÅ¾a",
    	KI: "Kiribati",
    	KM: "Komori",
    	KN: "Sveti Kristofor i Nevis",
    	KP: "Sjeverna Koreja",
    	KR: "JuÅ¾na Koreja",
    	KW: "Kuvajt",
    	KY: "Kajmanski otoci",
    	KZ: "Kazahstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "Sveta Lucija",
    	LI: "LihtenÅ¡tajn",
    	LK: "Å ri Lanka",
    	LR: "Liberija",
    	LS: "Lesoto",
    	LT: "Litva",
    	LU: "Luksemburg",
    	LV: "Latvija",
    	LY: "Libija",
    	MA: "Maroko",
    	MC: "Monako",
    	MD: "Moldavija",
    	ME: "Crna Gora",
    	MF: "Saint Martin",
    	MG: "Madagaskar",
    	MH: "MarÅ¡alovi Otoci",
    	MK: "Makedonija",
    	ML: "Mali",
    	MM: "Mjanmar (Burma)",
    	MN: "Mongolija",
    	MO: "PUP Makao Kina",
    	MP: "Sjevernomarijanski otoci",
    	MQ: "Martinique",
    	MR: "Mauretanija",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauricijus",
    	MV: "Maldivi",
    	MW: "Malavi",
    	MX: "Meksiko",
    	MY: "Malezija",
    	MZ: "Mozambik",
    	NA: "Namibija",
    	NC: "Nova Kaledonija",
    	NE: "Niger",
    	NF: "Otok Norfolk",
    	NG: "Nigerija",
    	NI: "Nikaragva",
    	NL: "Nizozemska",
    	NO: "NorveÅ¡ka",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Novi Zeland",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Francuska Polinezija",
    	PG: "Papua Nova Gvineja",
    	PH: "Filipini",
    	PK: "Pakistan",
    	PL: "Poljska",
    	PM: "Saint-Pierre-et-Miquelon",
    	PN: "Otoci Pitcairn",
    	PR: "Portoriko",
    	PS: "Palestinsko PodruÄje",
    	PT: "Portugal",
    	PW: "Palau",
    	PY: "Paragvaj",
    	QA: "Katar",
    	RE: "RÃ©union",
    	RO: "Rumunjska",
    	RS: "Srbija",
    	RU: "Rusija",
    	RW: "Ruanda",
    	SA: "Saudijska Arabija",
    	SB: "Salomonski Otoci",
    	SC: "SejÅ¡eli",
    	SD: "Sudan",
    	SE: "Å vedska",
    	SG: "Singapur",
    	SH: "Sveta Helena",
    	SI: "Slovenija",
    	SJ: "Svalbard i Jan Mayen",
    	SK: "SlovaÄka",
    	SL: "Sijera Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalija",
    	SR: "Surinam",
    	SS: "JuÅ¾ni Sudan",
    	ST: "Sveti Toma i Princip",
    	SV: "Salvador",
    	SX: "Sint Maarten",
    	SY: "Sirija",
    	SZ: "Svazi",
    	TC: "Otoci Turks i Caicos",
    	TD: "Äad",
    	TF: "Francuski juÅ¾ni i antarktiÄki teritoriji",
    	TG: "Togo",
    	TH: "Tajland",
    	TJ: "TadÅ¾ikistan",
    	TK: "Tokelau",
    	TL: "Timor-Leste",
    	TM: "Turkmenistan",
    	TN: "Tunis",
    	TO: "Tonga",
    	TR: "Turska",
    	TT: "Trinidad i Tobago",
    	TV: "Tuvalu",
    	TW: "Tajvan",
    	TZ: "Tanzanija",
    	UA: "Ukrajina",
    	UG: "Uganda",
    	UM: "Mali udaljeni otoci SAD-a",
    	US: "Sjedinjene AmeriÄke DrÅ¾ave",
    	UY: "Urugvaj",
    	UZ: "Uzbekistan",
    	VA: "Vatikanski Grad",
    	VC: "Sveti Vincent i Grenadini",
    	VE: "Venezuela",
    	VG: "Britanski DjeviÄanski otoci",
    	VI: "AmeriÄki DjeviÄanski otoci",
    	VN: "Vijetnam",
    	VU: "Vanuatu",
    	WF: "Wallis i Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "JuÅ¾noafriÄka Republika",
    	ZM: "Zambija",
    	ZW: "Zimbabve"
    };
    var hr = {
    	locale: locale$h,
    	countries: countries$h
    };

    var hr$1 = /*#__PURE__*/Object.freeze({
        locale: locale$h,
        countries: countries$h,
        default: hr
    });

    var locale$i = "hu";
    var countries$i = {
    	AF: "AfganisztÃ¡n",
    	AL: "AlbÃ¡nia",
    	DZ: "AlgÃ©ria",
    	AS: "Amerikai Szamoa",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktisz",
    	AG: "Antigua Ã©s Barbuda",
    	AR: "ArgentÃ­na",
    	AM: "ÃrmÃ©nyorszÃ¡g",
    	AW: "Aruba",
    	AU: "AusztrÃ¡lia",
    	AT: "Ausztria",
    	AZ: "AzerbajdzsÃ¡n",
    	BS: "Bahama-szigetek",
    	BH: "Bahrein",
    	BD: "Banglades",
    	BB: "Barbados",
    	BY: "FehÃ©roroszorszÃ¡g",
    	BE: "Belgium",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "BhutÃ¡n",
    	BO: "BolÃ­via",
    	BA: "Bosznia-Hercegovina",
    	BW: "Botswana",
    	BV: "Bouvet-sziget",
    	BR: "BrazÃ­lia",
    	IO: "Brit Indiai-Ã³ceÃ¡ni TerÃ¼let",
    	BN: "Brunei",
    	BG: "BulgÃ¡ria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Kambodzsa",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "ZÃ¶ld-foki KÃ¶ztÃ¡rsasÃ¡g",
    	KY: "KajmÃ¡n-szigetek",
    	CF: "KÃ¶zÃ©p-afrikai KÃ¶ztÃ¡rsasÃ¡g",
    	TD: "CsÃ¡d",
    	CL: "Chile",
    	CN: "KÃ­na",
    	CX: "KarÃ¡csony-sziget",
    	CC: "KÃ³kusz (Keeling)-szigetek",
    	CO: "Kolumbia",
    	KM: "Comore-szigetek",
    	CG: "KongÃ³i KÃ¶ztÃ¡rsasÃ¡g",
    	CD: "KongÃ³i Demokratikus KÃ¶ztÃ¡rsasÃ¡g",
    	CK: "Cook-szigetek",
    	CR: "Costa Rica",
    	CI: "ElefÃ¡ntcsontpart",
    	HR: "HorvÃ¡torszÃ¡g",
    	CU: "Kuba",
    	CY: "Ciprus",
    	CZ: "CsehorszÃ¡g",
    	DK: "DÃ¡nia",
    	DJ: "Dzsibuti",
    	DM: "Dominikai KÃ¶zÃ¶ssÃ©g",
    	DO: "Dominikai KÃ¶ztÃ¡rsasÃ¡g",
    	EC: "Ecuador",
    	EG: "Egyiptom",
    	SV: "Salvador",
    	GQ: "EgyenlÃ­tÅi-Guinea",
    	ER: "Eritrea",
    	EE: "ÃsztorszÃ¡g",
    	ET: "EtiÃ³pia",
    	FK: "Falkland-szigetek",
    	FO: "FerÃ¶er",
    	FJ: "Fidzsi-szigetek",
    	FI: "FinnorszÃ¡g",
    	FR: "FranciaorszÃ¡g",
    	GF: "Francia Guyana",
    	PF: "Francia PolinÃ©zia",
    	TF: "Francia dÃ©li terÃ¼letek",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "GrÃºzia",
    	DE: "NÃ©metorszÃ¡g",
    	GH: "GhÃ¡na",
    	GI: "GibraltÃ¡r",
    	GR: "GÃ¶rÃ¶gorszÃ¡g",
    	GL: "GrÃ¶nland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Bissau-Guinea",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Heard-sziget Ã©s McDonald-szigetek",
    	VA: "VatikÃ¡n",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "MagyarorszÃ¡g",
    	IS: "Izland",
    	IN: "India",
    	ID: "IndonÃ©zia",
    	IR: "IrÃ¡n",
    	IQ: "Irak",
    	IE: "ÃrorszÃ¡g",
    	IL: "Izrael",
    	IT: "OlaszorszÃ¡g",
    	JM: "Jamaica",
    	JP: "JapÃ¡n",
    	JO: "JordÃ¡nia",
    	KZ: "KazahsztÃ¡n",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "Ãszak-Korea",
    	KR: "DÃ©l-Korea",
    	KW: "Kuvait",
    	KG: "KirgizisztÃ¡n",
    	LA: "Laosz",
    	LV: "LettorszÃ¡g",
    	LB: "Libanon",
    	LS: "Lesotho",
    	LR: "LibÃ©ria",
    	LY: "LÃ­bia",
    	LI: "Liechtenstein",
    	LT: "LitvÃ¡nia",
    	LU: "Luxemburg",
    	MO: "Makao",
    	MK: "MacedÃ³nia",
    	MG: "MadagaszkÃ¡r",
    	MW: "Malawi",
    	MY: "Malajzia",
    	MV: "MaldÃ­v-szigetek",
    	ML: "Mali",
    	MT: "MÃ¡lta",
    	MH: "Marshall-szigetek",
    	MQ: "Martinique",
    	MR: "MauritÃ¡nia",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "MexikÃ³",
    	FM: "MikronÃ©ziai SzÃ¶vetsÃ©gi Ãllamok",
    	MD: "Moldova",
    	MC: "Monaco",
    	MN: "MongÃ³lia",
    	MS: "Montserrat",
    	MA: "MarokkÃ³",
    	MZ: "Mozambik",
    	MM: "Mianmar",
    	NA: "NamÃ­bia",
    	NR: "Nauru",
    	NP: "NepÃ¡l",
    	NL: "Hollandia",
    	NC: "Ãj-KaledÃ³nia",
    	NZ: "Ãj-ZÃ©land",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "NigÃ©ria",
    	NU: "Niue",
    	NF: "Norfolk-sziget",
    	MP: "Ãszaki-Mariana-szigetek",
    	NO: "NorvÃ©gia",
    	OM: "OmÃ¡n",
    	PK: "PakisztÃ¡n",
    	PW: "Palau",
    	PS: "Palesztina",
    	PA: "Panama",
    	PG: "PÃ¡pua Ãj-Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "FÃ¼lÃ¶p-szigetek",
    	PN: "Pitcairn-szigetek",
    	PL: "LengyelorszÃ¡g",
    	PT: "PortugÃ¡lia",
    	PR: "Puerto Rico",
    	QA: "Katar",
    	RE: "RÃ©union",
    	RO: "RomÃ¡nia",
    	RU: "OroszorszÃ¡g",
    	RW: "Ruanda",
    	SH: "Saint Helena",
    	KN: "Saint Kitts Ã©s Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint Pierre and Miquelon",
    	VC: "Saint Vincent Ã©s a Grenadine-szigetek",
    	WS: "Szamoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© Ã©s PrÃ­ncipe",
    	SA: "Szaudi-ArÃ¡bia",
    	SN: "SzenegÃ¡l",
    	SC: "Seychelle-szigetek",
    	SL: "Sierra Leone",
    	SG: "SzingapÃºr",
    	SK: "SzlovÃ¡kia",
    	SI: "SzlovÃ©nia",
    	SB: "Salamon-szigetek",
    	SO: "SzomÃ¡lia",
    	ZA: "DÃ©l-Afrika",
    	GS: "DÃ©li-Georgia Ã©s DÃ©li-Sandwich-szigetek",
    	ES: "SpanyolorszÃ¡g",
    	LK: "Sri Lanka",
    	SD: "SzudÃ¡n",
    	SR: "Suriname",
    	SJ: "SpitzbergÃ¡k Ã©s Jan Mayen",
    	SZ: "SzvÃ¡zifÃ¶ld",
    	SE: "SvÃ©dorszÃ¡g",
    	CH: "SvÃ¡jc",
    	SY: "SzÃ­ria",
    	TW: "Tajvan",
    	TJ: "TÃ¡dzsikisztÃ¡n",
    	TZ: "TanzÃ¡nia",
    	TH: "ThaifÃ¶ld",
    	TL: "Kelet-Timor",
    	TG: "Togo",
    	TK: "Tokelau-szigetek",
    	TO: "Tonga",
    	TT: "Trinidad Ã©s Tobago",
    	TN: "TunÃ©zia",
    	TR: "TÃ¶rÃ¶korszÃ¡g",
    	TM: "TÃ¼rkmenisztÃ¡n",
    	TC: "Turks- Ã©s Caicos-szigetek",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukrajna",
    	AE: "EgyesÃ¼lt Arab EmÃ­rsÃ©gek",
    	GB: "EgyesÃ¼lt KirÃ¡lysÃ¡g",
    	US: "Amerikai EgyesÃ¼lt Ãllamok",
    	UM: "Az Amerikai EgyesÃ¼lt Ãllamok lakatlan kÃ¼lbirtokai",
    	UY: "Uruguay",
    	UZ: "ÃzbegisztÃ¡n",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	VG: "Brit Virgin-szigetek",
    	VI: "Amerikai Virgin-szigetek",
    	WF: "Wallis Ã©s Futuna",
    	EH: "Nyugat-Szahara",
    	YE: "Jemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Ãland",
    	BQ: "Karibi Hollandia",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Man-sziget",
    	JE: "Jersey",
    	ME: "MontenegrÃ³",
    	BL: "Saint BarthÃ©lemy",
    	MF: "Szent MÃ¡rton-sziget (francia rÃ©sz)",
    	RS: "Szerbia",
    	SX: "Szent MÃ¡rton-sziget (holland rÃ©sz)",
    	SS: "DÃ©l-SzudÃ¡n",
    	XK: "KoszovÃ³"
    };
    var hu = {
    	locale: locale$i,
    	countries: countries$i
    };

    var hu$1 = /*#__PURE__*/Object.freeze({
        locale: locale$i,
        countries: countries$i,
        default: hu
    });

    var locale$j = "hy";
    var countries$j = {
    	AD: "Ô±Õ¶Õ¤Õ¸ÖÖÕ¡",
    	AE: "Ô±ÖÕ¡Õ¢Õ¡Õ¯Õ¡Õ¶ ÕÕ«Õ¡ÖÕµÕ¡Õ¬ Ô·Õ´Õ«ÖÕ¸ÖÕ©ÕµÕ¸ÖÕ¶Õ¶Õ¥Ö",
    	AF: "Ô±ÖÕ²Õ¡Õ¶Õ½Õ¿Õ¡Õ¶",
    	AG: "Ô±Õ¶Õ¿Õ«Õ£Õ¸ÖÕ¡ Ö Ô²Õ¡ÖÕ¢Õ¸ÖÕ¤Õ¡",
    	AI: "Ô±Õ¶Õ£Õ¸ÖÕ«Õ¬Õ¡",
    	AL: "Ô±Õ¬Õ¢Õ¡Õ¶Õ«Õ¡",
    	AM: "ÕÕ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶",
    	AO: "Ô±Õ¶Õ£Õ¸Õ¬Õ¡",
    	AQ: "Ô±Õ¶Õ¿Õ¡ÖÕ¯Õ¿Õ«Õ¤Õ¡",
    	AR: "Ô±ÖÕ£Õ¥Õ¶Õ¿Õ«Õ¶Õ¡",
    	AS: "Ô±Õ´Õ¥ÖÕ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ´Õ¸Õ¡",
    	AT: "Ô±Õ¾Õ½Õ¿ÖÕ«Õ¡",
    	AU: "Ô±Õ¾Õ½Õ¿ÖÕ¡Õ¬Õ«Õ¡",
    	AW: "Ô±ÖÕ¸ÖÕ¢Õ¡",
    	AX: "Ô±Õ¬Õ¡Õ¶Õ¤ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	AZ: "Ô±Õ¤ÖÕ¢Õ¥Õ»Õ¡Õ¶",
    	BA: "Ô²Õ¸Õ½Õ¶Õ«Õ¡ Ö ÕÕ¥ÖÖÕ¥Õ£Õ¸Õ¾Õ«Õ¶Õ¡",
    	BB: "Ô²Õ¡ÖÕ¢Õ¡Õ¤Õ¸Õ½",
    	BD: "Ô²Õ¡Õ¶Õ£Õ¬Õ¡Õ¤Õ¥Õ·",
    	BE: "Ô²Õ¥Õ¬Õ£Õ«Õ¡",
    	BF: "Ô²Õ¸ÖÖÕ¯Õ«Õ¶Õ¡ ÕÕ¡Õ½Õ¸",
    	BG: "Ô²Õ¸ÖÕ¬Õ²Õ¡ÖÕ«Õ¡",
    	BH: "Ô²Õ¡Õ°ÖÕ¥ÕµÕ¶",
    	BI: "Ô²Õ¸ÖÖÕ¸ÖÕ¶Õ¤Õ«",
    	BJ: "Ô²Õ¥Õ¶Õ«Õ¶",
    	BL: "ÕÕ¥Õ¶ Ô²Õ¡ÖÕ¿Õ¥Õ¬Õ´Õ«",
    	BM: "Ô²Õ¥ÖÕ´Õ¸ÖÕ¤Õ¶Õ¥Ö",
    	BN: "Ô²ÖÕ¸ÖÕ¶Õ¥Õµ",
    	BO: "Ô²Õ¸Õ¬Õ«Õ¾Õ«Õ¡",
    	BQ: "Ô¿Õ¡ÖÕ«Õ¢ÕµÕ¡Õ¶ ÕÕ«Õ¤Õ¥Õ¼Õ¬Õ¡Õ¶Õ¤Õ¶Õ¥Ö",
    	BR: "Ô²ÖÕ¡Õ¦Õ«Õ¬Õ«Õ¡",
    	BS: "Ô²Õ¡Õ°Õ¡Õ´Õ¡Õ¶Õ¥Ö",
    	BT: "Ô²Õ¸ÖÕ©Õ¡Õ¶",
    	BV: "Ô²Õ¸ÖÕ¾Õ¥ Õ¯Õ²Õ¦Õ«",
    	BW: "Ô²Õ¸Õ©Õ½Õ¾Õ¡Õ¶Õ¡",
    	BY: "Ô²Õ¥Õ¬Õ¡Õ¼Õ¸ÖÕ½",
    	BZ: "Ô²Õ¥Õ¬Õ«Õ¦",
    	CA: "Ô¿Õ¡Õ¶Õ¡Õ¤Õ¡",
    	CC: "Ô¿Õ¸Õ¯Õ¸Õ½ÕµÕ¡Õ¶ (ÕÕ«Õ¬Õ«Õ¶Õ£) Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	CD: "Ô¿Õ¸Õ¶Õ£Õ¸ - Ô¿Õ«Õ¶Õ·Õ¡Õ½Õ¡",
    	CF: "Ô¿Õ¥Õ¶Õ¿ÖÕ¸Õ¶Õ¡Õ¯Õ¡Õ¶ Ô±ÖÖÕ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶",
    	CG: "Ô¿Õ¸Õ¶Õ£Õ¸ - Ô²ÖÕ¡Õ¦Õ¡Õ¾Õ«Õ¬",
    	CH: "ÕÕ¾Õ¥ÕµÖÕ¡ÖÕ«Õ¡",
    	CI: "Ô¿Õ¸Õ¿ Õ¤âÔ»Õ¾Õ¸ÖÕ¡Ö",
    	CK: "Ô¿Õ¸ÖÕ¯Õ« Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	CL: "ÕÕ«Õ¬Õ«",
    	CM: "Ô¿Õ¡Õ´Õ¥ÖÕ¸ÖÕ¶",
    	CN: "ÕÕ«Õ¶Õ¡Õ½Õ¿Õ¡Õ¶",
    	CO: "Ô¿Õ¸Õ¬Õ¸ÖÕ´Õ¢Õ«Õ¡",
    	CR: "Ô¿Õ¸Õ½Õ¿Õ¡ ÕÕ«Õ¯Õ¡",
    	CU: "Ô¿Õ¸ÖÕ¢Õ¡",
    	CV: "Ô¿Õ¡Õ¢Õ¸ ÕÕ¥ÖÕ¤Õ¥",
    	CW: "Ô¿ÕµÕ¸ÖÖÕ¡Õ½Õ¡Õ¸",
    	CX: "ÕÕ¸ÖÖÕ¢ Ô¾Õ¶Õ¶Õ¤ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«",
    	CY: "Ô¿Õ«ÕºÖÕ¸Õ½",
    	CZ: "ÕÕ¥Õ­Õ«Õ¡",
    	DE: "Ô³Õ¥ÖÕ´Õ¡Õ¶Õ«Õ¡",
    	DJ: "ÕÕ«Õ¢Õ¸ÖÕ©Õ«",
    	DK: "Ô´Õ¡Õ¶Õ«Õ¡",
    	DM: "Ô´Õ¸Õ´Õ«Õ¶Õ«Õ¯Õ¡",
    	DO: "Ô´Õ¸Õ´Õ«Õ¶Õ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶",
    	DZ: "Ô±Õ¬ÕªÕ«Ö",
    	EC: "Ô·Õ¯Õ¾Õ¡Õ¤Õ¸Ö",
    	EE: "Ô·Õ½Õ¿Õ¸Õ¶Õ«Õ¡",
    	EG: "ÔµÕ£Õ«ÕºÕ¿Õ¸Õ½",
    	EH: "Ô±ÖÖÕ´Õ¿ÕµÕ¡Õ¶ ÕÕ¡Õ°Õ¡ÖÕ¡",
    	ER: "Ô·ÖÕ«Õ©ÖÕ¥Õ¡",
    	ES: "Ô»Õ½ÕºÕ¡Õ¶Õ«Õ¡",
    	ET: "ÔµÕ©Õ¸Õ¾ÕºÕ«Õ¡",
    	FI: "ÕÕ«Õ¶Õ¬Õ¡Õ¶Õ¤Õ«Õ¡",
    	FJ: "ÕÕ«Õ»Õ«",
    	FK: "ÕÕ¸Õ¬ÖÕ¬Õ¥Õ¶Õ¤ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	FM: "ÕÕ«Õ¯ÖÕ¸Õ¶Õ¥Õ¦Õ«Õ¡",
    	FO: "ÕÕ¡ÖÕ¥ÖÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	FR: "ÕÖÕ¡Õ¶Õ½Õ«Õ¡",
    	GA: "Ô³Õ¡Õ¢Õ¸Õ¶",
    	GB: "ÕÕ«Õ¡ÖÕµÕ¡Õ¬ Ô¹Õ¡Õ£Õ¡Õ¾Õ¸ÖÕ¸ÖÕ©ÕµÕ¸ÖÕ¶",
    	GD: "Ô³ÖÕ¥Õ¶Õ¡Õ¤Õ¡",
    	GE: "ÕÖÕ¡Õ½Õ¿Õ¡Õ¶",
    	GF: "ÕÖÕ¡Õ¶Õ½Õ«Õ¡Õ¯Õ¡Õ¶ Ô³Õ¾Õ«Õ¡Õ¶Õ¡",
    	GG: "Ô³Õ¥ÖÕ¶Õ½Õ«",
    	GH: "Ô³Õ¡Õ¶Õ¡",
    	GI: "ÕÕ«Õ¢ÖÕ¡Õ¬Õ©Õ¡Ö",
    	GL: "Ô³ÖÕ¥Õ¶Õ¬Õ¡Õ¶Õ¤Õ«Õ¡",
    	GM: "Ô³Õ¡Õ´Õ¢Õ«Õ¡",
    	GN: "Ô³Õ¾Õ«Õ¶Õ¥Õ¡",
    	GP: "Ô³Õ¾Õ¡Õ¤Õ¥Õ¬Õ¸ÖÕºÕ¡",
    	GQ: "ÕÕ¡Õ½Õ¡ÖÕ¡Õ¯Õ¡Õ®Õ¡ÕµÕ«Õ¶ Ô³Õ¾Õ«Õ¶Õ¥Õ¡",
    	GR: "ÕÕ¸ÖÕ¶Õ¡Õ½Õ¿Õ¡Õ¶",
    	GS: "ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ ÕÕ¸ÖÕ»Õ«Õ¡ Ö ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ ÕÕ¥Õ¶Õ¤Õ¾Õ«Õ¹ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	GT: "Ô³Õ¾Õ¡Õ¿Õ¥Õ´Õ¡Õ¬Õ¡",
    	GU: "Ô³Õ¸ÖÕ¡Õ´",
    	GW: "Ô³Õ¾Õ«Õ¶Õ¥Õ¡-Ô²Õ«Õ½Õ½Õ¡Õ¸Ö",
    	GY: "Ô³Õ¡ÕµÕ¡Õ¶Õ¡",
    	HK: "ÕÕ¸Õ¶Õ¯Õ¸Õ¶Õ£Õ« ÕÕÕ",
    	HM: "ÕÕ¥ÖÕ¤ Õ¯Õ²Õ¦Õ« Ö ÕÕ¡Õ¯Ô´Õ¸Õ¶Õ¡Õ¬Õ¤Õ« Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	HN: "ÕÕ¸Õ¶Õ¤Õ¸ÖÖÕ¡Õ½",
    	HR: "Ô½Õ¸ÖÕ¾Õ¡Õ©Õ«Õ¡",
    	HT: "ÕÕ¡ÕµÕ«Õ©Õ«",
    	HU: "ÕÕ¸ÖÕ¶Õ£Õ¡ÖÕ«Õ¡",
    	ID: "Ô»Õ¶Õ¤Õ¸Õ¶Õ¥Õ¦Õ«Õ¡",
    	IE: "Ô»Õ¼Õ¬Õ¡Õ¶Õ¤Õ«Õ¡",
    	IL: "Ô»Õ½ÖÕ¡ÕµÕ¥Õ¬",
    	IM: "ÕÕ¥Õ¶ Õ¯Õ²Õ¦Õ«",
    	IN: "ÕÕ¶Õ¤Õ¯Õ¡Õ½Õ¿Õ¡Õ¶",
    	IO: "Ô²ÖÕ«Õ¿Õ¡Õ¶Õ¡Õ¯Õ¡Õ¶ ÕÕ¡ÖÕ¡Õ®Ö ÕÕ¶Õ¤Õ¯Õ¡Õ¯Õ¡Õ¶ ÕÕ¾Õ¯Õ«Õ¡Õ¶Õ¸Õ½Õ¸ÖÕ´",
    	IQ: "Ô»ÖÕ¡Ö",
    	IR: "Ô»ÖÕ¡Õ¶",
    	IS: "Ô»Õ½Õ¬Õ¡Õ¶Õ¤Õ«Õ¡",
    	IT: "Ô»Õ¿Õ¡Õ¬Õ«Õ¡",
    	JE: "ÕÕ¥ÖÕ½Õ«",
    	JM: "ÕÕ¡Õ´Õ¡ÕµÕ¯Õ¡",
    	JO: "ÕÕ¸ÖÕ¤Õ¡Õ¶Õ¡Õ¶",
    	JP: "ÕÕ¡ÕºÕ¸Õ¶Õ«Õ¡",
    	KE: "ÕÕ¥Õ¶Õ«Õ¡",
    	KG: "ÕÖÕ²Õ¦Õ½Õ¿Õ¡Õ¶",
    	KH: "Ô¿Õ¡Õ´Õ¢Õ¸Õ»Õ¡",
    	KI: "Ô¿Õ«ÖÕ«Õ¢Õ¡Õ¿Õ«",
    	KM: "Ô¿Õ¸Õ´Õ¸ÖÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	KN: "ÕÕ¥Õ¶Õ¿ ÕÕ«Õ¿Õ½ Ö ÕÖÕ«Õ½",
    	KP: "ÕÕµÕ¸ÖÕ½Õ«Õ½Õ¡ÕµÕ«Õ¶ Ô¿Õ¸ÖÕ¥Õ¡",
    	KR: "ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ Ô¿Õ¸ÖÕ¥Õ¡",
    	KW: "ÕÕ¸ÖÕ¾Õ¥ÕµÕ©",
    	KY: "Ô¿Õ¡ÕµÕ´Õ¡Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	KZ: "ÕÕ¡Õ¦Õ¡Õ­Õ½Õ¿Õ¡Õ¶",
    	LA: "Ô¼Õ¡Õ¸Õ½",
    	LB: "Ô¼Õ«Õ¢Õ¡Õ¶Õ¡Õ¶",
    	LC: "ÕÕ¥Õ¶Õ© Ô¼ÕµÕ¸ÖÕ½Õ«Õ¡",
    	LI: "Ô¼Õ«Õ­Õ¿Õ¥Õ¶Õ·Õ¿Õ¥ÕµÕ¶",
    	LK: "ÕÖÕ« Ô¼Õ¡Õ¶Õ¯Õ¡",
    	LR: "Ô¼Õ«Õ¢Õ¥ÖÕ«Õ¡",
    	LS: "Ô¼Õ¥Õ½Õ¸Õ¿Õ¸",
    	LT: "Ô¼Õ«Õ¿Õ¾Õ¡",
    	LU: "Ô¼ÕµÕ¸ÖÖÕ½Õ¥Õ´Õ¢Õ¸ÖÖÕ£",
    	LV: "Ô¼Õ¡Õ¿Õ¾Õ«Õ¡",
    	LY: "Ô¼Õ«Õ¢Õ«Õ¡",
    	MA: "ÕÕ¡ÖÕ¸Õ¯Õ¯Õ¸",
    	MC: "ÕÕ¸Õ¶Õ¡Õ¯Õ¸",
    	MD: "ÕÕ¸Õ¬Õ¤Õ¸Õ¾Õ¡",
    	ME: "ÕÕ¥Õ¼Õ¶Õ¸Õ£Õ¸ÖÕ«Õ¡",
    	MF: "ÕÕ¥Õ¶ ÕÕ¡ÖÕ¿Õ¥Õ¶",
    	MG: "ÕÕ¡Õ¤Õ¡Õ£Õ¡Õ½Õ¯Õ¡Ö",
    	MH: "ÕÕ¡ÖÕ·Õ¡Õ¬ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	MK: "ÕÕ¡Õ¯Õ¥Õ¤Õ¸Õ¶Õ«Õ¡",
    	ML: "ÕÕ¡Õ¬Õ«",
    	MM: "ÕÕµÕ¡Õ¶Õ´Õ¡ (Ô²Õ«ÖÕ´Õ¡)",
    	MN: "ÕÕ¸Õ¶Õ²Õ¸Õ¬Õ«Õ¡",
    	MO: "ÕÕ«Õ¶Õ¡Õ½Õ¿Õ¡Õ¶Õ« ÕÕ¡Õ¯Õ¡Õ¸ ÕÕÕ",
    	MP: "ÕÕµÕ¸ÖÕ½Õ«Õ½Õ¡ÕµÕ«Õ¶ ÕÕ¡ÖÕ«Õ¡Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	MQ: "ÕÕ¡ÖÕ¿Õ«Õ¶Õ«Õ¯Õ¡",
    	MR: "ÕÕ¡Õ¾ÖÕ«Õ¿Õ¡Õ¶Õ«Õ¡",
    	MS: "ÕÕ¸Õ¶Õ½Õ¥Õ¼Õ¡Õ¿",
    	MT: "ÕÕ¡Õ¬Õ©Õ¡",
    	MU: "ÕÕ¡Õ¾ÖÕ«Õ¯Õ«Õ¸Õ½",
    	MV: "ÕÕ¡Õ¬Õ¤Õ«Õ¾Õ¶Õ¥Ö",
    	MW: "ÕÕ¡Õ¬Õ¡Õ¾Õ«",
    	MX: "ÕÕ¥ÖÕ½Õ«Õ¯Õ¡",
    	MY: "ÕÕ¡Õ¬Õ¡ÕµÕ¦Õ«Õ¡",
    	MZ: "ÕÕ¸Õ¦Õ¡Õ´Õ¢Õ«Õ¯",
    	NA: "ÕÕ¡Õ´Õ«Õ¢Õ«Õ¡",
    	NC: "ÕÕ¸Ö Ô¿Õ¡Õ¬Õ¥Õ¤Õ¸Õ¶Õ«Õ¡",
    	NE: "ÕÕ«Õ£Õ¥Ö",
    	NF: "ÕÕ¸ÖÖÕ¸Õ¬Õ¯ Õ¯Õ²Õ¦Õ«",
    	NG: "ÕÕ«Õ£Õ¥ÖÕ«Õ¡",
    	NI: "ÕÕ«Õ¯Õ¡ÖÕ¡Õ£Õ¸ÖÕ¡",
    	NL: "ÕÕ«Õ¤Õ¥Õ¼Õ¬Õ¡Õ¶Õ¤Õ¶Õ¥Ö",
    	NO: "ÕÕ¸ÖÕ¾Õ¥Õ£Õ«Õ¡",
    	NP: "ÕÕ¥ÕºÕ¡Õ¬",
    	NR: "ÕÕ¡Õ¸ÖÖÕ¸Ö",
    	NU: "ÕÕ«Õ¸ÖÕ¥",
    	NZ: "ÕÕ¸Ö Ô¶Õ¥Õ¬Õ¡Õ¶Õ¤Õ«Õ¡",
    	OM: "ÕÕ´Õ¡Õ¶",
    	PA: "ÕÕ¡Õ¶Õ¡Õ´Õ¡",
    	PE: "ÕÕ¥ÖÕ¸Ö",
    	PF: "ÕÖÕ¡Õ¶Õ½Õ«Õ¡Õ¯Õ¡Õ¶ ÕÕ¸Õ¬Õ«Õ¶Õ¥Õ¦Õ«Õ¡",
    	PG: "ÕÕ¡ÕºÕ¸ÖÕ¡ ÕÕ¸Ö Ô³Õ¾Õ«Õ¶Õ¥Õ¡",
    	PH: "ÕÕ«Õ¬Õ«ÕºÕ«Õ¶Õ¶Õ¥Ö",
    	PK: "ÕÕ¡Õ¯Õ«Õ½Õ¿Õ¡Õ¶",
    	PL: "Ô¼Õ¥Õ°Õ¡Õ½Õ¿Õ¡Õ¶",
    	PM: "ÕÕ¥Õ¶ ÕÕ«Õ¥Õ¼ Ö ÕÕ«ÖÕ¥Õ¬Õ¸Õ¶",
    	PN: "ÕÕ«Õ¿Õ¯Õ¥Õ¼Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	PR: "ÕÕ¸ÖÕ¥ÖÕ¿Õ¸ ÕÕ«Õ¯Õ¸",
    	PS: "ÕÕ¡Õ²Õ¥Õ½Õ¿Õ«Õ¶ÕµÕ¡Õ¶ Õ¿Õ¡ÖÕ¡Õ®ÖÕ¶Õ¥Ö",
    	PT: "ÕÕ¸ÖÕ¿Õ¸ÖÕ£Õ¡Õ¬Õ«Õ¡",
    	PW: "ÕÕ¡Õ¬Õ¡Õ¸Ö",
    	PY: "ÕÕ¡ÖÕ¡Õ£Õ¾Õ¡Õµ",
    	QA: "Ô¿Õ¡Õ¿Õ¡Ö",
    	RE: "ÕÕ¥ÕµÕ¸ÖÕ¶Õ«Õ¸Õ¶",
    	RO: "ÕÕ¸ÖÕ´Õ«Õ¶Õ«Õ¡",
    	RS: "ÕÕ¥ÖÕ¢Õ«Õ¡",
    	RU: "ÕÕ¸ÖÕ½Õ¡Õ½Õ¿Õ¡Õ¶",
    	RW: "ÕÕ¸ÖÕ¡Õ¶Õ¤Õ¡",
    	SA: "ÕÕ¡Õ¸ÖÕ¤ÕµÕ¡Õ¶ Ô±ÖÕ¡Õ¢Õ«Õ¡",
    	SB: "ÕÕ¸Õ²Õ¸Õ´Õ¸Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	SC: "ÕÕ¥ÕµÕ·Õ¥Õ¬Õ¶Õ¥Ö",
    	SD: "ÕÕ¸ÖÕ¤Õ¡Õ¶",
    	SE: "ÕÕ¾Õ¥Õ¤Õ«Õ¡",
    	SG: "ÕÕ«Õ¶Õ£Õ¡ÕºÕ¸ÖÖ",
    	SH: "ÕÕ¸ÖÖÕ¢ ÕÕ¥Õ²Õ«Õ¶Õ¥Õ« Õ¯Õ²Õ¦Õ«",
    	SI: "ÕÕ¬Õ¸Õ¾Õ¥Õ¶Õ«Õ¡",
    	SJ: "ÕÕ¾Õ¡Õ¬Õ¢Õ¡ÖÕ¤ Ö ÕÕ¡Õ¶ ÕÕ¡ÕµÕ¥Õ¶",
    	SK: "ÕÕ¬Õ¸Õ¾Õ¡Õ¯Õ«Õ¡",
    	SL: "ÕÕ«Õ¥Õ¼Õ¡ Ô¼Õ¥Õ¸Õ¶Õ¥",
    	SM: "ÕÕ¡Õ¶ ÕÕ¡ÖÕ«Õ¶Õ¸",
    	SN: "ÕÕ¥Õ¶Õ¥Õ£Õ¡Õ¬",
    	SO: "ÕÕ¸Õ´Õ¡Õ¬Õ«",
    	SR: "ÕÕ¸ÖÖÕ«Õ¶Õ¡Õ´",
    	SS: "ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ ÕÕ¸ÖÕ¤Õ¡Õ¶",
    	ST: "ÕÕ¡Õ¶ ÕÕ¸Õ´Õ¥ Ö ÕÖÕ«Õ¶Õ½Õ«ÕºÕ«",
    	SV: "ÕÕ¡Õ¬Õ¾Õ¡Õ¤Õ¸Ö",
    	SX: "ÕÕ«Õ¶Õ¿ ÕÕ¡ÖÕ¿Õ¥Õ¶",
    	SY: "ÕÕ«ÖÕ«Õ¡",
    	SZ: "ÕÕ¾Õ¡Õ¦Õ«Õ¬Õ¥Õ¶Õ¤",
    	TC: "Ô¹Õ¨ÖÖÕ½ Ö Ô¿Õ¡ÕµÕ¯Õ¸Õ½ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	TD: "ÕÕ¡Õ¤",
    	TF: "ÕÖÕ¡Õ¶Õ½Õ«Õ¡Õ¯Õ¡Õ¶ ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ ÕÕ¡ÖÕ¡Õ®ÖÕ¶Õ¥Ö",
    	TG: "ÕÕ¸Õ£Õ¸",
    	TH: "Ô¹Õ¡ÕµÕ¬Õ¡Õ¶Õ¤",
    	TJ: "ÕÕ¡Õ»Õ«Õ¯Õ½Õ¿Õ¡Õ¶",
    	TK: "ÕÕ¸Õ¯Õ¥Õ¬Õ¡Õ¸Ö",
    	TL: "Ô¹Õ«Õ´Õ¸Ö Ô¼Õ¥Õ·Õ¿Õ«",
    	TM: "Ô¹Õ¸ÖÖÖÕ´Õ¥Õ¶Õ½Õ¿Õ¡Õ¶",
    	TN: "Ô¹Õ¸ÖÕ¶Õ«Õ½",
    	TO: "ÕÕ¸Õ¶Õ£Õ¡",
    	TR: "Ô¹Õ¸ÖÖÖÕ«Õ¡",
    	TT: "ÕÖÕ«Õ¶Õ«Õ¤Õ¡Õ¤ Ö ÕÕ¸Õ¢Õ¡Õ£Õ¸",
    	TV: "ÕÕ¸ÖÕ¾Õ¡Õ¬Õ¸Ö",
    	TW: "Ô¹Õ¡ÕµÕ¾Õ¡Õ¶",
    	TZ: "ÕÕ¡Õ¶Õ¦Õ¡Õ¶Õ«Õ¡",
    	UA: "ÕÖÕ¯ÖÕ¡Õ«Õ¶Õ¡",
    	UG: "ÕÖÕ£Õ¡Õ¶Õ¤Õ¡",
    	UM: "Ô±ÖÕ¿Õ¡ÖÕ«Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö (Ô±ÕÕ)",
    	US: "ÕÕ«Õ¡ÖÕµÕ¡Õ¬ ÕÕ¡Õ°Õ¡Õ¶Õ£Õ¶Õ¥Ö",
    	UY: "ÕÖÖÕ¸ÖÕ£Õ¾Õ¡Õµ",
    	UZ: "ÕÖÕ¦Õ¢Õ¥Õ¯Õ½Õ¿Õ¡Õ¶",
    	VA: "ÕÕ¡Õ¿Õ«Õ¯Õ¡Õ¶",
    	VC: "ÕÕ¥Õ¶Õ© ÕÕ«Õ¶Õ½Õ¥Õ¶Õ© Ö Ô³ÖÕ¥Õ¶Õ¡Õ¤Õ«Õ¶Õ¶Õ¥Ö",
    	VE: "ÕÕ¥Õ¶Õ¥Õ½Õ¸ÖÕ¥Õ¬Õ¡",
    	VG: "Ô²ÖÕ«Õ¿Õ¡Õ¶Õ¡Õ¯Õ¡Õ¶ ÕÕ«ÖÕ»Õ«Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	VI: "Ô±ÕÕ ÕÕ«ÖÕ»Õ«Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö",
    	VN: "ÕÕ«Õ¥Õ¿Õ¶Õ¡Õ´",
    	VU: "ÕÕ¡Õ¶Õ¸ÖÕ¡Õ¿Õ¸Ö",
    	WF: "ÕÖÕ¸Õ¬Õ«Õ½ Ö ÕÕ¸ÖÕ¿Õ¸ÖÕ¶Õ¡",
    	WS: "ÕÕ¡Õ´Õ¸Õ¡",
    	XK: "Ô¿Õ¸Õ½Õ¸Õ¾Õ¸",
    	YE: "ÔµÕ´Õ¥Õ¶",
    	YT: "ÕÕ¡ÕµÕ¸Õ¿",
    	ZA: "ÕÕ¡ÖÕ¡Õ¾Õ¡ÖÖÕ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶",
    	ZM: "Ô¶Õ¡Õ´Õ¢Õ«Õ¡",
    	ZW: "Ô¶Õ«Õ´Õ¢Õ¡Õ¢Õ¾Õ¥"
    };
    var hy = {
    	locale: locale$j,
    	countries: countries$j
    };

    var hy$1 = /*#__PURE__*/Object.freeze({
        locale: locale$j,
        countries: countries$j,
        default: hy
    });

    var locale$k = "id";
    var countries$k = {
    	AF: "Afghanistan",
    	AL: "Albania",
    	DZ: "Algeria",
    	AS: "Amerika Serikat",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarctica",
    	AG: "Antigua dan Barbuda",
    	AR: "Argentina",
    	AM: "Armenia",
    	AW: "Aruba",
    	AU: "Australia",
    	AT: "Austria",
    	AZ: "Azerbaijan",
    	BS: "Bahama",
    	BH: "Bahrain",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BY: "Belarusia",
    	BE: "Belgia",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "Bolivia",
    	BA: "Bosnia dan Herzegovina",
    	BW: "Botswana",
    	BV: "Kepulauan Bouvet",
    	BR: "Brasil",
    	IO: "Teritori Samudra Hindia Britania",
    	BN: "Brunei Darussalam",
    	BG: "Bulgaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Kamboja",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "Tanjung Verde",
    	KY: "Kepulauan Cayman",
    	CF: "Afrika Tengah",
    	TD: "Chad",
    	CL: "Chile",
    	CN: "China",
    	CX: "Pulau Natal",
    	CC: "Kepulauan Cocos (Keeling)",
    	CO: "Kolombia",
    	KM: "Komoro",
    	CG: "Kongo",
    	CD: "Republik Demokratik Kongo",
    	CK: "Kepulauan Cook",
    	CR: "Kosta Rika",
    	CI: "Pantai Gading",
    	HR: "Kroasia",
    	CU: "Kuba",
    	CY: "Siprus",
    	CZ: "Republik Ceko",
    	DK: "Denmark",
    	DJ: "Djibouti",
    	DM: "Dominika",
    	DO: "Republik Dominika",
    	EC: "Ekuador",
    	EG: "Mesir",
    	SV: "El Salvador",
    	GQ: "Guinea Khatulistiwa",
    	ER: "Eritrea",
    	EE: "Estonia",
    	ET: "Ethiopia",
    	FK: "Kepulauan Falkland(Malvinas)",
    	FO: "Kepulauan Faroe",
    	FJ: "Fiji",
    	FI: "Finlandia",
    	FR: "Perancis",
    	GF: "Guyana Perancis",
    	PF: "Polinesia Perancis",
    	TF: "Antartika Perancis",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "Georgia",
    	DE: "Jerman",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "Yunani",
    	GL: "Greenland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatamala",
    	GN: "Guinea",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HT: "Haiti",
    	HM: "Pulau Heard dan Kepulauan McDonald",
    	VA: "Vatikan",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "Hungaria",
    	IS: "Islandia",
    	IN: "India",
    	ID: "Indonesia",
    	IR: "Iran",
    	IQ: "Irak",
    	IE: "Irlandia",
    	IL: "Israel",
    	IT: "Italia",
    	JM: "Jamaika",
    	JP: "Jepang",
    	JO: "Yordania",
    	KZ: "Kazakhstan",
    	KE: "Kenya",
    	KI: "Kiribati",
    	KP: "Korea Utara",
    	KR: "Korea Selatan",
    	KW: "Kuwait",
    	KG: "Kyrgyzstan",
    	LA: "Laos",
    	LV: "Latvia",
    	LB: "Lebanon",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "Libya",
    	LI: "Liechtenstein",
    	LT: "Lithuania",
    	LU: "Luxemburg",
    	MO: "Makau",
    	MK: "Makedonia",
    	MG: "Madagaskar",
    	MW: "Malawi",
    	MY: "Malaysia",
    	MV: "Maldives",
    	ML: "Mali",
    	MT: "Malta",
    	MH: "Kepulauan Marshall",
    	MQ: "Martinik",
    	MR: "Mauritania",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Meksiko",
    	FM: "Federasi Mikronesia",
    	MD: "Moldova",
    	MC: "Monako",
    	MN: "Mongolia",
    	MS: "Montserrat",
    	MA: "Moroko",
    	MZ: "Mozambik",
    	MM: "Myanmar",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "Belanda",
    	NC: "Kaledonia Baru",
    	NZ: "Selandia Baru",
    	NI: "Nikaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Kepulauan Norfolk",
    	MP: "Kepulauan Mariana Utara",
    	NO: "Norwegia",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestina",
    	PA: "Panama",
    	PG: "Papua Nugini",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "Filipina",
    	PN: "Pitcairn",
    	PL: "Polandia",
    	PT: "Portugal",
    	PR: "Puerto Riko",
    	QA: "Qatar",
    	RE: "Reunion",
    	RO: "Rumania",
    	RU: "Rusia",
    	RW: "Rwanda",
    	SH: "Saint Helena",
    	KN: "Saint Kitts dan Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint Pierre dan Miquelon",
    	VC: "Saint Vincent dan the Grenadines",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "Sao Tome dan Principe",
    	SA: "Arab Saudi",
    	SN: "Senegal",
    	SC: "Seychelles",
    	SL: "Sierra Leone",
    	SG: "Singapura",
    	SK: "Slovakia",
    	SI: "Slovenia",
    	SB: "Kepulauan Solomon",
    	SO: "Somalia",
    	ZA: "Afrika Selatan",
    	GS: "Georgia Selatan dan Kepulauan Sandwich Selatan",
    	ES: "Spanyol",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	SR: "Suriname",
    	SJ: "Svalbard dan Jan Mayen",
    	SZ: "Swaziland",
    	SE: "Sweden",
    	CH: "Swiss",
    	SY: "Suriah",
    	TW: "Taiwan",
    	TJ: "Tajikistan",
    	TZ: "Tanzania",
    	TH: "Thailand",
    	TL: "Timor-Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad dan Tobago",
    	TN: "Tunisia",
    	TR: "Turki",
    	TM: "Turkmenistan",
    	TC: "Turks dan Caicos Islands",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraina",
    	AE: "Uni Emirat Arab",
    	GB: "Britania Raya",
    	US: "Amerika Serikat",
    	UM: "United States Minor Outlying Islands",
    	UY: "Uruguay",
    	UZ: "Uzbekistan",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Viet Nam",
    	VG: "Virgin Islands, British",
    	VI: "Virgin Islands, U.S.",
    	WF: "Wallis and Futuna",
    	EH: "Sahara Barat",
    	YE: "Yaman",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Ãland Islands",
    	BQ: "Bonaire, Sint Eustatius and Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Isle of Man",
    	JE: "Jersey",
    	ME: "Montenegro",
    	BL: "Saint BarthÃ©lemy",
    	MF: "Saint Martin (French part)",
    	RS: "Serbia",
    	SX: "Sint Maarten (Dutch part)",
    	SS: "Sudan Selatan",
    	XK: "Kosovo"
    };
    var id$1 = {
    	locale: locale$k,
    	countries: countries$k
    };

    var id$2 = /*#__PURE__*/Object.freeze({
        locale: locale$k,
        countries: countries$k,
        default: id$1
    });

    var locale$l = "it";
    var countries$l = {
    	AD: "Andorra",
    	AE: "Emirati Arabi Uniti",
    	AF: "Afghanistan",
    	AG: "Antigua e Barbuda",
    	AI: "Anguilla",
    	AL: "Albania",
    	AM: "Armenia",
    	AO: "Angola",
    	AQ: "Antartide",
    	AR: "Argentina",
    	AS: "Samoa Americane",
    	AT: "Austria",
    	AU: "Australia",
    	AW: "Aruba",
    	AX: "Isole Ãland",
    	AZ: "Azerbaigian",
    	BA: "Bosnia ed Erzegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgio",
    	BF: "Burkina Faso",
    	BG: "Bulgaria",
    	BH: "Bahrain",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint-BarthÃ©lemy",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivia",
    	BQ: "Isole BES",
    	BR: "Brasile",
    	BS: "Bahamas",
    	BT: "Bhutan",
    	BV: "Isola Bouvet",
    	BW: "Botswana",
    	BY: "Bielorussia",
    	BZ: "Belize",
    	CA: "Canada",
    	CC: "Isole Cocos e Keeling",
    	CD: "Repubblica Democratica del Congo",
    	CF: "Repubblica Centrafricana",
    	CG: "Repubblica del Congo",
    	CH: "Svizzera",
    	CI: "Costa d'Avorio",
    	CK: "Isole Cook",
    	CL: "Cile",
    	CM: "Camerun",
    	CN: "Cina",
    	CO: "Colombia",
    	CR: "Costa Rica",
    	CU: "Cuba",
    	CV: "Capo Verde",
    	CW: "CuraÃ§ao",
    	CX: "Isola del Natale",
    	CY: "Cipro",
    	CZ: "Repubblica Ceca",
    	DE: "Germania",
    	DJ: "Gibuti",
    	DK: "Danimarca",
    	DM: "Dominica",
    	DO: "Repubblica Dominicana",
    	DZ: "Algeria",
    	EC: "Ecuador",
    	EE: "Estonia",
    	EG: "Egitto",
    	EH: "Sahara Occidentale",
    	ER: "Eritrea",
    	ES: "Spagna",
    	ET: "Etiopia",
    	FI: "Finlandia",
    	FJ: "Figi",
    	FK: "Isole Falkland",
    	FM: "Stati Federati di Micronesia",
    	FO: "Isole FÃ¦r Ãer",
    	FR: "Francia",
    	GA: "Gabon",
    	GB: "Regno Unito",
    	GD: "Grenada",
    	GE: "Georgia",
    	GF: "Guyana Francese",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "Gibilterra",
    	GL: "Groenlandia",
    	GM: "Gambia",
    	GN: "Guinea",
    	GP: "Guadalupa",
    	GQ: "Guinea Equatoriale",
    	GR: "Grecia",
    	GS: "Georgia del Sud e isole Sandwich meridionali",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HK: "Hong Kong",
    	HM: "Isole Heard e McDonald",
    	HN: "Honduras",
    	HR: "Croazia",
    	HT: "Haiti",
    	HU: "Ungheria",
    	ID: "Indonesia",
    	IE: "Irlanda",
    	IL: "Israele",
    	IM: "Isola di Man",
    	IN: "India",
    	IO: "Territori Britannici dell'Oceano Indiano",
    	IQ: "Iraq",
    	IR: "Iran",
    	IS: "Islanda",
    	IT: "Italia",
    	JE: "Jersey",
    	JM: "Giamaica",
    	JO: "Giordania",
    	JP: "Giappone",
    	KE: "Kenya",
    	KG: "Kirghizistan",
    	KH: "Cambogia",
    	KI: "Kiribati",
    	KM: "Comore",
    	KN: "Saint Kitts e Nevis",
    	KP: "Corea del Nord",
    	KR: "Corea del Sud",
    	KW: "Kuwait",
    	KY: "Isole Cayman",
    	KZ: "Kazakistan",
    	LA: "Laos",
    	LB: "Libano",
    	LC: "Santa Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberia",
    	LS: "Lesotho",
    	LT: "Lituania",
    	LU: "Lussemburgo",
    	LV: "Lettonia",
    	LY: "Libia",
    	MA: "Marocco",
    	MC: "Monaco",
    	MD: "Moldavia",
    	ME: "Montenegro",
    	MF: "Saint-Martin",
    	MG: "Madagascar",
    	MH: "Isole Marshall",
    	MK: "Macedonia",
    	ML: "Mali",
    	MM: "Birmania  Myanmar",
    	MN: "Mongolia",
    	MO: "Macao",
    	MP: "Isole Marianne Settentrionali",
    	MQ: "Martinica",
    	MR: "Mauritania",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldive",
    	MW: "Malawi",
    	MX: "Messico",
    	MY: "Malesia",
    	MZ: "Mozambico",
    	NA: "Namibia",
    	NC: "Nuova Caledonia",
    	NE: "Niger",
    	NF: "Isola Norfolk",
    	NG: "Nigeria",
    	NI: "Nicaragua",
    	NL: "Paesi Bassi",
    	NO: "Norvegia",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Nuova Zelanda",
    	OM: "Oman",
    	PA: "PanamÃ¡",
    	PE: "PerÃ¹",
    	PF: "Polinesia Francese",
    	PG: "Papua Nuova Guinea",
    	PH: "Filippine",
    	PK: "Pakistan",
    	PL: "Polonia",
    	PM: "Saint Pierre e Miquelon",
    	PN: "Isole Pitcairn",
    	PR: "Porto Rico",
    	PS: "Stato di Palestina",
    	PT: "Portogallo",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "Romania",
    	RS: "Serbia",
    	RU: "Russia",
    	RW: "Ruanda",
    	SA: "Arabia Saudita",
    	SB: "Isole Salomone",
    	SC: "Seychelles",
    	SD: "Sudan",
    	SE: "Svezia",
    	SG: "Singapore",
    	SH: "Sant'Elena, Isola di Ascensione e Tristan da Cunha",
    	SI: "Slovenia",
    	SJ: "Svalbard e Jan Mayen",
    	SK: "Slovacchia",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalia",
    	SR: "Suriname",
    	SS: "Sudan del Sud",
    	ST: "SÃ£o TomÃ© e PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint Maarten",
    	SY: "Siria",
    	SZ: "Swaziland",
    	TC: "Isole Turks e Caicos",
    	TD: "Ciad",
    	TF: "Territori Francesi del Sud",
    	TG: "Togo",
    	TH: "Thailandia",
    	TJ: "Tagikistan",
    	TK: "Tokelau",
    	TL: "Timor Est",
    	TM: "Turkmenistan",
    	TN: "Tunisia",
    	TO: "Tonga",
    	TR: "Turchia",
    	TT: "Trinidad e Tobago",
    	TV: "Tuvalu",
    	TW: "Repubblica di Cina",
    	TZ: "Tanzania",
    	UA: "Ucraina",
    	UG: "Uganda",
    	UM: "Isole minori esterne degli Stati Uniti",
    	US: "Stati Uniti d'America",
    	UY: "Uruguay",
    	UZ: "Uzbekistan",
    	VA: "CittÃ  del Vaticano",
    	VC: "Saint Vincent e Grenadine",
    	VE: "Venezuela",
    	VG: "Isole Vergini Britanniche",
    	VI: "Isole Vergini Americane",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis e Futuna",
    	WS: "Samoa",
    	YE: "Yemen",
    	YT: "Mayotte",
    	ZA: "Sudafrica",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var it = {
    	locale: locale$l,
    	countries: countries$l
    };

    var it$1 = /*#__PURE__*/Object.freeze({
        locale: locale$l,
        countries: countries$l,
        default: it
    });

    var locale$m = "ja";
    var countries$m = {
    	AF: "ã¢ãã¬ãã¹ã¿ã³",
    	AL: "ã¢ã«ããã¢",
    	DZ: "ã¢ã«ã¸ã§ãªã¢",
    	AS: "ã¢ã¡ãªã«é ãµã¢ã¢",
    	AD: "ã¢ã³ãã©",
    	AO: "ã¢ã³ã´ã©",
    	AI: "ã¢ã³ã®ã©",
    	AQ: "åæ¥µ",
    	AG: "ã¢ã³ãã£ã°ã¢ã»ãã¼ãã¼ã",
    	AR: "ã¢ã«ã¼ã³ãã³",
    	AM: "ã¢ã«ã¡ãã¢",
    	AW: "ã¢ã«ã",
    	AU: "ãªã¼ã¹ãã©ãªã¢",
    	AT: "ãªã¼ã¹ããªã¢",
    	AZ: "ã¢ã¼ã«ãã¤ã¸ã£ã³",
    	BS: "ããã",
    	BH: "ãã¼ã¬ã¼ã³",
    	BD: "ãã³ã°ã©ãã·ã¥",
    	BB: "ãã«ããã¹",
    	BY: "ãã©ã«ã¼ã·",
    	BE: "ãã«ã®ã¼",
    	BZ: "ããªã¼ãº",
    	BJ: "ããã³",
    	BM: "ããã¥ã¼ã",
    	BT: "ãã¼ã¿ã³",
    	BO: "ããªãã¢å¤æ°æå½",
    	BA: "ãã¹ãã¢ã»ãã«ãã§ã´ãã",
    	BW: "ããã¯ã",
    	BV: "ãã¼ãå³¶",
    	BR: "ãã©ã¸ã«",
    	IO: "ã¤ã®ãªã¹é ã¤ã³ãæ´å°å",
    	BN: "ãã«ãã¤ã»ãã«ãµã©ã¼ã ",
    	BG: "ãã«ã¬ãªã¢",
    	BF: "ãã«ã­ããã¡ã½",
    	BI: "ãã«ã³ã¸",
    	KH: "ã«ã³ãã¸ã¢",
    	CM: "ã«ã¡ã«ã¼ã³",
    	CA: "ã«ãã",
    	CV: "ã«ã¼ããã«ã",
    	KY: "ã±ã¤ãã³è«¸å³¶",
    	CF: "ä¸­å¤®ã¢ããªã«å±åå½",
    	TD: "ãã£ã",
    	CL: "ããª",
    	CN: "ä¸­è¯äººæ°å±åå½",
    	CX: "ã¯ãªã¹ãã¹å³¶",
    	CC: "ã³ã³ã¹ï¼ã­ã¼ãªã³ã°ï¼è«¸å³¶",
    	CO: "ã³ã­ã³ãã¢",
    	KM: "å°è«¸",
    	CG: "ã³ã³ã´å±åå½",
    	CD: "ã³ã³ã´æ°ä¸»å±åå½",
    	CK: "ã¯ãã¯è«¸å³¶",
    	CR: "ã³ã¹ã¿ãªã«",
    	CI: "ã³ã¼ãã¸ãã¯ã¼ã«",
    	HR: "ã¯ã­ã¢ãã¢",
    	CU: "ã­ã¥ã¼ã",
    	CY: "ã­ãã­ã¹",
    	CZ: "ãã§ã³",
    	DK: "ãã³ãã¼ã¯",
    	DJ: "ã¸ãã",
    	DM: "ãããã«å½",
    	DO: "ãããã«å±åå½",
    	EC: "ã¨ã¯ã¢ãã«",
    	EG: "ã¨ã¸ãã",
    	SV: "ã¨ã«ãµã«ããã«",
    	GQ: "èµ¤éã®ãã¢",
    	ER: "ã¨ãªããªã¢",
    	EE: "ã¨ã¹ããã¢",
    	ET: "ã¨ããªãã¢",
    	FK: "ãã©ã¼ã¯ã©ã³ãï¼ãã«ããã¹ï¼è«¸å³¶",
    	FO: "ãã§ã­ã¼è«¸å³¶",
    	FJ: "ãã£ã¸ã¼",
    	FI: "ãã£ã³ã©ã³ã",
    	FR: "ãã©ã³ã¹",
    	GF: "ãã©ã³ã¹é ã®ã¢ã",
    	PF: "ãã©ã³ã¹é ããªãã·ã¢",
    	TF: "ãã©ã³ã¹é åæ¹ã»åæ¥µå°å",
    	GA: "ã¬ãã³",
    	GM: "ã¬ã³ãã¢",
    	GE: "ã¸ã§ã¼ã¸ã¢",
    	DE: "ãã¤ã",
    	GH: "ã¬ã¼ã",
    	GI: "ã¸ãã©ã«ã¿ã«",
    	GR: "ã®ãªã·ã£",
    	GL: "ã°ãªã¼ã³ã©ã³ã",
    	GD: "ã°ã¬ãã",
    	GP: "ã°ã¢ãã«ã¼ã",
    	GU: "ã°ã¢ã ",
    	GT: "ã°ã¢ããã©",
    	GN: "ã®ãã¢",
    	GW: "ã®ãã¢ããµã¦",
    	GY: "ã¬ã¤ã¢ã",
    	HT: "ãã¤ã",
    	HM: "ãã¼ãå³¶ã¨ãã¯ããã«ãè«¸å³¶",
    	VA: "ããã«ã³å¸å½",
    	HN: "ãã³ã¸ã¥ã©ã¹",
    	HK: "é¦æ¸¯",
    	HU: "ãã³ã¬ãªã¼",
    	IS: "ã¢ã¤ã¹ã©ã³ã",
    	IN: "ã¤ã³ã",
    	ID: "ã¤ã³ããã·ã¢",
    	IR: "ã¤ã©ã³ã»ã¤ã¹ã©ã å±åå½",
    	IQ: "ã¤ã©ã¯",
    	IE: "ã¢ã¤ã«ã©ã³ã",
    	IL: "ã¤ã¹ã©ã¨ã«",
    	IT: "ã¤ã¿ãªã¢",
    	JM: "ã¸ã£ãã¤ã«",
    	JP: "æ¥æ¬",
    	JO: "ã¨ã«ãã³",
    	KZ: "ã«ã¶ãã¹ã¿ã³",
    	KE: "ã±ãã¢",
    	KI: "ã­ãªãã¹",
    	KP: "æé®®æ°ä¸»ä¸»ç¾©äººæ°å±åå½",
    	KR: "å¤§éæ°å½",
    	KW: "ã¯ã¦ã§ã¼ã",
    	KG: "ã­ã«ã®ã¹",
    	LA: "ã©ãªã¹äººæ°æ°ä¸»å±åå½",
    	LV: "ã©ããã¢",
    	LB: "ã¬ããã³",
    	LS: "ã¬ã½ã",
    	LR: "ãªããªã¢",
    	LY: "ãªãã¢",
    	LI: "ãªããã³ã·ã¥ã¿ã¤ã³",
    	LT: "ãªãã¢ãã¢",
    	LU: "ã«ã¯ã»ã³ãã«ã¯",
    	MO: "ãã«ãª",
    	MK: "ãã±ããã¢æ§ã¦ã¼ã´ã¹ã©ãã¢å±åå½",
    	MG: "ããã¬ã¹ã«ã«",
    	MW: "ãã©ã¦ã¤",
    	MY: "ãã¬ã¼ã·ã¢",
    	MV: "ã¢ã«ãã£ã",
    	ML: "ããª",
    	MT: "ãã«ã¿",
    	MH: "ãã¼ã·ã£ã«è«¸å³¶",
    	MQ: "ãã«ãã£ãã¼ã¯",
    	MR: "ã¢ã¼ãªã¿ãã¢",
    	MU: "ã¢ã¼ãªã·ã£ã¹",
    	YT: "ãã¨ãã",
    	MX: "ã¡ã­ã·ã³",
    	FM: "ãã¯ã­ãã·ã¢é£é¦",
    	MD: "ã¢ã«ããå±åå½",
    	MC: "ã¢ãã³",
    	MN: "ã¢ã³ã´ã«",
    	MS: "ã¢ã³ãã»ã©ã",
    	MA: "ã¢ã­ãã³",
    	MZ: "ã¢ã¶ã³ãã¼ã¯",
    	MM: "ãã£ã³ãã¼",
    	NA: "ãããã¢",
    	NR: "ãã¦ã«",
    	NP: "ããã¼ã«",
    	NL: "ãªã©ã³ã",
    	NC: "ãã¥ã¼ã«ã¬ããã¢",
    	NZ: "ãã¥ã¼ã¸ã¼ã©ã³ã",
    	NI: "ãã«ã©ã°ã¢",
    	NE: "ãã¸ã§ã¼ã«",
    	NG: "ãã¤ã¸ã§ãªã¢",
    	NU: "ãã¦ã¨",
    	NF: "ãã¼ãã©ã¼ã¯å³¶",
    	MP: "åããªã¢ãè«¸å³¶",
    	NO: "ãã«ã¦ã§ã¼",
    	OM: "ãªãã¼ã³",
    	PK: "ãã­ã¹ã¿ã³",
    	PW: "ãã©ãª",
    	PS: "ãã¬ã¹ãã",
    	PA: "ããã",
    	PG: "ããã¢ãã¥ã¼ã®ãã¢",
    	PY: "ãã©ã°ã¢ã¤",
    	PE: "ãã«ã¼",
    	PH: "ãã£ãªãã³",
    	PN: "ããã±ã¢ã³",
    	PL: "ãã¼ã©ã³ã",
    	PT: "ãã«ãã¬ã«",
    	PR: "ãã¨ã«ããªã³",
    	QA: "ã«ã¿ã¼ã«",
    	RE: "ã¬ã¦ããªã³",
    	RO: "ã«ã¼ããã¢",
    	RU: "ã­ã·ã¢é£é¦",
    	RW: "ã«ã¯ã³ã",
    	SH: "ã»ã³ããã¬ãã»ã¢ã»ã³ã·ã§ã³ããã³ããªã¹ã¿ã³ãã¯ã¼ãã£",
    	KN: "ã»ã³ãã¯ãªã¹ããã¡ã¼ã»ãã¤ãã¹",
    	LC: "ã»ã³ãã«ã·ã¢",
    	PM: "ãµã³ãã¨ã¼ã«å³¶ã»ãã¯ã­ã³å³¶",
    	VC: "ã»ã³ããã³ã»ã³ãããã³ã°ã¬ããã£ã¼ã³è«¸å³¶",
    	WS: "ãµã¢ã¢",
    	SM: "ãµã³ããªã",
    	ST: "ãµã³ãã¡ã»ããªã³ã·ã",
    	SA: "ãµã¦ã¸ã¢ã©ãã¢",
    	SN: "ã»ãã¬ã«",
    	SC: "ã»ã¼ã·ã§ã«",
    	SL: "ã·ã¨ã©ã¬ãªã",
    	SG: "ã·ã³ã¬ãã¼ã«",
    	SK: "ã¹ã­ãã­ã¢",
    	SI: "ã¹ã­ããã¢",
    	SB: "ã½ã­ã¢ã³è«¸å³¶",
    	SO: "ã½ããªã¢",
    	ZA: "åã¢ããªã«",
    	GS: "ãµã¦ã¹ã¸ã§ã¼ã¸ã¢ã»ãµã¦ã¹ãµã³ãã¦ã£ããè«¸å³¶",
    	ES: "ã¹ãã¤ã³",
    	LK: "ã¹ãªã©ã³ã«",
    	SD: "ã¹ã¼ãã³",
    	SR: "ã¹ãªãã ",
    	SJ: "ã¹ã´ã¡ã¼ã«ãã«è«¸å³¶ããã³ã¤ã³ãã¤ã¨ã³å³¶",
    	SZ: "ã¹ã¯ã¸ã©ã³ã",
    	SE: "ã¹ã¦ã§ã¼ãã³",
    	CH: "ã¹ã¤ã¹",
    	SY: "ã·ãªã¢ã»ã¢ã©ãå±åå½",
    	TW: "å°æ¹¾",
    	TJ: "ã¿ã¸ã­ã¹ã¿ã³",
    	TZ: "ã¿ã³ã¶ãã¢",
    	TH: "ã¿ã¤",
    	TL: "æ±ãã£ã¢ã¼ã«",
    	TG: "ãã¼ã´",
    	TK: "ãã±ã©ã¦",
    	TO: "ãã³ã¬",
    	TT: "ããªããã¼ãã»ããã´",
    	TN: "ãã¥ãã¸ã¢",
    	TR: "ãã«ã³",
    	TM: "ãã«ã¯ã¡ãã¹ã¿ã³",
    	TC: "ã¿ã¼ã¯ã¹ã»ã«ã¤ã³ã¹è«¸å³¶",
    	TV: "ããã«",
    	UG: "ã¦ã¬ã³ã",
    	UA: "ã¦ã¯ã©ã¤ã",
    	AE: "ã¢ã©ãé¦é·å½é£é¦",
    	GB: "ã¤ã®ãªã¹",
    	US: "ã¢ã¡ãªã«åè¡å½",
    	UM: "åè¡å½é æå°é¢å³¶",
    	UY: "ã¦ã«ã°ã¢ã¤",
    	UZ: "ã¦ãºãã­ã¹ã¿ã³",
    	VU: "ããã¢ã",
    	VE: "ãããºã¨ã©ã»ããªãã«å±åå½",
    	VN: "ãããã ",
    	VG: "ã¤ã®ãªã¹é ã´ã¡ã¼ã¸ã³è«¸å³¶",
    	VI: "ã¢ã¡ãªã«é ã´ã¡ã¼ã¸ã³è«¸å³¶",
    	WF: "ã¦ã©ãªã¹ã»ããã",
    	EH: "è¥¿ãµãã©",
    	YE: "ã¤ã¨ã¡ã³",
    	ZM: "ã¶ã³ãã¢",
    	ZW: "ã¸ã³ããã¨",
    	AX: "ãªã¼ã©ã³ãè«¸å³¶",
    	BQ: "ããã¼ã«ãã·ã³ãã»ã¦ã¼ã¹ã¿ãã£ã¦ã¹ããã³ãµã",
    	CW: "ã­ã¥ã©ã½ã¼",
    	GG: "ã¬ã¼ã³ã¸ã¼",
    	IM: "ãã³å³¶",
    	JE: "ã¸ã£ã¼ã¸ã¼",
    	ME: "ã¢ã³ããã°ã­",
    	BL: "ãµã³ã»ãã«ãã«ãã¼",
    	MF: "ãµã³ã»ãã«ã¿ã³ï¼ãã©ã³ã¹é ï¼",
    	RS: "ã»ã«ãã¢",
    	SX: "ã·ã³ãã»ãã¼ã«ãã³ï¼ãªã©ã³ãé ï¼",
    	SS: "åã¹ã¼ãã³",
    	XK: "ã³ã½ã"
    };
    var ja = {
    	locale: locale$m,
    	countries: countries$m
    };

    var ja$1 = /*#__PURE__*/Object.freeze({
        locale: locale$m,
        countries: countries$m,
        default: ja
    });

    var locale$n = "ka";
    var countries$n = {
    	AD: "ááááá á",
    	AE: "áá áááá áááá ááááááá£áá á¡ááááá áááá",
    	AF: "ááá¦ááááá",
    	AG: "ááá¢ááá£á áá ááá áá£áá",
    	AI: "ááááááá",
    	AL: "áááááááá",
    	AM: "á¡ááá®ááá",
    	AO: "áááááá",
    	AQ: "ááá¢áá á¥á¢ááá",
    	AR: "áá áááá¢ááá",
    	AS: "áááá áááá¡ á¡áááá",
    	AT: "ááá¡á¢á áá",
    	AU: "ááá¡á¢á áááá",
    	AW: "áá á£áá",
    	AX: "ááááááá¡ áá£áá«á£áááá",
    	AZ: "áááá áááá¯ááá",
    	BA: "ááá¡ááá áá á°áá áªááááááá",
    	BB: "ááá ááááá¡á",
    	BD: "ááááááááá¨á",
    	BE: "áááááá",
    	BF: "áá£á áááá-á¤áá¡á",
    	BG: "áá£áááá ááá",
    	BH: "ááá°á áááá",
    	BI: "áá£á á£ááá",
    	BJ: "áááááá",
    	BL: "á¡áá-ááá ááááá",
    	BM: "ááá áá£áá",
    	BN: "áá á£ááá",
    	BO: "ááááááá",
    	BQ: "ááá áááá¡ ááááá ááááááá",
    	BR: "áá áááááá",
    	BS: "ááá°áááá¡ áá£áá«á£áááá",
    	BT: "áá£á¢ááá",
    	BV: "áá£áá",
    	BW: "ááá¢á¡áááá",
    	BY: "ááááá á£á¡á",
    	BZ: "áááááá",
    	CA: "áááááá",
    	CC: "á¥áá¥áá¡áá¡ (áááááááá¡) áá£áá«á£áááá",
    	CD: "ááááá - áááá¨áá¡á",
    	CF: "áªááá¢á ááá£á á áá¤á áááá¡ á áá¡áá£ááááá",
    	CG: "ááááá - áá ááááááá",
    	CH: "á¨ááááªáá áá",
    	CI: "ááá¢-áááá£áá á",
    	CK: "áá£ááá¡ áá£áá«á£áááá",
    	CL: "á©ááá",
    	CM: "ááááá á£áá",
    	CN: "á©ááááá",
    	CO: "áááá£áááá",
    	CR: "ááá¡á¢á-á ááá",
    	CU: "áá£áá",
    	CV: "áááá-ááá áá",
    	CW: "ááá£á áá¡áá",
    	CX: "á¨áááá¡ áá£áá«á£áá",
    	CY: "ááááá áá¡á",
    	CZ: "á©áá®áááá¡ á áá¡áá£ááááá",
    	DE: "ááá ááááá",
    	DJ: "á¯ááá£á¢á",
    	DK: "ááááá",
    	DM: "áááááááá",
    	DO: "ááááááááááá á áá¡áá£ááááá",
    	DZ: "ááááá á",
    	EC: "ááááááá á",
    	EE: "áá¡á¢ááááá",
    	EG: "áááááá¢á",
    	EH: "ááá¡ááááá á¡áá°áá á",
    	ER: "áá áá¢á áá",
    	ES: "áá¡áááááá",
    	ET: "ááááááá",
    	FI: "á¤ááááá",
    	FJ: "á¤áá¯á",
    	FK: "á¤ááááááááá¡ áá£áá«á£áááá",
    	FM: "áááá áááááá",
    	FO: "á¤áá áá áá¡ áá£áá«á£áááá",
    	FR: "á¡áá¤á áááááá",
    	GA: "áááááá",
    	GB: "áááá ááááááá£áá á¡áááá¤á",
    	GD: "áá ááááá",
    	GE: "á¡áá¥áá ááááá",
    	GF: "á¡áá¤á ááááááá¡ áááááá",
    	GG: "ááá áá¡á",
    	GH: "áááá",
    	GI: "áááá ááá¢áá á",
    	GL: "áá áááááááá",
    	GM: "áááááá",
    	GN: "áááááá",
    	GP: "ááááááá£áá",
    	GQ: "ááááá¢áá á£áá áááááá",
    	GR: "á¡áááá á«áááá",
    	GS: "á¡ááá®á áá á¯áá á¯áá áá á¡ááá®á áá á¡áááááá©áá¡ áá£áá«á£áááá",
    	GT: "áááá¢ááááá",
    	GU: "áá£ááá",
    	GW: "áááááá-ááá¡áá£",
    	GY: "áááááá",
    	HK: "á°ááááááá",
    	HM: "á°áá áá áá ááááááááááá¡ áá£áá«á£áááá",
    	HN: "á°áááá£á áá¡á",
    	HR: "á®áá ááá¢áá",
    	HT: "á°ááá¢á",
    	HU: "á£ááá ááá",
    	ID: "ááááááááá",
    	IE: "áá áááááá",
    	IL: "áá¡á áááá",
    	IM: "ááááá¡ áá£áá«á£áá",
    	IN: "ááááááá",
    	IO: "áá áá¢áááááá¡ á¢áá áá¢áá áá áááááááá¡ ááááááá¨á",
    	IQ: "áá áá§á",
    	IR: "áá ááá",
    	IS: "áá¡áááááá",
    	IT: "áá¢áááá",
    	JE: "á¯áá á¡á",
    	JM: "ááááááá",
    	JO: "ááá ááááá",
    	JP: "ááááááá",
    	KE: "ááááá",
    	KG: "á§áá áááááá",
    	KH: "áááááá¯á",
    	KI: "ááá áááá¢á",
    	KM: "ááááá áá¡ áá£áá«á£áááá",
    	KN: "á¡ááá¢-ááá¢á¡á áá ááááá¡á",
    	KP: "á©á áááááá ááá áá",
    	KR: "á¡ááá®á áá ááá áá",
    	KW: "á¥á£ááááá",
    	KY: "áááááááá¡ áá£áá«á£áááá",
    	KZ: "á§áááá®ááá",
    	LA: "áááá¡á",
    	LB: "áááááá",
    	LC: "á¡ááá¢-áá£á¡áá",
    	LI: "ááá®á¢ááá¨á¢áááá",
    	LK: "á¨á á-ááááá",
    	LR: "ááááá áá",
    	LS: "ááá¡ááá",
    	LT: "ááá¢áá",
    	LU: "áá£á¥á¡áááá£á áá",
    	LV: "ááá¢ááá",
    	LY: "ááááá",
    	MA: "ááá ááá",
    	MC: "áááááá",
    	MD: "ááááááá",
    	ME: "áááá¢ááááá á",
    	MF: "á¡áá-ááá á¢ááá",
    	MG: "ááááááá¡ááá á",
    	MH: "ááá á¨áááá¡ áá£áá«á£áááá",
    	MK: "ááááááááá",
    	ML: "áááá",
    	MM: "ááááááá á (ááá áá)",
    	MN: "áááá¦ááááá",
    	MO: "ááááá",
    	MP: "á©á áááááá ááá ááááá¡ áá£áá«á£áááá",
    	MQ: "ááá á¢ááááá",
    	MR: "áááá áá¢áááá",
    	MS: "áááá¡áá áá¢á",
    	MT: "áááá¢á",
    	MU: "áááá ááá",
    	MV: "ááááááááá",
    	MW: "áááááá",
    	MX: "ááá¥á¡ááá",
    	MY: "áááááááá",
    	MZ: "ááááááááá",
    	NA: "ááááááá",
    	NC: "áá®ááá ááááááááá",
    	NE: "ááááá á",
    	NF: "ááá á¤ááááá¡ áá£áá«á£áá",
    	NG: "ááááá áá",
    	NI: "ááááá ááá£á",
    	NL: "ááááá ááááááá",
    	NO: "ááá ááááá",
    	NP: "áááááá",
    	NR: "ááá£á á£",
    	NU: "ááá£á",
    	NZ: "áá®ááá áááááááá",
    	OM: "ááááá",
    	PA: "áááááá",
    	PE: "ááá á£",
    	PF: "á¡áá¤á ááááááá¡ ááááááááá",
    	PG: "áááá£á-áá®ááá áááááá",
    	PH: "á¤ááááááááá",
    	PK: "ááááá¡á¢ááá",
    	PL: "áááááááá",
    	PM: "á¡áá-áááá á áá áááááááá",
    	PN: "ááá¢ááá ááá¡ áá£áá«á£áááá",
    	PR: "áá£áá á¢á-á ááá",
    	PS: "ááááá¡á¢áááá¡ á¢áá áá¢áá áááá",
    	PT: "ááá á¢á£ááááá",
    	PW: "ááááá£",
    	PY: "ááá ááááá",
    	QA: "ááá¢áá á",
    	RE: "á áá£ááááá",
    	RO: "á á£áááááá",
    	RS: "á¡áá áááá",
    	RU: "á á£á¡ááá",
    	RW: "á á£áááá",
    	SA: "á¡áá£ááá¡ áá ááááá",
    	SB: "á¡áááááááá¡ áá£áá«á£áááá",
    	SC: "á¡ááá¨áááá¡ áá£áá«á£áááá",
    	SD: "á¡á£áááá",
    	SE: "á¨áááááá",
    	SG: "á¡áááááá£á á",
    	SH: "á¬ááááá áááááá¡ áá£áá«á£áá",
    	SI: "á¡ááááááá",
    	SJ: "á¨áááªááá áááá áá ááá-áááááá",
    	SK: "á¡áááááááá",
    	SL: "á¡ááá á-ááááá",
    	SM: "á¡áá-ááá ááá",
    	SN: "á¡ááááááá",
    	SO: "á¡ááááá",
    	SR: "á¡á£á ááááá",
    	SS: "á¡ááá®á áá á¡á£áááá",
    	ST: "á¡áá-á¢ááá áá áá ááá¡ááá",
    	SV: "á¡ááááááá á",
    	SX: "á¡ááá¢-ááá á¢ááá",
    	SY: "á¡áá áá",
    	SZ: "á¡ááááááááá",
    	TC: "ááá á¥á¡-á¥ááá¥áá¡áá¡ áá£áá«á£áááá",
    	TD: "á©ááá",
    	TF: "á¤á áááá£áá á¡ááá®á áááá¡ á¢áá áá¢áá áááá",
    	TG: "á¢ááá",
    	TH: "á¢ááááááá",
    	TJ: "á¢áá¯ááááá",
    	TK: "á¢áááááá£",
    	TL: "á¢áááá -ááá¡á¢á",
    	TM: "áá£á á¥áááááá",
    	TN: "á¢á£ááá¡á",
    	TO: "á¢áááá",
    	TR: "áá£á á¥ááá",
    	TT: "á¢á ááááááá áá á¢ááááá",
    	TV: "á¢á£áááá£",
    	TW: "á¢áááááá",
    	TZ: "á¢ááááááá",
    	UA: "á£áá áááá",
    	UG: "á£ááááá",
    	UM: "áá¨á¨-áá¡ á¨áá áá£áá áá£áá«á£áááá",
    	US: "áááá áááá¡ á¨ááá áááá£áá á¨á¢áá¢ááá",
    	UY: "á£á á£áááá",
    	UZ: "á£ááááááá",
    	VA: "á¥áááá¥á ááá¢ááááá",
    	VC: "á¡ááá¢-áááá¡ááá¢á áá áá ááááááááá",
    	VE: "ááááá¡á£ááá",
    	VG: "áá áá¢áááááá¡ ááá á¯áááá¡ áá£áá«á£áááá",
    	VI: "áá¨á¨-áá¡ ááá á¯áááá¡ áá£áá«á£áááá",
    	VN: "áááá¢áááá",
    	VU: "áááá£áá¢á£",
    	WF: "á£áááá¡á áá á¤á£á¢á£áá",
    	WS: "á¡áááá",
    	XK: "ááá¡ááá",
    	YE: "áááááá",
    	YT: "ááááá¢á",
    	ZA: "á¡ááá®á áá áá¤á áááá¡ á áá¡áá£ááááá",
    	ZM: "áááááá",
    	ZW: "áááááááá"
    };
    var ka = {
    	locale: locale$n,
    	countries: countries$n
    };

    var ka$1 = /*#__PURE__*/Object.freeze({
        locale: locale$n,
        countries: countries$n,
        default: ka
    });

    var locale$o = "kk";
    var countries$o = {
    	AD: "ÐÐ½Ð´Ð¾ÑÑÐ°",
    	AE: "ÐÑÑÑÐºÐºÐµÐ½ ÐÑÐ°Ð± ÓÐ¼ÑÑÐ»ÑÐºÑÐµÑÑ",
    	AF: "ÐÑÒÐ°Ð½ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¶ÓÐ½Ðµ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³Ð¸Ð»ÑÑ",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸Ñ",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸Ñ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð»ÑÒ Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÐ²ÑÑÑÐ¸Ñ",
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	AZ: "ÓÐ·ÑÑÐ±Ð°Ð¹Ð¶Ð°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð¸Ñ Ð¶ÓÐ½Ðµ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»ÑÐ³Ð¸Ñ",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð°-Ð¤Ð°ÑÐ¾",
    	BG: "ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ»ÐµÐ¼Ð¸",
    	BM: "ÐÐµÑÐ¼ÑÐ´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	BN: "ÐÑÑÐ½ÐµÐ¹",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ",
    	BQ: "ÐÐ°ÑÐ¸Ð± ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´ÑÑÑ",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ",
    	BS: "ÐÐ°Ð³Ð°Ð¼ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÑÐ²Ðµ Ð°ÑÐ°Ð»Ñ",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð°ÑÑÑÑ",
    	BZ: "ÐÐµÐ»Ð¸Ð·",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ¾ÐºÐ¾Ñ (ÐÐ¸Ð»Ð¸Ð½Ð³) Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	CD: "ÐÐ¾Ð½Ð³Ð¾",
    	CF: "ÐÑÑÐ°Ð»ÑÒ ÐÑÑÐ¸ÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	CG: "ÐÐ¾Ð½Ð³Ð¾ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ",
    	CI: "ÐÐ¾Ñ-Ð´âÐÐ²ÑÐ°Ñ",
    	CK: "ÐÑÐº Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	CL: "Ð§Ð¸Ð»Ð¸",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÒÑÑÐ°Ð¹",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ",
    	CR: "ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐ°Ð±Ð¾-ÐÐµÑÐ´Ðµ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	CX: "Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð¾ Ð°ÑÐ°Ð»Ñ",
    	CY: "ÐÐ¸Ð¿Ñ",
    	CZ: "Ð§ÐµÑ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½Ð¸Ñ",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "Ð­ÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "Ð­ÑÑÐ¾Ð½Ð¸Ñ",
    	EG: "ÐÑÑÑÑ",
    	EH: "ÐÐ°ÑÑÑ Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "Ð­ÑÐ¸ÑÑÐµÑ",
    	ES: "ÐÑÐ¿Ð°Ð½Ð¸Ñ",
    	ET: "Ð­ÑÐ¸Ð¾Ð¿Ð¸Ñ",
    	FI: "Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ",
    	FJ: "Ð¤Ð¸Ð´Ð¶Ð¸",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ",
    	FO: "Ð¤Ð°ÑÐµÑ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	FR: "Ð¤ÑÐ°Ð½ÑÐ¸Ñ",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "Ò°Ð»ÑÐ±ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·Ð¸Ñ",
    	GF: "Ð¤ÑÐ°Ð½ÑÑÐ· ÐÐ²Ð¸Ð°Ð½Ð°ÑÑ",
    	GG: "ÐÐµÑÐ½ÑÐ¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ",
    	GM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑ",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°",
    	GQ: "Ð­ÐºÐ²Ð°ÑÐ¾ÑÐ»ÑÒ ÐÐ²Ð¸Ð½ÐµÑ",
    	GR: "ÐÑÐµÐºÐ¸Ñ",
    	GS: "ÐÒ£ÑÒ¯ÑÑÑÐº ÐÐµÐ¾ÑÐ³Ð¸Ñ Ð¶ÓÐ½Ðµ ÐÒ£ÑÒ¯ÑÑÑÐº Ð¡Ð°Ð½Ð´Ð²Ð¸Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ",
    	GY: "ÐÐ°Ð¹Ð°Ð½Ð°",
    	HK: "ÐÐ¾Ð½ÐºÐ¾Ð½Ð³",
    	HM: "Ð¥ÐµÑÐ´ Ð°ÑÐ°Ð»Ñ Ð¶ÓÐ½Ðµ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	HN: "ÐÐ¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥Ð¾ÑÐ²Ð°ÑÐ¸Ñ",
    	HT: "ÐÐ°Ð¸ÑÐ¸",
    	HU: "ÐÐµÐ½Ð³ÑÐ¸Ñ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ",
    	IE: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IL: "ÐÐ·ÑÐ°Ð¸Ð»Ñ",
    	IM: "ÐÑÐ½ Ð°ÑÐ°Ð»Ñ",
    	IN: "Ò®Ð½Ð´ÑÑÑÐ°Ð½",
    	IO: "Ò®Ð½Ð´Ñ Ð¼Ò±ÑÐ¸ÑÑÐ½Ð´Ð°ÒÑ ÐÑÐ¸ÑÐ°Ð½ Ð°Ð¹Ð¼Ð°ÒÑ",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IT: "ÐÑÐ°Ð»Ð¸Ñ",
    	JE: "ÐÐ¶ÐµÑÑÐ¸",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ",
    	JP: "ÐÐ°Ð¿Ð¾Ð½Ð¸Ñ",
    	KE: "ÐÐµÐ½Ð¸Ñ",
    	KG: "ÒÑÑÒÑÐ·ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑ Ð¶ÓÐ½Ðµ ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÐ¾ÑÐµÑ",
    	KR: "ÐÒ£ÑÒ¯ÑÑÑÐº ÐÐ¾ÑÐµÑ",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	KZ: "ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð²Ð°Ð½",
    	LC: "Ð¡ÐµÐ½Ñ-ÐÑÑÐ¸Ñ",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½",
    	LK: "Ð¨ÑÐ¸-ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸Ñ",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²Ð¸Ñ",
    	LY: "ÐÐ¸Ð²Ð¸Ñ",
    	MA: "ÐÐ°ÑÐ¾ÐºÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð¾Ð²Ð°",
    	ME: "Ð§ÐµÑÐ½Ð¾Ð³Ð¾ÑÐ¸Ñ",
    	MF: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð» Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÑÑÐ½Ð¼Ð° (ÐÐ¸ÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ò£ÒÐ¾Ð»Ð¸Ñ",
    	MO: "ÐÐ°ÐºÐ°Ð¾",
    	MP: "Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÐ°ÑÐ¸Ð°Ð½Ð° Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	MS: "ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MU: "ÐÐ°Ð²ÑÐ¸ÐºÐ¸Ð¹",
    	MV: "ÐÐ°Ð»ÑÐ´Ð¸Ð² Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ°",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ",
    	NC: "ÐÐ°Ò£Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "ÐÐ¾ÑÑÐ¾Ð»Ðº Ð°ÑÐ°Ð»Ñ",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸Ñ",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NL: "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÑ",
    	NZ: "ÐÐ°Ò£Ð° ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ· ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÑÑ",
    	PG: "ÐÐ°Ð¿ÑÐ° â ÐÐ°Ò£Ð° ÐÐ²Ð¸Ð½ÐµÑ",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½",
    	PK: "ÐÓÐºÑÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÑÐ°",
    	PM: "Ð¡ÐµÐ½-ÐÑÐµÑ Ð¶ÓÐ½Ðµ ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÐ¸ÑÐºÑÑÐ½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	PR: "ÐÑÑÑÑÐ¾-Ð Ð¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½Ð° Ð°Ð¹Ð¼Ð°ÒÑÐ°ÑÑ",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÑÐ½ÑÐ¾Ð½",
    	RO: "Ð ÑÐ¼ÑÐ½Ð¸Ñ",
    	RS: "Ð¡ÐµÑÐ±Ð¸Ñ",
    	RU: "Ð ÐµÑÐµÐ¹",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´ ÐÑÐ°Ð±Ð¸ÑÑÑ",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÑÐ¸Ñ",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "ÓÑÐ»Ð¸Ðµ ÐÐ»ÐµÐ½Ð° Ð°ÑÐ°Ð»Ñ",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ",
    	SJ: "Ð¨Ð¿Ð¸ÑÐ±ÐµÑÐ³ÐµÐ½ Ð¶ÓÐ½Ðµ Ð¯Ð½-ÐÐ°Ð¹ÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ",
    	SL: "Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	SS: "ÐÒ£ÑÒ¯ÑÑÑÐº Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð¶ÓÐ½Ðµ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸",
    	SV: "Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð¸Ð½Ñ-ÐÐ°ÑÑÐµÐ½",
    	SY: "Ð¡Ð¸ÑÐ¸Ñ",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	TC: "Ð¢ÐµÑÐºÑ Ð¶ÓÐ½Ðµ ÐÐ°Ð¹ÐºÐ¾Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÐ¸ÑÐ½ÑÒ£ Ð¾Ò£ÑÒ¯ÑÑÑÐº Ð°Ð¹Ð¼Ð°ÒÑÐ°ÑÑ",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´",
    	TJ: "Ð¢ÓÐ¶ÑÐºÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "Ð¢Ð¸Ð¼Ð¾Ñ-ÐÐµÑÑÐµ",
    	TM: "Ð¢Ò¯ÑÑÐºÐ¼ÐµÐ½ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢Ò¯ÑÐºÐ¸Ñ",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¶ÓÐ½Ðµ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ",
    	UA: "Ð£ÐºÑÐ°Ð¸Ð½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÒÐ¨-ÑÑÒ£ ÑÑÑÑÒÑ ÐºÑÑÑ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	US: "ÐÐ¼ÐµÑÐ¸ÐºÐ° ÒÒ±ÑÐ°Ð¼Ð° Ð¨ÑÐ°ÑÑÐ°ÑÑ",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	UZ: "Ó¨Ð·Ð±ÐµÐºÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	VC: "Ð¡ÐµÐ½Ñ-ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¶ÓÐ½Ðµ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	VE: "ÐÐµÐ½ÐµÑÑÑÐ»Ð°",
    	VG: "ÐÑÐ¸ÑÐ°Ð½Ð´ÑÒ ÐÐ¸ÑÐ³Ð¸Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	VI: "ÐÒÐ¨-ÑÑÒ£ ÐÐ¸ÑÐ³Ð¸Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	VN: "ÐÑÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "Ð£Ð¾Ð»Ð»Ð¸Ñ Ð¶ÓÐ½Ðµ Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°Ð¹Ð¾ÑÑÐ°",
    	ZA: "ÐÒ£ÑÒ¯ÑÑÑÐº ÐÑÑÐ¸ÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var kk = {
    	locale: locale$o,
    	countries: countries$o
    };

    var kk$1 = /*#__PURE__*/Object.freeze({
        locale: locale$o,
        countries: countries$o,
        default: kk
    });

    var locale$p = "ko";
    var countries$p = {
    	AF: "ìíê°ëì¤í",
    	AL: "ìë°ëì",
    	DZ: "ìì ë¦¬",
    	AS: "ìë©ë¦¬ì¹¸ ì¬ëª¨ì",
    	AD: "ìëë¼",
    	AO: "ìê³¨ë¼",
    	AI: "ìµ ê·ë¼",
    	AQ: "ë¨ê·¹ ëë¥",
    	AG: "ì¤í°ê° ë°ë¶ ë¤",
    	AR: "ìë¥´í¨í°ë",
    	AM: "ìë¥´ë©ëì",
    	AW: "ìë£¨ë°",
    	AU: "í¸ì£¼",
    	AT: "ì¤ì¤í¸ë¦¬ì",
    	AZ: "ìì ë¥´ë°ì´ì",
    	BS: "ë°íë§",
    	BH: "ë°ë ì¸",
    	BD: "ë°©ê¸ë¼ë°ì",
    	BB: "ë°ë² ì´ëì¤",
    	BY: "ë²¨ë¼ë£¨ì¤",
    	BE: "ë²¨ê¸°ì",
    	BZ: "ë²¨ë¦¬ì¦",
    	BJ: "ë² ë",
    	BM: "ë²ë®¤ë¤",
    	BT: "ë¶í",
    	BO: "ë³¼ë¦¬ë¹ì",
    	BA: "ë³´ì¤ëì í¤ë¥´ì²´ê³ ë¹ë",
    	BW: "ë³´ì¸ ìë",
    	BV: "ë¶ë²  ì¬",
    	BR: "ë¸ë¼ì§",
    	IO: "ìêµ­ë ¹ ì¸ëì ì§ì­",
    	BN: "ë¸ë£¨ëì´ ë¤ë£¨ ì´ë",
    	BG: "ë¶ê°ë¦¬ì",
    	BF: "ë¶í¤ ë íì",
    	BI: "ë¶ë£¬ë",
    	KH: "ìºë³´ëì",
    	CM: "ì¹´ë©ë£¬",
    	CA: "ìºëë¤",
    	CV: "ì¹´ë³´ ë² ë¥´ë°",
    	KY: "ì¼ì´ë§¨ ì ë",
    	CF: "ì¤ì ìíë¦¬ì¹´ ê³µíêµ­",
    	TD: "ì°¨ë",
    	CL: "ì¹ ë ",
    	CN: "ì¤êµ­",
    	CX: "í¬ë¦¬ì¤ë§ì¤ ì¬",
    	CC: "ì½ì½ì¤ êµ°ë",
    	CO: "ì½ë¡¬ë¹ì",
    	KM: "ì½ëª¨ë¡",
    	CG: "ì½©ê³ ",
    	CD: "ì½©ê³  ë¯¼ì£¼ ê³µíêµ­",
    	CK: "ì¿¡ ì ë",
    	CR: "ì½ì¤íë¦¬ì¹´",
    	CI: "ì½í¸ ëë¶ ìë¥´",
    	HR: "í¬ë¡ìí°ì",
    	CU: "ì¿ ë°",
    	CY: "í¤íë¡ì¤",
    	CZ: "ì²´ì½ ê³µíêµ­",
    	DK: "ë´ë§í¬",
    	DJ: "ì§ë¶í°",
    	DM: "ëë¯¸ëì¹´ ê³µíêµ­",
    	DO: "ëë¯¸ëì¹´ ê³µíêµ­",
    	EC: "ìì½°ëë¥´",
    	EG: "ì´ì§í¸",
    	SV: "ìì´ë°ëë¥´",
    	GQ: "ì ë ê¸°ë",
    	ER: "ìë¦¬í¸ë ì",
    	EE: "ìì¤í ëì",
    	ET: "ìí°ì¤í¼ì",
    	FK: "í¬í´ëë ì ë (ë§ ë¹ë ì¤)",
    	FO: "íë¡ ì ë",
    	FJ: "í¼ì§",
    	FI: "íëë",
    	FR: "íëì¤",
    	GF: "íëì¤ ë ¹ ê¸°ìë",
    	PF: "íëì¤ ë ¹ í´ë¦¬ë¤ììì",
    	TF: "íëì¤ ë¨ë¶ ì§ì­",
    	GA: "ê°ë´",
    	GM: "ê°ë¹ì",
    	GE: "ê·¸ë£¨ì§ì¼",
    	DE: "ëì¼",
    	GH: "ê°ë",
    	GI: "ì§ë¸ë¡¤í°",
    	GR: "ê·¸ë¦¬ì¤",
    	GL: "ê·¸ë¦°ëë",
    	GD: "ê·¸ë ëë¤",
    	GP: "ê³¼ë¤ë£¨í",
    	GU: "ê´",
    	GT: "ê³¼íë§ë¼",
    	GN: "ê¸°ë",
    	GW: "ê¸°ë ë¹ì¬ì°",
    	GY: "ê°ì´ìë",
    	HT: "ìì´í°",
    	HM: "íë ì¬ ë° ë§¥ëëë ì ë",
    	VA: "ì±ì¢ (ë°í°ì¹¸ ìêµ­)",
    	HN: "ì¨ëë¼ì¤",
    	HK: "íì½©",
    	HU: "íê°ë¦¬",
    	IS: "ìì´ì¬ëë",
    	IN: "ì¸ë",
    	ID: "ì¸ëë¤ìì ê³µíêµ­",
    	IR: "ì´ë, ì´ì¬ë ê³µíêµ­",
    	IQ: "ì´ë¼í¬",
    	IE: "ìì¼ëë",
    	IL: "ì´ì¤ë¼ì",
    	IT: "ì´íë¦¬ì",
    	JM: "ìë©ì´ì¹´",
    	JP: "ì¼ë³¸",
    	JO: "ìë¥´ë¨",
    	KZ: "ì¹´ìíì¤í",
    	KE: "ì¼ë",
    	KI: "í¤ë¦¬ë°ì",
    	KP: "íêµ­, ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­",
    	KR: "ëíë¯¼êµ­",
    	KW: "ì¿ ì¨ì´í¸",
    	KG: "í¤ë¥´ê¸°ì¦ì¤í",
    	LA: "ë¼ì¤ì¤ ì¸ë¯¼ ë¯¼ì£¼ì£¼ì ê³µíêµ­",
    	LV: "ë¼í¸ë¹ì",
    	LB: "ë ë°ë¼",
    	LS: "ë ìí ",
    	LR: "ë¼ì´ë² ë¦¬ì",
    	LY: "ë¦¬ë¹ì ìë ì ë§íë¦¬ ì¼",
    	LI: "ë¦¬ííìíì¸",
    	LT: "ë¦¬í¬ìëì",
    	LU: "ë£©ìë¶ë¥´í¬",
    	MO: "ë§ì¹´ì¤",
    	MK: "ë§ì¼ëëì, ì´ì ì ì ê³  ì¬ë¼ë¹ì ê³µíêµ­",
    	MG: "ë§ë¤ê°ì¤ì¹´ë¥´",
    	MW: "ë§ë¼ì",
    	MY: "ë§ë ì´ìì",
    	MV: "ëª°ëë¸",
    	ML: "ë§ë¦¬",
    	MT: "ëª°í",
    	MH: "ë§ì¬ êµ°ë",
    	MQ: "ë§ë¥´í°ëí¬",
    	MR: "ëª¨ë¦¬íë",
    	MU: "ëª¨ë¦¬ìì¤",
    	YT: "ë§ ìí¸",
    	MX: "ë©ìì½",
    	FM: "ë¯¸í¬ë¡ë¤ìì,",
    	MD: "ëª°ëë°, ê³µíêµ­",
    	MC: "ëª¨ëì½",
    	MN: "ëª½ê³¨ë¦¬ì",
    	MS: "ëª¬ì¸ ë¼í¸",
    	MA: "ëª¨ë¡ì½",
    	MZ: "ëª¨ì ë¹í¬",
    	MM: "ë¯¸ìë§",
    	NA: "ëë¯¸ë¹ì",
    	NR: "ëì°ë£¨",
    	NP: "ë¤í",
    	NL: "ë¤ëëë",
    	NC: "ë´ ì¹¼ë ëëì",
    	NZ: "ë´ì§ëë",
    	NI: "ëì¹´ë¼ê³¼",
    	NE: "ëì ë¥´",
    	NG: "ëì´ì§ë¦¬ì",
    	NU: "ëì°ì",
    	NF: "ë¸í½ ì¬",
    	MP: "ë¶ ë§ë¦¬ìë ì ë",
    	NO: "ë¸ë¥´ì¨ì´",
    	OM: "ì¤ë§",
    	PK: "íí¤ì¤í",
    	PW: "íë¼ì°",
    	PS: "íë ì¤íì¸ ìì¹êµ¬, ì ë ¹ ì",
    	PA: "íëë§",
    	PG: "íí¸ì ë´ê¸°ë",
    	PY: "íë¼ê³¼ì´",
    	PE: "íë£¨",
    	PH: "íë¦¬í ì ë",
    	PN: "í ì¼ì¸",
    	PL: "í´ëë",
    	PT: "í¬ë¥´í¬ê°",
    	PR: "í¸ìë¥´í  ë¦¬ì½",
    	QA: "ì¹´íë¥´",
    	RE: "ì¬ê²°í©",
    	RO: "ë£¨ë§ëì",
    	RU: "ë¬ìì ì°ë°©",
    	RW: "ë¥´ìë¤",
    	SH: "ì¸ì¸í¸ í¬ë ë",
    	KN: "ì¸ì¸í¸ í¤ì¸  ë¤ë¹ì¤",
    	LC: "ì¸ì¸í¸ ë£¨ìì",
    	PM: "ì í¼ìë¥´ ë¯¸ í´ë¡±",
    	VC: "ì¸ì¸í¸ ë¹ì¼í¸ ê·¸ë ëë",
    	WS: "ì¬ëª¨ì",
    	SM: "ì° ë§ë¦¬ë¸",
    	ST: "ìí¬ ë© íë¦°ì í",
    	SA: "ì¬ì°ë ìë¼ë¹ì",
    	SN: "ì¸ë¤ê°",
    	SC: "ì¸ì´ì¸",
    	SL: "ììë¼ ë¦¬ì¨",
    	SG: "ì±ê°í¬ë¥´",
    	SK: "ì¬ë¡ë°í¤ì",
    	SI: "ì¬ë¡ë² ëì",
    	SB: "ìë¡ëª¬ ì ë",
    	SO: "ìë§ë¦¬ì",
    	ZA: "ë¨ìíë¦¬ì¹´",
    	GS: "ì¬ì°ì¤ ì¡°ì§ì ë° ì¬ì°ì¤ ìëìì¹ ì ë",
    	ES: "ì¤íì¸",
    	LK: "ì¤ë¦¬ëì¹´",
    	SD: "ìë¨",
    	SR: "ìë¦¬ë¨",
    	SJ: "ì¤ë° ë°ë¥´ì ì ë©ì´ ì",
    	SZ: "ì¤ìì§ëë",
    	SE: "ì¤ì¨ë´",
    	CH: "ì¤ìì¤",
    	SY: "ìë¦¬ì",
    	TW: "ëë§",
    	TJ: "íì§í¤ì¤í",
    	TZ: "íìëì, ì ì",
    	TH: "íêµ­",
    	TL: "ë í°ëª¨ë¥´",
    	TG: "ê°ë¤",
    	TK: "í ì¼ ë¼ì°",
    	TO: "íµê°",
    	TT: "í¸ë¦¬ëë¤ë í ë°ê³ ",
    	TN: "íëì§",
    	TR: "í°í¤",
    	TM: "í¬ë¥´í¬ ë©ëì¤í",
    	TC: "í°í¬ ì¤ ì¼ì´ ì»¤ì¤ ì ë",
    	TV: "í¬ë°ë£¨",
    	UG: "ì°ê°ë¤",
    	UA: "ì°í¬ë¼ì´ë",
    	AE: "ìë ìë¯¸ë¦¬í¸",
    	GB: "ìêµ­",
    	US: "ë¯¸êµ­",
    	UM: "ë¯¸êµ­ë ¹ êµ°ì ì ë",
    	UY: "ì°ë£¨ê³¼ì´",
    	UZ: "ì°ì¦ë² í¤ì¤í",
    	VU: "ë°ëìí¬",
    	VE: "ë² ë¤ììë¼",
    	VN: "ë² í¸ë¨",
    	VG: "ìêµ­ë ¹ ë²ì§ ìì¼ëë",
    	VI: "ë¯¸êµ­ë ¹ ë²ì§ ìì¼ëë",
    	WF: "ìë¦¬ì¤ í¸ í¬ë",
    	EH: "ìì¬íë¼",
    	YE: "ìë© ìë ê³µíêµ­",
    	ZM: "ì ë¹ì",
    	ZW: "ì§ë°ë¸ì¨",
    	AX: "ì¬ëë ì ë",
    	BQ: "ë³´ë¤ë¥´, ì í¸ ì ì¤ íí° ì°ì¤, ì¬ë°",
    	CW: "ì¿ ë¼ ì¬ì¤",
    	GG: "ê±´ì§ ì¬",
    	IM: "ìì¼ ì¤ë¸ ë§¨",
    	JE: "ì ì§",
    	ME: "ëª¬íë¤ê·¸ë¡",
    	BL: "ì ë°ë¥´ íë  ë¯¸",
    	MF: "ì¸ì¸í¸ ë§í´ (íëì¤ì´ ë¶ë¶)",
    	RS: "ì¸ë¥´ë¹ì",
    	SX: "ì í¸ ë§í´ (ë¤ëëëì´ ë¶ë¶)",
    	SS: "ë¨ ìë¨",
    	XK: "ì½ìë³´"
    };
    var ko = {
    	locale: locale$p,
    	countries: countries$p
    };

    var ko$1 = /*#__PURE__*/Object.freeze({
        locale: locale$p,
        countries: countries$p,
        default: ko
    });

    var locale$q = "ky";
    var countries$q = {
    	AD: "ÐÐ½Ð´Ð¾ÑÑÐ°",
    	AE: "ÐÐ¸ÑÐ¸ÐºÐºÐµÐ½ ÐÑÐ°Ð± Ð­Ð¼Ð¸ÑÐ°ÑÑÐ°ÑÑ",
    	AF: "ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¶Ð°Ð½Ð° ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³ÑÐ¸Ð»Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸Ñ",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸Ñ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸ÐºÐ°",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°ÑÑ",
    	AT: "ÐÐ²ÑÑÑÐ¸Ñ",
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð¶Ð°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð¸Ñ Ð¶Ð°Ð½Ð° ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»ÑÐ³Ð¸Ñ",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð°-Ð¤Ð°ÑÐ¾",
    	BG: "ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐµÐ»ÐµÐ¼Ð¸",
    	BM: "ÐÐµÑÐ¼ÑÐ´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	BN: "ÐÑÑÐ½ÐµÐ¹",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ",
    	BQ: "ÐÐ°ÑÐ¸Ð± ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ð´Ð°ÑÑ",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ",
    	BS: "ÐÐ°Ð³Ð°Ð¼ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÑÐ²Ðµ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð°ÑÑÑÑ",
    	BZ: "ÐÐµÐ»Ð¸Ð·",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ¾ÐºÐ¾Ñ (ÐÐ¸Ð»Ð¸Ó) Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	CD: "ÐÐ¾Ð½Ð³Ð¾-ÐÐ¸Ð½ÑÐ°ÑÐ°",
    	CF: "ÐÐ¾ÑÐ±Ð¾ÑÐ´ÑÐº ÐÑÑÐ¸ÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	CG: "ÐÐ¾Ð½Ð³Ð¾-ÐÑÐ°Ð·Ð·Ð°Ð²Ð¸Ð»",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ",
    	CI: "ÐÐ¾Ñ-Ð´âÐÐ²ÑÐ°Ñ",
    	CK: "ÐÑÐº Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	CL: "Ð§Ð¸Ð»Ð¸",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÐÑÑÐ°Ð¹",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ",
    	CR: "ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐ°Ð¿Ðµ ÐÐµÑÐ´Ðµ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	CX: "ÐÑÐ¸ÑÐ¼Ð°Ñ Ð°ÑÐ°Ð»Ñ",
    	CY: "ÐÐ¸Ð¿Ñ",
    	CZ: "Ð§ÐµÑÐ¸Ñ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½Ð¸Ñ",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "Ð­ÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "Ð­ÑÑÐ¾Ð½Ð¸Ñ",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	EH: "ÐÐ°ÑÑÑ Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "Ð­ÑÐ¸ÑÑÐµÑ",
    	ES: "ÐÑÐ¿Ð°Ð½Ð¸Ñ",
    	ET: "Ð­ÑÐ¸Ð¾Ð¿Ð¸Ñ",
    	FI: "Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ",
    	FJ: "Ð¤Ð¸Ð´Ð¶Ð¸",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»ÑÐ½Ð´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ",
    	FO: "Ð¤Ð°ÑÐµÑ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	FR: "Ð¤ÑÐ°Ð½ÑÐ¸Ñ",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "Ð£Ð»ÑÑ ÐÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·Ð¸Ñ",
    	GF: "ÐÐ²Ð¸Ð°Ð½Ð° (Ð¤ÑÐ°Ð½ÑÐ¸Ñ)",
    	GG: "ÐÐµÑÐ½ÑÐ¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ",
    	GM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑ",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°",
    	GQ: "Ð­ÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»Ð´ÑÐº ÐÐ²Ð¸Ð½ÐµÑ",
    	GR: "ÐÑÐµÑÐ¸Ñ",
    	GS: "Ð¢Ò¯ÑÑÒ¯Ðº ÐÐ¾ÑÐ¶Ð¸Ñ Ð¶Ð°Ð½Ð° Ð¢Ò¯ÑÑÒ¯Ðº Ð¡ÑÐ½Ð´Ð²Ð¸Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ",
    	GY: "ÐÐ°Ð¹Ð°Ð½Ð°",
    	HK: "ÐÐ¾Ð½ÐºÐ¾Ð½Ð³ ÐÑÑÐ°Ð¹ ÐÐÐ",
    	HM: "Ð¥ÐµÑÐ´ Ð¶Ð°Ð½Ð° ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»Ð´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	HN: "ÐÐ¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥Ð¾ÑÐ²Ð°ÑÐ¸Ñ",
    	HT: "ÐÐ°Ð¸ÑÐ¸",
    	HU: "ÐÐµÐ½Ð³ÑÐ¸Ñ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ",
    	IE: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IL: "ÐÐ·ÑÐ°Ð¸Ð»Ñ",
    	IM: "ÐÑÐ½ Ð°ÑÐ°Ð»Ñ",
    	IN: "ÐÐ½Ð´Ð¸Ñ",
    	IO: "ÐÑÐ¸ÑÐ°Ð½Ð¸ÑÐ½ÑÐ½ ÐÐ½Ð´Ð¸Ñ Ð¾ÐºÐµÐ°Ð½ÑÐ½Ð´Ð°Ð³Ñ Ð°Ð¹Ð¼Ð°Ð³Ñ",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IT: "ÐÑÐ°Ð»Ð¸Ñ",
    	JE: "ÐÐµÑÑÐ¸",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ",
    	JP: "Ð¯Ð¿Ð¾Ð½Ð¸Ñ",
    	KE: "ÐÐµÐ½Ð¸Ñ",
    	KG: "ÐÑÑÐ³ÑÐ·ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÐ¾Ñ",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑ Ð¶Ð°Ð½Ð° ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¢Ò¯Ð½Ð´Ò¯Ðº ÐÐ¾ÑÐµÑ",
    	KR: "Ð¢Ò¯ÑÑÒ¯Ðº ÐÐ¾ÑÐµÑ",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½ ÐÑÐ°Ð»Ð´Ð°ÑÑ",
    	KZ: "ÐÐ°Ð·Ð°ÐºÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð²Ð°Ð½",
    	LC: "Ð¡ÐµÐ½Ñ-ÐÑÑÐ¸Ñ",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½",
    	LK: "Ð¨ÑÐ¸-ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸Ñ",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²Ð¸Ñ",
    	LY: "ÐÐ¸Ð²Ð¸Ñ",
    	MA: "ÐÐ°ÑÐ¾ÐºÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð¾Ð²Ð°",
    	ME: "Ð§ÐµÑÐ½Ð¾Ð³Ð¾ÑÐ¸Ñ",
    	MF: "Ð¡ÐµÐ½Ñ-ÐÐ°ÑÑÐ¸Ð½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð» Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÑÑÐ½Ð¼Ð° (ÐÐ¸ÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ",
    	MO: "ÐÐ°ÐºÐ°Ñ ÐÑÑÐ°Ð¹ ÐÐÐ",
    	MP: "Ð¢Ò¯Ð½Ð´Ò¯Ðº ÐÐ°ÑÐ¸Ð°Ð½Ð° Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	MS: "ÐÐ¾Ð½ÑÐµÑÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MU: "ÐÐ°Ð²ÑÐ¸ÐºÐ¸Ð¹",
    	MV: "ÐÐ°Ð»Ð´Ð¸Ð² Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ°",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ",
    	NC: "ÐÐ°ÓÑ ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "ÐÐ¾ÑÑÐ¾Ð»Ðº Ð°ÑÐ°Ð»Ñ",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸Ñ",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NL: "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ð´Ð°Ñ",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÑ",
    	NZ: "ÐÐ°ÓÑ ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ· ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÑÑ",
    	PG: "ÐÐ°Ð¿ÑÐ° ÐÐ°Ò£Ñ-ÐÐ²Ð¸Ð½ÐµÑ",
    	PH: "Ð¤Ð¸Ð»Ð»Ð¸Ð¿Ð¸Ð½",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÑÐ°",
    	PM: "Ð¡ÐµÐ½-ÐÑÐµÑ Ð¶Ð°Ð½Ð° ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÐ¸ÑÐºÑÑÐ½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	PR: "ÐÑÑÑÑÐ¾-Ð Ð¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½Ð° Ð°Ð¹Ð¼Ð°ÐºÑÐ°ÑÑ",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÑÐ½Ð¸Ð¾Ð½",
    	RO: "Ð ÑÐ¼ÑÐ½Ð¸Ñ",
    	RS: "Ð¡ÐµÑÐ±Ð¸Ñ",
    	RU: "Ð Ð¾ÑÑÐ¸Ñ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´ ÐÑÐ°Ð±Ð¸ÑÑÑ",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»Ð´ÐµÑ",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÑÐ¸Ñ",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "Ð«Ð¹ÑÐº ÐÐ»ÐµÐ½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ",
    	SJ: "Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¶Ð°Ð½Ð° ÐÐ°Ð½ ÐÐ°Ð¹ÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ",
    	SL: "Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼Ðµ",
    	SS: "Ð¢Ò¯ÑÑÒ¯Ðº Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð¶Ð°Ð½Ð° ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸",
    	SV: "Ð­Ð» Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð¸Ð½Ñ ÐÐ°Ð°ÑÑÐµÐ½",
    	SY: "Ð¡Ð¸ÑÐ¸Ñ",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	TC: "Ð¢Ò¯ÑÐºÑ Ð¶Ð°Ð½Ð° ÐÐ°Ð¹ÐºÐ¾Ñ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÐ¸ÑÐ½ÑÐ½ Ð¢Ò¯ÑÑÒ¯ÐºÑÓ©Ð³Ò¯ Ð°Ð¹Ð¼Ð°ÐºÑÐ°ÑÑ",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°Ð¸Ð»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°Ð¶Ð¸ÐºÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "Ð¢Ð¸Ð¼Ð¾Ñ-ÐÐµÑÑÐµ",
    	TM: "Ð¢Ò¯ÑÐºÐ¼Ó©Ð½ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢Ò¯ÑÐºÐ¸Ñ",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¶Ð°Ð½Ð° Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ",
    	UA: "Ð£ÐºÑÐ°Ð¸Ð½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÐÐ¨Ð½ÑÐ½ ÑÑÑÑÐºÑ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ",
    	US: "ÐÐ¼ÐµÑÐ¸ÐºÐ° ÐÐ¾ÑÐ¼Ð¾ Ð¨ÑÐ°ÑÑÐ°ÑÑ",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	UZ: "Ó¨Ð·Ð±ÐµÐºÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	VC: "Ð¡ÐµÐ½Ñ-ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¶Ð°Ð½Ð° ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð°Ð»Ð°Ñ",
    	VE: "ÐÐµÐ½ÐµÑÑÑÐ»Ð°",
    	VG: "ÐÐ¸ÑÐ³Ð¸Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ (ÐÑÐ¸ÑÐ°Ð½Ð¸Ñ)",
    	VI: "ÐÐ¸ÑÐ³Ð¸Ð½ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ (ÐÐÐ¨)",
    	VN: "ÐÑÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "Ð£Ð¾Ð»Ð»Ð¸Ñ Ð¶Ð°Ð½Ð° Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°Ð¹Ð¾ÑÑÐ°",
    	ZA: "Ð¢Ò¯ÑÑÒ¯Ðº ÐÑÑÐ¸ÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var ky = {
    	locale: locale$q,
    	countries: countries$q
    };

    var ky$1 = /*#__PURE__*/Object.freeze({
        locale: locale$q,
        countries: countries$q,
        default: ky
    });

    var locale$r = "lt";
    var countries$r = {
    	AD: "Andora",
    	AE: "Jungtiniai ArabÅ³ Emyratai",
    	AF: "Afganistanas",
    	AG: "Antigva ir Barbuda",
    	AI: "Angilija",
    	AL: "Albanija",
    	AM: "ArmÄnija",
    	AO: "Angola",
    	AQ: "Antarktida",
    	AR: "Argentina",
    	AS: "Amerikos Samoa",
    	AT: "Austrija",
    	AU: "Australija",
    	AW: "Aruba",
    	AX: "AlandÅ³ Salos",
    	AZ: "AzerbaidÅ¾anas",
    	BA: "Bosnija ir Hercegovina",
    	BB: "Barbadosas",
    	BD: "BangladeÅ¡as",
    	BE: "Belgija",
    	BF: "Burkina Fasas",
    	BG: "Bulgarija",
    	BH: "Bahreinas",
    	BI: "Burundis",
    	BJ: "Beninas",
    	BL: "Sen Bartelemi",
    	BM: "Bermuda",
    	BN: "BrunÄjus",
    	BO: "Bolivija",
    	BQ: "KaribÅ³ Nyderlandai",
    	BR: "Brazilija",
    	BS: "Bahamos",
    	BT: "Butanas",
    	BV: "BuvÄ Sala",
    	BW: "Botsvana",
    	BY: "Baltarusija",
    	BZ: "Belizas",
    	CA: "Kanada",
    	CC: "KokosÅ³ (Kilingo) Salos",
    	CD: "Kongas-KinÅ¡asa",
    	CF: "CentrinÄs Afrikos Respublika",
    	CG: "Kongas-Brazavilis",
    	CH: "Å veicarija",
    	CI: "Dramblio Kaulo Krantas",
    	CK: "Kuko Salos",
    	CL: "ÄilÄ",
    	CM: "KamerÅ«nas",
    	CN: "Kinija",
    	CO: "Kolumbija",
    	CR: "Kosta Rika",
    	CU: "Kuba",
    	CV: "Å½aliasis KyÅ¡ulys",
    	CW: "Kiurasao",
    	CX: "KalÄdÅ³ Sala",
    	CY: "Kipras",
    	CZ: "Äekija",
    	DE: "Vokietija",
    	DJ: "DÅ¾ibutis",
    	DK: "Danija",
    	DM: "Dominika",
    	DO: "Dominikos Respublika",
    	DZ: "AlÅ¾yras",
    	EC: "Ekvadoras",
    	EE: "Estija",
    	EG: "Egiptas",
    	EH: "VakarÅ³ Sachara",
    	ER: "EritrÄja",
    	ES: "Ispanija",
    	ET: "Etiopija",
    	FI: "Suomija",
    	FJ: "FidÅ¾is",
    	FK: "Folklando Salos",
    	FM: "Mikronezija",
    	FO: "FarerÅ³ Salos",
    	FR: "PrancÅ«zija",
    	GA: "Gabonas",
    	GB: "JungtinÄ KaralystÄ",
    	GD: "Grenada",
    	GE: "Gruzija",
    	GF: "PrancÅ«zijos Gviana",
    	GG: "Gernsis",
    	GH: "Gana",
    	GI: "Gibraltaras",
    	GL: "Grenlandija",
    	GM: "Gambija",
    	GN: "GvinÄja",
    	GP: "Gvadelupa",
    	GQ: "Pusiaujo GvinÄja",
    	GR: "Graikija",
    	GS: "PietÅ³ DÅ¾ordÅ¾ija ir PietÅ³ SandviÄo salos",
    	GT: "Gvatemala",
    	GU: "Guamas",
    	GW: "Bisau GvinÄja",
    	GY: "Gajana",
    	HK: "Honkongas",
    	HM: "Herdo ir Makdonaldo Salos",
    	HN: "HondÅ«ras",
    	HR: "Kroatija",
    	HT: "Haitis",
    	HU: "Vengrija",
    	ID: "Indonezija",
    	IE: "Airija",
    	IL: "Izraelis",
    	IM: "Meno Sala",
    	IN: "Indija",
    	IO: "Indijos Vandenyno BritÅ³ Sritis",
    	IQ: "Irakas",
    	IR: "Iranas",
    	IS: "Islandija",
    	IT: "Italija",
    	JE: "DÅ¾ersis",
    	JM: "Jamaika",
    	JO: "Jordanija",
    	JP: "Japonija",
    	KE: "Kenija",
    	KG: "Kirgizija",
    	KH: "KambodÅ¾a",
    	KI: "Kiribatis",
    	KM: "Komorai",
    	KN: "Sent Kitsas ir Nevis",
    	KP: "Å iaurÄs KorÄja",
    	KR: "PietÅ³ KorÄja",
    	KW: "Kuveitas",
    	KY: "KaimanÅ³ Salos",
    	KZ: "Kazachstanas",
    	LA: "Laosas",
    	LB: "Libanas",
    	LC: "Sent Lusija",
    	LI: "LichtenÅ¡teinas",
    	LK: "Å ri Lanka",
    	LR: "Liberija",
    	LS: "Lesotas",
    	LT: "Lietuva",
    	LU: "Liuksemburgas",
    	LV: "Latvija",
    	LY: "Libija",
    	MA: "Marokas",
    	MC: "Monakas",
    	MD: "Moldova",
    	ME: "Juodkalnija",
    	MF: "Sen Martenas",
    	MG: "Madagaskaras",
    	MH: "MarÅ¡alo Salos",
    	MK: "Makedonija",
    	ML: "Malis",
    	MM: "Mianmaras (Birma)",
    	MN: "Mongolija",
    	MO: "Makao",
    	MP: "Marianos Å iaurinÄs Salos",
    	MQ: "Martinika",
    	MR: "Mauritanija",
    	MS: "Montseratas",
    	MT: "Malta",
    	MU: "Mauricijus",
    	MV: "Maldyvai",
    	MW: "Malavis",
    	MX: "Meksika",
    	MY: "Malaizija",
    	MZ: "Mozambikas",
    	NA: "Namibija",
    	NC: "Naujoji Kaledonija",
    	NE: "Nigeris",
    	NF: "Norfolko sala",
    	NG: "Nigerija",
    	NI: "Nikaragva",
    	NL: "Nyderlandai",
    	NO: "Norvegija",
    	NP: "Nepalas",
    	NR: "Nauru",
    	NU: "NiujÄ",
    	NZ: "Naujoji Zelandija",
    	OM: "Omanas",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "PrancÅ«zijos Polinezija",
    	PG: "Papua Naujoji GvinÄja",
    	PH: "Filipinai",
    	PK: "Pakistanas",
    	PL: "Lenkija",
    	PM: "Sen Pjeras ir Mikelonas",
    	PN: "Pitkerno salos",
    	PR: "Puerto Rikas",
    	PS: "Palestinos teritorija",
    	PT: "Portugalija",
    	PW: "Palau",
    	PY: "Paragvajus",
    	QA: "Kataras",
    	RE: "Reunjonas",
    	RO: "Rumunija",
    	RS: "Serbija",
    	RU: "Rusija",
    	RW: "Ruanda",
    	SA: "Saudo Arabija",
    	SB: "Saliamono Salos",
    	SC: "SeiÅ¡eliai",
    	SD: "Sudanas",
    	SE: "Å vedija",
    	SG: "SingapÅ«ras",
    	SH: "Å v. Elenos Sala",
    	SI: "SlovÄnija",
    	SJ: "Svalbardas ir Janas Majenas",
    	SK: "Slovakija",
    	SL: "Siera LeonÄ",
    	SM: "San Marinas",
    	SN: "Senegalas",
    	SO: "Somalis",
    	SR: "Surinamas",
    	SS: "PietÅ³ Sudanas",
    	ST: "San TomÄ ir PrinsipÄ",
    	SV: "Salvadoras",
    	SX: "Sint Martenas",
    	SY: "Sirija",
    	SZ: "Svazilandas",
    	TC: "Terkso ir Kaikoso Salos",
    	TD: "Äadas",
    	TF: "PrancÅ«zijos PietÅ³ sritys",
    	TG: "Togas",
    	TH: "Tailandas",
    	TJ: "TadÅ¾ikija",
    	TK: "Tokelau",
    	TL: "RytÅ³ Timoras",
    	TM: "TurkmÄnistanas",
    	TN: "Tunisas",
    	TO: "Tonga",
    	TR: "Turkija",
    	TT: "Trinidadas ir Tobagas",
    	TV: "Tuvalu",
    	TW: "Taivanas",
    	TZ: "Tanzanija",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "JungtiniÅ³ ValstijÅ³ MaÅ¾osios Tolimosios Salos",
    	US: "JungtinÄs Valstijos",
    	UY: "Urugvajus",
    	UZ: "Uzbekistanas",
    	VA: "Vatikano Miesto ValstybÄ",
    	VC: "Å ventasis Vincentas ir Grenadinai",
    	VE: "Venesuela",
    	VG: "DidÅ¾iosios Britanijos MergeliÅ³ Salos",
    	VI: "JungtiniÅ³ ValstijÅ³ MergeliÅ³ Salos",
    	VN: "Vietnamas",
    	VU: "Vanuatu",
    	WF: "Volisas ir FutÅ«na",
    	WS: "Samoa",
    	XK: "Kosovas",
    	YE: "Jemenas",
    	YT: "Majotas",
    	ZA: "PietÅ³ Afrika",
    	ZM: "Zambija",
    	ZW: "ZimbabvÄ"
    };
    var lt = {
    	locale: locale$r,
    	countries: countries$r
    };

    var lt$1 = /*#__PURE__*/Object.freeze({
        locale: locale$r,
        countries: countries$r,
        default: lt
    });

    var locale$s = "lv";
    var countries$s = {
    	AD: "Andora",
    	AE: "Apvienotie ArÄbu EmirÄti",
    	AF: "AfganistÄna",
    	AG: "Antigva un Barbuda",
    	AI: "Angilja",
    	AL: "AlbÄnija",
    	AM: "ArmÄnija",
    	AO: "Angola",
    	AQ: "Antarktika",
    	AR: "ArgentÄ«na",
    	AS: "ASV Samoa",
    	AT: "Austrija",
    	AU: "AustrÄlija",
    	AW: "Aruba",
    	AX: "Olandes salas",
    	AZ: "AzerbaidÅ¾Äna",
    	BA: "Bosnija un Hercegovina",
    	BB: "Barbadosa",
    	BD: "BangladeÅ¡a",
    	BE: "BeÄ¼Ä£ija",
    	BF: "Burkinafaso",
    	BG: "BulgÄrija",
    	BH: "Bahreina",
    	BI: "Burundija",
    	BJ: "Benina",
    	BL: "SenbartelmÄ«",
    	BM: "Bermudu salas",
    	BN: "Bruneja",
    	BO: "BolÄ«vija",
    	BQ: "NÄ«derlandes KarÄ«bu salas",
    	BR: "BrazÄ«lija",
    	BS: "Bahamu salas",
    	BT: "ButÄna",
    	BV: "BuvÄ sala",
    	BW: "BotsvÄna",
    	BY: "Baltkrievija",
    	BZ: "Beliza",
    	CA: "KanÄda",
    	CC: "Kokosu (KÄ«linga) salas",
    	CD: "Kongo (KinÅ¡asa)",
    	CF: "CentrÄlÄfrikas Republika",
    	CG: "Kongo (Brazavila)",
    	CH: "Å veice",
    	CI: "KotdivuÄra",
    	CK: "Kuka salas",
    	CL: "ÄÄ«le",
    	CM: "KamerÅ«na",
    	CN: "Ä¶Ä«na",
    	CO: "Kolumbija",
    	CR: "Kostarika",
    	CU: "Kuba",
    	CV: "Kaboverde",
    	CW: "Kirasao",
    	CX: "ZiemsvÄtku sala",
    	CY: "Kipra",
    	CZ: "Äehija",
    	DE: "VÄcija",
    	DJ: "DÅ¾ibutija",
    	DK: "DÄnija",
    	DM: "Dominika",
    	DO: "DominikÄna",
    	DZ: "AlÅ¾Ä«rija",
    	EC: "Ekvadora",
    	EE: "Igaunija",
    	EG: "ÄÄ£ipte",
    	EH: "RietumsahÄra",
    	ER: "Eritreja",
    	ES: "SpÄnija",
    	ET: "Etiopija",
    	FI: "Somija",
    	FJ: "FidÅ¾i",
    	FK: "Folklenda salas",
    	FM: "MikronÄzija",
    	FO: "FÄru salas",
    	FR: "Francija",
    	GA: "Gabona",
    	GB: "LielbritÄnija",
    	GD: "GrenÄda",
    	GE: "Gruzija",
    	GF: "Francijas GviÄna",
    	GG: "GÄrnsija",
    	GH: "Gana",
    	GI: "GibraltÄrs",
    	GL: "Grenlande",
    	GM: "Gambija",
    	GN: "Gvineja",
    	GP: "Gvadelupa",
    	GQ: "EkvatoriÄlÄ Gvineja",
    	GR: "GrieÄ·ija",
    	GS: "DienviddÅ¾ordÅ¾ija un DienvidsendviÄu salas",
    	GT: "Gvatemala",
    	GU: "Guama",
    	GW: "Gvineja-Bisava",
    	GY: "GajÄna",
    	HK: "Ä¶Ä«nas Ä«paÅ¡Äs pÄrvaldes apgabals Honkonga",
    	HM: "HÄrda sala un Makdonalda salas",
    	HN: "Hondurasa",
    	HR: "HorvÄtija",
    	HT: "Haiti",
    	HU: "UngÄrija",
    	ID: "IndonÄzija",
    	IE: "Äªrija",
    	IL: "IzraÄla",
    	IM: "Mena",
    	IN: "Indija",
    	IO: "Indijas okeÄna Britu teritorija",
    	IQ: "IrÄka",
    	IR: "IrÄna",
    	IS: "Islande",
    	IT: "ItÄlija",
    	JE: "DÅ¾Ärsija",
    	JM: "Jamaika",
    	JO: "JordÄnija",
    	JP: "JapÄna",
    	KE: "Kenija",
    	KG: "KirgizstÄna",
    	KH: "KambodÅ¾a",
    	KI: "Kiribati",
    	KM: "Komoru salas",
    	KN: "Sentkitsa un Nevisa",
    	KP: "ZiemeÄ¼koreja",
    	KR: "Dienvidkoreja",
    	KW: "Kuveita",
    	KY: "Kaimanu salas",
    	KZ: "KazahstÄna",
    	LA: "Laosa",
    	LB: "LibÄna",
    	LC: "SentlÅ«sija",
    	LI: "LihtenÅ¡teina",
    	LK: "Å rilanka",
    	LR: "LibÄrija",
    	LS: "Lesoto",
    	LT: "Lietuva",
    	LU: "Luksemburga",
    	LV: "Latvija",
    	LY: "LÄ«bija",
    	MA: "Maroka",
    	MC: "Monako",
    	MD: "Moldova",
    	ME: "Melnkalne",
    	MF: "SenmartÄna",
    	MG: "Madagaskara",
    	MH: "MÄrÅ¡ala salas",
    	MK: "MaÄ·edonija",
    	ML: "Mali",
    	MM: "Mjanma (Birma)",
    	MN: "Mongolija",
    	MO: "Ä¶Ä«nas Ä«paÅ¡Äs pÄrvaldes apgabals Makao",
    	MP: "ZiemeÄ¼u Marianas salas",
    	MQ: "Martinika",
    	MR: "MauritÄnija",
    	MS: "Montserrata",
    	MT: "Malta",
    	MU: "MaurÄ«cija",
    	MV: "MaldÄ«vija",
    	MW: "MalÄvija",
    	MX: "Meksika",
    	MY: "Malaizija",
    	MZ: "Mozambika",
    	NA: "NamÄ«bija",
    	NC: "Jaunkaledonija",
    	NE: "NigÄra",
    	NF: "Norfolkas sala",
    	NG: "NigÄrija",
    	NI: "Nikaragva",
    	NL: "NÄ«derlande",
    	NO: "NorvÄÄ£ija",
    	NP: "NepÄla",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "JaunzÄlande",
    	OM: "OmÄna",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Francijas PolinÄzija",
    	PG: "Papua-Jaungvineja",
    	PH: "FilipÄ«nas",
    	PK: "PakistÄna",
    	PL: "Polija",
    	PM: "SenpjÄra un Mikelona",
    	PN: "PitkÄrnas salas",
    	PR: "Puertoriko",
    	PS: "PalestÄ«na",
    	PT: "PortugÄle",
    	PW: "Palau",
    	PY: "Paragvaja",
    	QA: "Katara",
    	RE: "Reinjona",
    	RO: "RumÄnija",
    	RS: "Serbija",
    	RU: "Krievija",
    	RW: "Ruanda",
    	SA: "SaÅ«da ArÄbija",
    	SB: "ZÄlamana salas",
    	SC: "SeiÅ¡elu salas",
    	SD: "SudÄna",
    	SE: "Zviedrija",
    	SG: "SingapÅ«ra",
    	SH: "Sv.HelÄnas sala",
    	SI: "SlovÄnija",
    	SJ: "SvalbÄra un Jana Majena sala",
    	SK: "SlovÄkija",
    	SL: "Sjerraleone",
    	SM: "SanmarÄ«no",
    	SN: "SenegÄla",
    	SO: "SomÄlija",
    	SR: "Surinama",
    	SS: "DienvidsudÄna",
    	ST: "Santome un Prinsipi",
    	SV: "Salvadora",
    	SX: "SintmÄrtena",
    	SY: "SÄ«rija",
    	SZ: "Svazilenda",
    	TC: "TÄrksas un Kaikosas salas",
    	TD: "Äada",
    	TF: "Francijas DienvidjÅ«ru teritorija",
    	TG: "Togo",
    	TH: "Taizeme",
    	TJ: "TadÅ¾ikistÄna",
    	TK: "Tokelau",
    	TL: "Austrumtimora",
    	TM: "TurkmenistÄna",
    	TN: "Tunisija",
    	TO: "Tonga",
    	TR: "Turcija",
    	TT: "TrinidÄda un TobÄgo",
    	TV: "Tuvalu",
    	TW: "TaivÄna",
    	TZ: "TanzÄnija",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "ASV MazÄs AizjÅ«ras salas",
    	US: "Amerikas SavienotÄs Valstis",
    	UY: "Urugvaja",
    	UZ: "UzbekistÄna",
    	VA: "VatikÄns",
    	VC: "Sentvinsenta un GrenadÄ«nas",
    	VE: "VenecuÄla",
    	VG: "Britu VirdÅ¾Ä«nas",
    	VI: "ASV VirdÅ¾Ä«nas",
    	VN: "Vjetnama",
    	VU: "Vanuatu",
    	WF: "Volisa un Futunas salas",
    	WS: "Samoa",
    	XK: "Kosova",
    	YE: "Jemena",
    	YT: "Majota",
    	ZA: "DienvidÄfrikas Republika",
    	ZM: "Zambija",
    	ZW: "Zimbabve"
    };
    var lv = {
    	locale: locale$s,
    	countries: countries$s
    };

    var lv$1 = /*#__PURE__*/Object.freeze({
        locale: locale$s,
        countries: countries$s,
        default: lv
    });

    var locale$t = "mk";
    var countries$t = {
    	AD: "ÐÐ½Ð´Ð¾ÑÐ°",
    	AE: "ÐÐ±ÐµÐ´Ð¸Ð½ÐµÑÐ¸ ÐÑÐ°Ð¿ÑÐºÐ¸ ÐÐ¼Ð¸ÑÐ°ÑÐ¸",
    	AF: "ÐÐ²Ð³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³Ð²Ð° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³Ð²Ð¸Ð»Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸ÑÐ°",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸ÑÐ°",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÐ²ÑÑÑÐ¸ÑÐ°",
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸ÑÐ°",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	AZ: "ÐÐ·ÐµÑÐ±ÐµÑÑÐ°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»Ð³Ð¸ÑÐ°",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾",
    	BG: "ÐÑÐ³Ð°ÑÐ¸ÑÐ°",
    	BH: "ÐÐ°ÑÑÐµÐ¸Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ",
    	BM: "ÐÐµÑÐ¼ÑÐ´Ð¸",
    	BN: "ÐÑÑÐ½ÐµÑ",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸ÑÐ°",
    	BQ: "ÐÐ°ÑÐ¸Ð¿ÑÐºÐ° Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»",
    	BS: "ÐÐ°ÑÐ°Ð¼Ð¸",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÑÑÑÐ¾Ð² ÐÑÐ²Ðµ",
    	BW: "ÐÐ¾ÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð¾ÑÑÑÐ¸ÑÐ°",
    	BZ: "ÐÐµÐ»Ð¸Ð·Ðµ",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ð¸ (ÐÐ¸Ð»Ð¸Ð½ÑÐºÐ¸) ÐÑÑÑÐ¾Ð²Ð¸",
    	CD: "ÐÐ¾Ð½Ð³Ð¾ - ÐÐ¸Ð½ÑÐ°ÑÐ°",
    	CF: "Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	CG: "ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»",
    	CH: "Ð¨Ð²Ð°ÑÑÐ°ÑÐ¸ÑÐ°",
    	CI: "ÐÑÐµÐ³Ð¾Ñ Ð½Ð° Ð¡Ð»Ð¾Ð½Ð¾Ð²Ð°ÑÐ° ÐÐ¾ÑÐºÐ°",
    	CK: "ÐÑÐºÐ¾Ð²Ð¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	CL: "Ð§Ð¸Ð»Ðµ",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÐÐ¸Ð½Ð°",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸ÑÐ°",
    	CR: "ÐÐ¾ÑÑÐ°ÑÐ¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐµÐ»ÐµÐ½ âÐ Ñ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	CX: "ÐÐ¾Ð¶Ð¸ÑÐµÐ½ ÐÑÑÑÐ¾Ð²",
    	CY: "ÐÐ¸Ð¿Ð°Ñ",
    	CZ: "Ð§ÐµÑÐºÐ°",
    	DE: "ÐÐµÑÐ¼Ð°Ð½Ð¸ÑÐ°",
    	DJ: "ÐÐ¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½ÑÐºÐ°",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "ÐÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "ÐÑÑÐ¾Ð½Ð¸ÑÐ°",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	EH: "ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "ÐÑÐ¸ÑÑÐµÑÐ°",
    	ES: "Ð¨Ð¿Ð°Ð½Ð¸ÑÐ°",
    	ET: "ÐÑÐ¸Ð¾Ð¿Ð¸ÑÐ°",
    	FI: "Ð¤Ð¸Ð½ÑÐºÐ°",
    	FJ: "Ð¤Ð¸ÑÐ¸",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»Ð°Ð½Ð´ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐ°",
    	FO: "Ð¤Ð°ÑÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	FR: "Ð¤ÑÐ°Ð½ÑÐ¸ÑÐ°",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "ÐÐ±ÐµÐ´Ð¸Ð½ÐµÑÐ¾ ÐÑÐ°Ð»ÑÑÐ²Ð¾",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·Ð¸ÑÐ°",
    	GF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ²Ð°ÑÐ°Ð½Ð°",
    	GG: "ÐÐµÑÐ½Ð·Ð¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´",
    	GM: "ÐÐ°Ð¼Ð±Ð¸ÑÐ°",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	GP: "ÐÐ²Ð°Ð´Ð°Ð»ÑÐ¿Ðµ",
    	GQ: "ÐÐºÐ²Ð°ÑÐ¾ÑÑÐºÐ° ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	GR: "ÐÑÑÐ¸ÑÐ°",
    	GS: "ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÑÐ¸ÑÐ° Ð¸ ÐÑÐ¶Ð½Ð¸ Ð¡ÐµÐ½Ð´Ð²Ð¸ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑÐ°-ÐÐ¸ÑÐ°Ñ",
    	GY: "ÐÐ²Ð°ÑÐ°Ð½Ð°",
    	HK: "Ð¥Ð¾Ð½Ð³ ÐÐ¾Ð½Ð³ Ð¡.Ð.Ð  ÐÐ¸Ð½Ð°",
    	HM: "ÐÑÑÑÐ¾Ð² Ð¥ÐµÑÐ´ Ð¸ ÐÑÑÑÐ¾Ð²Ð¸ ÐÐµÐºÐ´Ð¾Ð½Ð°Ð»Ð´",
    	HN: "Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥ÑÐ²Ð°ÑÑÐºÐ°",
    	HT: "Ð¥Ð°Ð¸ÑÐ¸",
    	HU: "Ð£Ð½Ð³Ð°ÑÐ¸ÑÐ°",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸ÑÐ°",
    	IE: "ÐÑÑÐºÐ°",
    	IL: "ÐÐ·ÑÐ°ÐµÐ»",
    	IM: "ÐÑÑÑÐ¾Ð² ÐÐ°Ð½",
    	IN: "ÐÐ½Ð´Ð¸ÑÐ°",
    	IO: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÐ½Ð´Ð¾Ð¾ÐºÐµÐ°Ð½ÑÐºÐ° Ð¢ÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐ°",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´",
    	IT: "ÐÑÐ°Ð»Ð¸ÑÐ°",
    	JE: "ÐÐµÑÑÐ¸",
    	JM: "ÐÐ°Ð¼Ð°ÑÐºÐ°",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½",
    	JP: "ÐÐ°Ð¿Ð¾Ð½Ð¸ÑÐ°",
    	KE: "ÐÐµÐ½Ð¸ÑÐ°",
    	KG: "ÐÐ¸ÑÐ³Ð¸ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾ÑÐ°",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	KN: "Ð¡Ð²ÐµÑÐ¸ ÐÑÐ¸ÑÑÐ¾ÑÐµÑ Ð¸ ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑÐ°",
    	KR: "ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÐµÑÐ°",
    	KW: "ÐÑÐ²Ð°ÑÑ",
    	KY: "ÐÐ°ÑÐ¼Ð°Ð½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð±Ð°Ð½",
    	LC: "Ð¡Ð²ÐµÑÐ° ÐÑÑÐ¸ÑÐ°",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐ°ÑÐ½",
    	LK: "Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸ÑÐ°",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°Ð½Ð¸ÑÐ°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²Ð¸ÑÐ°",
    	LY: "ÐÐ¸Ð±Ð¸ÑÐ°",
    	MA: "ÐÐ°ÑÐ¾ÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð°Ð²Ð¸ÑÐ°",
    	ME: "Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°",
    	MF: "Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐ¸Ð½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÑÐ°Ð½Ð¼Ð°Ñ (ÐÑÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸ÑÐ°",
    	MO: "ÐÐ°ÐºÐ°Ð¾ Ð¡ÐÐ ",
    	MP: "Ð¡ÐµÐ²ÐµÑÐ½Ð¸ ÐÐ°ÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°",
    	MS: "ÐÐ¾Ð½ÑÐµÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÐ°",
    	MU: "ÐÐ°Ð²ÑÐ¸ÑÐ¸ÑÑ",
    	MV: "ÐÐ°Ð»Ð´Ð¸Ð²Ð¸",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ¾",
    	MY: "ÐÐ°Ð»ÐµÐ·Ð¸ÑÐ°",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸ÑÐ°",
    	NC: "ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸ÑÐ°",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "ÐÐ¾ÑÑÐ¾Ð»ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸ÑÐ°",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³Ð²Ð°",
    	NL: "Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°",
    	NO: "ÐÐ¾ÑÐ²ÐµÑÐºÐ°",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÑÐµ",
    	NZ: "ÐÐ¾Ð² ÐÐµÐ»Ð°Ð½Ð´",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°",
    	PG: "ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÐºÐ°",
    	PM: "Ð¡ÐµÐ½Ñ ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð°Ð½",
    	PN: "ÐÐ¸ÑÐºÐµÑÐ½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	PR: "ÐÐ¾ÑÑÐ¾ÑÐ¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸ÑÐ°",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ñ",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÑÐ½Ð¸Ð¾Ð½",
    	RO: "Ð Ð¾Ð¼Ð°Ð½Ð¸ÑÐ°",
    	RS: "Ð¡ÑÐ±Ð¸ÑÐ°",
    	RU: "Ð ÑÑÐ¸ÑÐ°",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´Ð¸ÑÐºÐ° ÐÑÐ°Ð±Ð¸ÑÐ°",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	SC: "Ð¡ÐµÑÑÐµÐ»Ð¸",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÐ´ÑÐºÐ°",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "Ð¡Ð²ÐµÑÐ° ÐÐ»ÐµÐ½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸ÑÐ°",
    	SJ: "Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ ÐÐ°Ð½ ÐÐµÑÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÑÐºÐ°",
    	SL: "Ð¡Ð¸ÐµÑÐ° ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸ÑÐ°",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	SS: "ÐÑÐ¶ÐµÐ½ Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ",
    	SV: "ÐÐ» Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¸Ð½",
    	SY: "Ð¡Ð¸ÑÐ¸ÑÐ°",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	TC: "ÐÑÑÑÐ¾Ð²Ð¸ Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¸ÐºÐ¾Ñ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ¸ ÐÑÐ¶Ð½Ð¸ Ð¢ÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°ÑÐ»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°ÑÐ¸ÐºÐ¸ÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "ÐÑÑÐ¾ÑÐµÐ½ Ð¢Ð¸Ð¼Ð¾Ñ (Ð¢Ð¸Ð¼Ð¾Ñ ÐÐµÑÑÐµ)",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢ÑÑÑÐ¸ÑÐ°",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°ÑÐ²Ð°Ð½",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸ÑÐ°",
    	UA: "Ð£ÐºÑÐ°Ð¸Ð½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸ Ð²Ð¾ ÐÐ°ÑÐ¸ÑÐ¸ÐºÐ¾Ñ",
    	US: "Ð¡Ð¾ÐµÐ´Ð¸Ð½ÐµÑÐ¸ ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÐÑÐ¶Ð°Ð²Ð¸",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ñ",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	VC: "Ð¡Ð²ÐµÑÐ¸ ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸ÑÐµ",
    	VE: "ÐÐµÐ½ÐµÑÑÐµÐ»Ð°",
    	VG: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÐÐµÐ²ÑÑÐ²ÐµÐ½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	VI: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÐÐµÐ²ÑÑÐ²ÐµÐ½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸",
    	VN: "ÐÐ¸ÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "ÐÐ°Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°ÑÐ¾Ñ",
    	ZA: "ÐÑÐ¶Ð½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸ÑÐ°",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var mk = {
    	locale: locale$t,
    	countries: countries$t
    };

    var mk$1 = /*#__PURE__*/Object.freeze({
        locale: locale$t,
        countries: countries$t,
        default: mk
    });

    var locale$u = "mn";
    var countries$u = {
    	AD: "ÐÐ½Ð´Ð¾ÑÑÐ°",
    	AE: "ÐÑÐ°Ð±ÑÐ½ ÐÑÐ³Ð´ÑÑÐ½ Ð­Ð¼Ð¸ÑÐ°Ñ",
    	AF: "ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ð±Ð° ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³Ð¸Ð»Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸",
    	AO: "ÐÐ½Ð³Ð¾Ð»",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ¸Ð¹Ð½ Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÐ²ÑÑÑÐ¸",
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐ½ ÐÑÐ»ÑÑÐ´",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð¶Ð°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð¸ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»Ð³Ð¸",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð° ÑÐ°ÑÐ¾",
    	BG: "ÐÐ¾Ð»Ð³Ð°Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐµÐ»ÑÐ¼Ð¸",
    	BM: "ÐÐµÑÐ¼ÑÐ´",
    	BN: "ÐÑÑÐ½ÐµÐ¹",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸",
    	BQ: "ÐÐ°ÑÐ¸Ð±ÑÐ½ ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»",
    	BS: "ÐÐ°Ð³Ð°Ð¼",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÑÐ²ÐµÑÑÐ½ Ð°ÑÐ»ÑÑÐ´",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð°ÑÑÑÑ",
    	BZ: "ÐÐµÐ»Ð¸Ð·",
    	CA: "ÐÐ°Ð½Ð°Ð´",
    	CC: "ÐÐ¾ÐºÐ¾Ñ (ÐÐ¸Ð¹Ð»Ð¸Ð½Ð³) Ð°ÑÐ»ÑÑÐ´",
    	CD: "ÐÐ¾Ð½Ð³Ð¾-ÐÐ¸Ð½ÑÐ°ÑÐ°",
    	CF: "Ð¢Ó©Ð² ÐÑÑÐ¸ÐºÐ¸Ð¹Ð½ ÐÒ¯Ð³Ð´ ÐÐ°Ð¹ÑÐ°Ð¼Ð´Ð°Ñ Ð£Ð»Ñ",
    	CG: "ÐÐ¾Ð½Ð³Ð¾ ÐÑÐ°Ð·Ð·Ð°Ð²Ð¸Ð»Ñ",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸",
    	CI: "ÐÐ¾Ñ Ð´âÐÐ²ÑÐ°Ñ",
    	CK: "ÐÒ¯Ò¯ÐºÐ¸Ð¹Ð½ Ð°ÑÐ»ÑÑÐ´",
    	CL: "Ð§Ð¸Ð»Ð¸",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "Ð¥ÑÑÐ°Ð´",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±",
    	CR: "ÐÐ¾ÑÑÐ° Ð Ð¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐ°Ð¿Ðµ ÐÐµÑÐ´Ðµ",
    	CW: "ÐÑÑÐ°ÐºÐ°Ð¾",
    	CX: "ÐÑÐ» ÑÐ°ÑÑÐ½ Ð°ÑÐ°Ð»",
    	CY: "ÐÐ¸Ð¿Ñ",
    	CZ: "Ð§ÐµÑ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½Ð¸",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸Ðº",
    	DO: "ÐÒ¯Ð³Ð´ ÐÐ°Ð¹ÑÐ°Ð¼Ð´Ð°Ñ ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ Ð£Ð»Ñ",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "Ð­ÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "Ð­ÑÑÐ¾Ð½Ð¸",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	EH: "ÐÐ°ÑÑÑÐ½ Ð¡Ð°ÑÐ°Ñ",
    	ER: "Ð­ÑÐ¸ÑÑÐ¸",
    	ES: "ÐÑÐ¿Ð°Ð½Ð¸",
    	ET: "Ð­ÑÐ¸Ð¾Ð¿",
    	FI: "Ð¤Ð¸Ð½Ð»Ð°Ð½Ð´",
    	FJ: "Ð¤Ð¸Ð¶Ð¸",
    	FK: "Ð¤Ð¾Ð»ÑÐºÐ»Ð°Ð½Ð´ÑÐ½ ÐÑÐ»ÑÑÐ´",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸",
    	FO: "Ð¤Ð°ÑÐ¾Ñ ÐÑÐ»ÑÑÐ´",
    	FR: "Ð¤ÑÐ°Ð½Ñ",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "ÐÑ ÐÑÐ¸ÑÐ°Ð½Ð¸",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÒ¯ÑÐ¶",
    	GF: "Ð¤ÑÐ°Ð½ÑÑÐ½ ÐÐ°Ð¹Ð°Ð½Ð°",
    	GG: "ÐÐµÑÐ½ÑÐ¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´",
    	GM: "ÐÐ°Ð¼Ð±Ð¸",
    	GN: "ÐÐ²Ð¸Ð½ÐµÐ¹",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿",
    	GQ: "Ð­ÐºÐ²Ð°ÑÐ¾ÑÑÐ½ ÐÐ²Ð¸Ð½ÐµÐ¹",
    	GR: "ÐÑÐµÐº",
    	GS: "Ó¨Ð¼Ð½Ó©Ð´ ÐÐ¾ÑÐ¶Ð¸Ð° Ð±Ð° Ó¨Ð¼Ð½Ó©Ð´ Ð¡ÑÐ½Ð´Ð²Ð¸ÑÐ¸Ð¹Ð½ ÐÑÐ»ÑÑÐ´",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÐ¹-ÐÐ¸ÑÐ°Ñ",
    	GY: "ÐÐ°Ð¹Ð°Ð½Ð°",
    	HK: "Ð¥Ð¾Ð½Ð³ ÐÐ¾Ð½Ð³",
    	HM: "Ð¥ÑÑÐ´ Ð±Ð¾Ð»Ð¾Ð½ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»Ð´ Ð°ÑÐ»ÑÑÐ´",
    	HN: "ÐÐ¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥Ð¾ÑÐ²Ð°Ñ",
    	HT: "ÐÐ°Ð¸ÑÐ¸",
    	HU: "Ð£Ð½Ð³Ð°Ñ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸",
    	IE: "ÐÑÐ»Ð°Ð½Ð´",
    	IL: "ÐÐ·ÑÐ°Ð¸Ð»Ñ",
    	IM: "ÐÑÐ½ ÐÑÐ°Ð»",
    	IN: "Ð­Ð½ÑÑÑÑÐ³",
    	IO: "ÐÑÐ¸ÑÐ°Ð½Ð¸Ð¹Ð½ ÑÐ°ÑÑÑÐ° Ð­Ð½ÑÑÑÑÐ³Ð¸Ð¹Ð½ Ð´Ð°Ð»Ð°Ð¹ Ð´Ð°ÑÑ Ð½ÑÑÐ°Ð³ Ð´ÑÐ²ÑÐ³ÑÑÒ¯Ò¯Ð´",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´",
    	IT: "ÐÑÐ°Ð»Ð¸",
    	JE: "ÐÐµÑÑÐ¸",
    	JM: "Ð¯Ð¼Ð°Ð¹Ðº",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½",
    	JP: "Ð¯Ð¿Ð¾Ð½",
    	KE: "ÐÐµÐ½Ð¸",
    	KG: "ÐÑÑÐ³ÑÐ·ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð¶",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÐ¾Ñ",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑÑ Ð±Ð° ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¥Ð¾Ð¹Ð´ Ð¡Ð¾Ð»Ð¾Ð½Ð³Ð¾Ñ",
    	KR: "Ó¨Ð¼Ð½Ó©Ð´ Ð¡Ð¾Ð»Ð¾Ð½Ð³Ð¾Ñ",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½Ñ ÐÑÐ»ÑÑÐ´",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð²Ð°Ð½",
    	LC: "Ð¡ÐµÐ½Ñ ÐÑÑÐ¸Ð°",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½",
    	LK: "Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐ°ÑÐ²Ð¸",
    	LY: "ÐÐ¸Ð²Ð¸",
    	MA: "ÐÐ°ÑÐ¾ÐºÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð°Ð²",
    	ME: "ÐÐ¾Ð½ÑÐµÐ½ÐµÐ³ÑÐ¾",
    	MF: "Ð¡ÐµÐ½Ñ-ÐÐ°ÑÑÐ¸Ð½",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð»ÑÐ½ Ð°ÑÐ»ÑÑÐ´",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÑÑÐ½Ð¼Ð°Ñ (ÐÑÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»",
    	MO: "ÐÐ°ÐºÐ°Ð¾",
    	MP: "Ð¥Ð¾Ð¹Ð´ ÐÐ°ÑÐ¸Ð°Ð½Ñ Ð°ÑÐ»ÑÑÐ´",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸",
    	MS: "ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MU: "ÐÐ°Ð²ÑÐ¸ÑÑÑ",
    	MV: "ÐÐ°Ð»ÑÐ´Ð¸Ð²",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸Ðº",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸",
    	NC: "Ð¨Ð¸Ð½Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "ÐÐ¾ÑÑÐ¾Ð»Ðº Ð°ÑÐ»ÑÑÐ´",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NL: "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³Ð¸",
    	NP: "ÐÐ°Ð»Ð±Ð°",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÑ",
    	NZ: "Ð¨Ð¸Ð½Ñ ÐÐµÐ»Ð°Ð½Ð´",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ½ ÐÐ¾Ð»Ð¸Ð½ÐµÐ·",
    	PG: "ÐÐ°Ð¿ÑÐ° Ð¨Ð¸Ð½Ñ ÐÐ²Ð¸Ð½ÐµÐ¹",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PL: "ÐÐ¾Ð»ÑÑ",
    	PM: "Ð¡ÑÐ½Ñ ÐÑÐµÑ Ð±Ð° ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÐ¸ÑÐºÑÑÐ½ Ð°ÑÐ»ÑÑÐ´",
    	PR: "ÐÑÑÑÑÐ¾ Ð Ð¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½Ñ Ð½ÑÑÐ°Ð³ Ð´ÑÐ²ÑÐ³ÑÑÒ¯Ò¯Ð´",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ñ",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÑÐ½ÑÐ¾Ð½",
    	RO: "Ð ÑÐ¼ÑÐ½",
    	RS: "Ð¡ÐµÑÐ±Ð¸",
    	RU: "ÐÑÐ¾Ñ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´ÑÐ½ ÐÑÐ°Ð±",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ñ ÐÑÐ»ÑÑÐ´",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÐ´",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "Ð¡ÐµÐ½Ñ Ð¥ÐµÐ»ÐµÐ½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸",
    	SJ: "Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð±Ð° Ð¯Ð½ ÐÐ°Ð¹ÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°Ðº",
    	SL: "Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	SS: "Ó¨Ð¼Ð½Ó©Ð´ Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð±Ð° ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸",
    	SV: "Ð­Ð»Ñ Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð¸Ð½Ñ ÐÐ°ÑÑÐµÐ½",
    	SY: "Ð¡Ð¸ÑÐ¸",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»Ð°Ð½Ð´",
    	TC: "Ð¢ÑÑÐº Ð±Ð° ÐÐ°Ð¹ÐºÐ¾ÑÑÐ½ ÐÑÐ»ÑÑÐ´",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÐ½ Ó©Ð¼Ð½Ó©Ð´ Ð³Ð°Ð·Ð°Ñ Ð½ÑÑÐ°Ð³",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "Ð¢Ð¸Ð¼Ð¾Ñ-ÐÐµÑÑÐµ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢ÑÑÐº",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸",
    	UA: "Ð£ÐºÑÐ°Ð¸Ð½",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "ÐÐÐ£-ÑÐ½ ÑÐ¾Ð¹ÑÑÐ¾Ð½ Ð°ÑÐ»ÑÑÐ´",
    	US: "ÐÐ¼ÐµÑÐ¸ÐºÐ¸Ð¹Ð½ ÐÑÐ³Ð´ÑÑÐ½ Ð£Ð»Ñ",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½ ÑÐ¾Ñ ÑÐ»Ñ",
    	VC: "Ð¡ÑÐ½Ñ ÐÐ¸Ð½ÑÑÐ½Ñ Ð±Ð° ÐÑÐµÐ½Ð°Ð´Ð¸Ð½",
    	VE: "ÐÐµÐ½ÐµÑÑÑÐ»",
    	VG: "ÐÑÐ¸ÑÐ°Ð½Ð¸Ð¹Ð½ ÐÐ¸ÑÐ¶Ð¸Ð½Ð¸Ð¹ ÐÑÐ»ÑÑÐ´",
    	VI: "ÐÐÐ£-ÑÐ½ ÐÐ¸ÑÐ¶Ð¸Ð½Ð¸Ð¹ ÐÑÐ»ÑÑÐ´",
    	VN: "ÐÑÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "Ð£Ð¾Ð»Ð»Ð¸Ñ Ð±Ð° Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°Ð¹Ð¾ÑÑÐµ",
    	ZA: "Ó¨Ð¼Ð½Ó©Ð´ ÐÑÑÐ¸Ðº ÑÐ¸Ð²",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var mn = {
    	locale: locale$u,
    	countries: countries$u
    };

    var mn$1 = /*#__PURE__*/Object.freeze({
        locale: locale$u,
        countries: countries$u,
        default: mn
    });

    var locale$v = "nb";
    var countries$v = {
    	AD: "Andorra",
    	AE: "De forente arabiske emirater",
    	AF: "Afghanistan",
    	AG: "Antigua og Barbuda",
    	AI: "Anguilla",
    	AL: "Albania",
    	AM: "Armenia",
    	AO: "Angola",
    	AQ: "Antarktis",
    	AR: "Argentina",
    	AS: "Amerikansk Samoa",
    	AT: "Ãsterrike",
    	AU: "Australia",
    	AW: "Aruba",
    	AX: "Ãland",
    	AZ: "Aserbajdsjan",
    	BA: "Bosnia-Hercegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgia",
    	BF: "Burkina Faso",
    	BG: "Bulgaria",
    	BH: "Bahrain",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint-BarthÃ©lemy",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivia",
    	BQ: "Karibisk Nederland",
    	BR: "Brasil",
    	BS: "Bahamas",
    	BT: "Bhutan",
    	BV: "BouvetÃ¸ya",
    	BW: "Botswana",
    	BY: "Hviterussland",
    	BZ: "Belize",
    	CA: "Canada",
    	CC: "KokosÃ¸yene",
    	CD: "Kongo",
    	CF: "Den sentralafrikanske republikk",
    	CG: "Kongo-Brazzaville",
    	CH: "Sveits",
    	CI: "Elfenbenskysten",
    	CK: "CookÃ¸yene",
    	CL: "Chile",
    	CM: "Kamerun",
    	CN: "Kina",
    	CO: "Colombia",
    	CR: "Costa Rica",
    	CU: "Cuba",
    	CV: "Kapp Verde",
    	CW: "CuraÃ§ao",
    	CX: "ChristmasÃ¸ya",
    	CY: "Kypros",
    	CZ: "Tsjekkia",
    	DE: "Tyskland",
    	DJ: "Djibouti",
    	DK: "Danmark",
    	DM: "Dominica",
    	DO: "Den dominikanske republikk",
    	DZ: "Algerie",
    	EC: "Ecuador",
    	EE: "Estland",
    	EG: "Egypt",
    	EH: "Vest-Sahara",
    	ER: "Eritrea",
    	ES: "Spania",
    	ET: "Etiopia",
    	FI: "Finland",
    	FJ: "Fiji",
    	FK: "FalklandsÃ¸yene",
    	FM: "MikronesiafÃ¸derasjonen",
    	FO: "FÃ¦rÃ¸yene",
    	FR: "Frankrike",
    	GA: "Gabon",
    	GB: "Storbritannia",
    	GD: "Grenada",
    	GE: "Georgia",
    	GF: "Fransk Guyana",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GL: "GrÃ¸nland",
    	GM: "Gambia",
    	GN: "Guinea",
    	GP: "Guadeloupe",
    	GQ: "Ekvatorial-Guinea",
    	GR: "Hellas",
    	GS: "SÃ¸r-Georgia og de sÃ¸re SandwichÃ¸yene",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HK: "Hongkong",
    	HM: "Heard- og McDonald-Ã¸yene",
    	HN: "Honduras",
    	HR: "Kroatia",
    	HT: "Haiti",
    	HU: "Ungarn",
    	ID: "Indonesia",
    	IE: "Irland",
    	IL: "Israel",
    	IM: "Man",
    	IN: "India",
    	IO: "Britisk territorium i Indiahavet",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Island",
    	IT: "Italia",
    	JE: "Jersey",
    	JM: "Jamaica",
    	JO: "Jordan",
    	JP: "Japan",
    	KE: "Kenya",
    	KG: "Kirgisistan",
    	KH: "Kambodsja",
    	KI: "Kiribati",
    	KM: "Komorene",
    	KN: "Saint Kitts og Nevis",
    	KP: "Nord-Korea",
    	KR: "SÃ¸r-Korea",
    	KW: "Kuwait",
    	KY: "CaymanÃ¸yene",
    	KZ: "Kasakhstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "Saint Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberia",
    	LS: "Lesotho",
    	LT: "Litauen",
    	LU: "Luxembourg",
    	LV: "Latvia",
    	LY: "Libya",
    	MA: "Marokko",
    	MC: "Monaco",
    	MD: "Moldova",
    	ME: "Montenegro",
    	MF: "Saint-Martin",
    	MG: "Madagaskar",
    	MH: "MarshallÃ¸yene",
    	MK: "Makedonia",
    	ML: "Mali",
    	MM: "Burma",
    	MN: "Mongolia",
    	MO: "Macao",
    	MP: "Nord-Marianene",
    	MQ: "Martinique",
    	MR: "Mauritania",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldivene",
    	MW: "Malawi",
    	MX: "Mexico",
    	MY: "Malaysia",
    	MZ: "Mosambik",
    	NA: "Namibia",
    	NC: "Ny-Caledonia",
    	NE: "Niger",
    	NF: "Norfolk Island",
    	NG: "Nigeria",
    	NI: "Nicaragua",
    	NL: "Nederland",
    	NO: "Norge",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "New Zealand",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Fransk Polynesia",
    	PG: "Papua Ny-Guinea",
    	PH: "Filippinene",
    	PK: "Pakistan",
    	PL: "Polen",
    	PM: "Saint-Pierre-et-Miquelon",
    	PN: "Pitcairn",
    	PR: "Puerto Rico",
    	PS: "De okkuperte palestinske omrÃ¥dene",
    	PT: "Portugal",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "Romania",
    	RS: "Serbia",
    	RU: "Russland",
    	RW: "Rwanda",
    	SA: "Saudi-Arabia",
    	SB: "SalomonÃ¸yene",
    	SC: "Seychellene",
    	SD: "Sudan",
    	SE: "Sverige",
    	SG: "Singapore",
    	SH: "St. Helena",
    	SI: "Slovenia",
    	SJ: "Svalbard og Jan Mayen",
    	SK: "Slovakia",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalia",
    	SR: "Surinam",
    	SS: "SÃ¸r-Sudan",
    	ST: "SÃ£o TomÃ© og PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint Maarten (Nederlandsk del)",
    	SY: "Syria",
    	SZ: "Swaziland",
    	TC: "Turks- og CaicosÃ¸yene",
    	TD: "Tsjad",
    	TF: "SÃ¸re franske territorier",
    	TG: "Togo",
    	TH: "Thailand",
    	TJ: "Tadsjikistan",
    	TK: "Tokelau",
    	TL: "Ãst-Timor",
    	TM: "Turkmenistan",
    	TN: "Tunisia",
    	TO: "Tonga",
    	TR: "Tyrkia",
    	TT: "Trinidad og Tobago",
    	TV: "Tuvalu",
    	TW: "Taiwan",
    	TZ: "Tanzania",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "USA, mindre, utenforliggende Ã¸yer",
    	US: "USA",
    	UY: "Uruguay",
    	UZ: "Usbekistan",
    	VA: "Vatikanstaten",
    	VC: "Saint Vincent og Grenadinene",
    	VE: "Venezuela",
    	VG: "JomfruÃ¸yene (Britisk)",
    	VI: "JomfruÃ¸yene (USA)",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis- og FutunaÃ¸yene",
    	WS: "Samoa",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "SÃ¸r-Afrika",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var nb = {
    	locale: locale$v,
    	countries: countries$v
    };

    var nb$1 = /*#__PURE__*/Object.freeze({
        locale: locale$v,
        countries: countries$v,
        default: nb
    });

    var locale$w = "nl";
    var countries$w = {
    	AF: "Afghanistan",
    	AL: "AlbaniÃ«",
    	DZ: "Algerije",
    	AS: "Amerikaans-Samoa",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarctica",
    	AG: "Antigua en Barbuda",
    	AR: "ArgentiniÃ«",
    	AM: "ArmeniÃ«",
    	AW: "Aruba",
    	AU: "AustraliÃ«",
    	AT: "Oostenrijk",
    	AZ: "Azerbeidzjan",
    	BS: "Bahama's",
    	BH: "Bahrein",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BY: "Wit-Rusland",
    	BE: "BelgiÃ«",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermuda",
    	BT: "Bhutan",
    	BO: "BoliviÃ«",
    	BA: "BosniÃ«-Herzegovina",
    	BW: "Botswana",
    	BV: "Bouvet Eiland",
    	BR: "BraziliÃ«",
    	IO: "Brits Indische oceaan",
    	BN: "Brunei Darussalam",
    	BG: "Bulgarije",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "Cambodja",
    	CM: "Kameroen",
    	CA: "Canada",
    	CV: "KaapverdiÃ«",
    	KY: "Kaaimaneilanden",
    	CF: "Centraal-Afrikaanse Republiek",
    	TD: "Tsjaad",
    	CL: "Chili",
    	CN: "China",
    	CX: "Christmaseiland",
    	CC: "Cocoseilanden",
    	CO: "Colombia",
    	KM: "Comoren",
    	CG: "Congo, Volksrepubliek",
    	CD: "Congo, Democratische Republiek",
    	CK: "Cookeilanden",
    	CR: "Costa Rica",
    	CI: "Ivoorkust",
    	HR: "KroatiÃ«",
    	CU: "Cuba",
    	CY: "Cyprus",
    	CZ: "TsjechiÃ«",
    	DK: "Denemarken",
    	DJ: "Djibouti",
    	DM: "Dominica",
    	DO: "Dominicaanse Republiek",
    	EC: "Ecuador",
    	EG: "Egypte",
    	SV: "El Salvador",
    	GQ: "Equatoriaal-Guinea",
    	ER: "Eritrea",
    	EE: "Estland",
    	ET: "EthiopiÃ«",
    	FK: "Falklandeilanden",
    	FO: "FaerÃ¶er",
    	FJ: "Fiji",
    	FI: "Finland",
    	FR: "Frankrijk",
    	GF: "Frans-Guyana",
    	PF: "Frans-PolynesiÃ«",
    	TF: "Franse Zuidelijke Gebieden",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "GeorgiÃ«",
    	DE: "Duitsland",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "Griekenland",
    	GL: "Groenland",
    	GD: "Grenada",
    	GP: "Guadeloupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GN: "Guinea",
    	GW: "Guinee-Bissau",
    	GY: "Guyana",
    	HT: "HaÃ¯ti",
    	HM: "Heard en McDonaldeilanden",
    	VA: "Heilige Stoel",
    	HN: "Honduras",
    	HK: "Hong Kong",
    	HU: "Hongarije",
    	IS: "IJsland",
    	IN: "India",
    	ID: "Indonesia",
    	IR: "Iran",
    	IQ: "Irak",
    	IE: "Ierland",
    	IL: "IsraÃ«l",
    	IT: "ItaliÃ«",
    	JM: "Jamaica",
    	JP: "Japan",
    	JO: "JordaniÃ«",
    	KZ: "Kazachstan",
    	KE: "Kenia",
    	KI: "Kiribati",
    	KP: "Noord-Korea",
    	KR: "Zuid-Korea",
    	KW: "Koeweit",
    	KG: "Kirgizstan",
    	LA: "Laos",
    	LV: "Letland",
    	LB: "Libanon",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "LibiÃ«",
    	LI: "Liechtenstein",
    	LT: "Litouwen",
    	LU: "Luxemburg",
    	MO: "Macao",
    	MK: "MacedoniÃ«, Ex-Joegoslavische Republiek",
    	MG: "Madagaskar",
    	MW: "Malawi",
    	MY: "MaleisiÃ«",
    	MV: "Maldiven",
    	ML: "Mali",
    	MT: "Malta",
    	MH: "Marshalleilanden",
    	MQ: "Martinique",
    	MR: "MauritaniÃ«",
    	MU: "Mauritius",
    	YT: "Mayotte",
    	MX: "Mexico",
    	FM: "MicronesiÃ«, Federale Staten",
    	MD: "MoldaviÃ«",
    	MC: "Monaco",
    	MN: "MongoliÃ«",
    	MS: "Montserrat",
    	MA: "Marokko",
    	MZ: "Mozambique",
    	MM: "Myanmar",
    	NA: "NamibiÃ«",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "Nederland",
    	NC: "Nieuw-CaledoniÃ«",
    	NZ: "Nieuw-Zeeland",
    	NI: "Nicaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Norfolk",
    	MP: "Noordelijke Marianen",
    	NO: "Noorwegen",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestina",
    	PA: "Panama",
    	PG: "Papoea-Nieuw-Guinea",
    	PY: "Paraguay",
    	PE: "Peru",
    	PH: "Filipijnen",
    	PN: "Pitcairn",
    	PL: "Polen",
    	PT: "Portugal",
    	PR: "Puerto Rico",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "RoemeniÃ«",
    	RU: "Rusland",
    	RW: "Rwanda",
    	SH: "Sint-Helena",
    	KN: "Saint Kitts en Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint-Pierre en Miquelon",
    	VC: "Saint Vincent en de Grenadines",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "SÃ£o TomÃ© en Principe",
    	SA: "Saudi-ArabiÃ«",
    	SN: "Senegal",
    	SC: "Seychellen",
    	SL: "Sierra Leone",
    	SG: "Singapore",
    	SK: "Slowakije",
    	SI: "SloveniÃ«",
    	SB: "Salomonseilanden",
    	SO: "SomaliÃ«",
    	ZA: "Zuid-Afrika",
    	GS: "Zuid-Georgia en de Zuidelijke Sandwicheilanden",
    	ES: "Spanje",
    	LK: "Sri Lanka",
    	SD: "Soedan",
    	SR: "Suriname",
    	SJ: "Spitsbergen en Jan Mayen",
    	SZ: "Ngwane, Koninkrijk Swaziland",
    	SE: "Zweden",
    	CH: "Zwitserland",
    	SY: "SyriÃ«",
    	TW: "Taiwan",
    	TJ: "Tadzjikistan",
    	TZ: "Tanzania, Verenigde Republiek",
    	TH: "Thailand",
    	TL: "Timor Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad en Tobago",
    	TN: "TunesiÃ«",
    	TR: "Turkije",
    	TM: "Turkmenistan",
    	TC: "Turks- en Caicoseilanden",
    	TV: "Tuvalu",
    	UG: "Oeganda",
    	UA: "OekraÃ¯ne",
    	AE: "Verenigde Arabische Emiraten",
    	GB: "Verenigd Koninkrijk",
    	US: "Verenigde Staten van Amerika",
    	UM: "Ver afgelegen eilandjes van de Verenigde Staten",
    	UY: "Uruguay",
    	UZ: "Oezbekistan",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "Vietnam",
    	VG: "Maagdeneilanden, Britse",
    	VI: "Maagdeneilanden, Amerikaanse",
    	WF: "Wallis en Futuna",
    	EH: "Westelijke Sahara",
    	YE: "Jemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Ãland",
    	BQ: "Bonaire, Sint Eustatius en Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Man Eiland",
    	JE: "Jersey",
    	ME: "Montenegro",
    	BL: "Saint BarthÃ©lemy",
    	MF: "Sint-Maarten (Frans deel)",
    	RS: "ServiÃ«",
    	SX: "Sint Maarten (Nederlands deel)",
    	SS: "Zuid-Soedan",
    	XK: "Kosovo"
    };
    var nl = {
    	locale: locale$w,
    	countries: countries$w
    };

    var nl$1 = /*#__PURE__*/Object.freeze({
        locale: locale$w,
        countries: countries$w,
        default: nl
    });

    var locale$x = "nn";
    var countries$x = {
    	AD: "Andorra",
    	AE: "Dei sameinte arabiske emirata",
    	AF: "Afghanistan",
    	AG: "Antigua og Barbuda",
    	AI: "Anguilla",
    	AL: "Albania",
    	AM: "Armenia",
    	AO: "Angola",
    	AQ: "Antarktis",
    	AR: "Argentina",
    	AS: "Amerikansk Samoa",
    	AT: "Austerrike",
    	AU: "Australia",
    	AW: "Aruba",
    	AX: "Ãland",
    	AZ: "Aserbajdsjan",
    	BA: "Bosnia-Hercegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgia",
    	BF: "Burkina Faso",
    	BG: "Bulgaria",
    	BH: "Bahrain",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint-BarthÃ©lemy",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivia",
    	BQ: "Karibisk Nederland",
    	BR: "Brasil",
    	BS: "Bahamas",
    	BT: "Bhutan",
    	BV: "BouvetÃ¸ya",
    	BW: "Botswana",
    	BY: "Kviterussland",
    	BZ: "Belize",
    	CA: "Canada",
    	CC: "KokosÃ¸yane",
    	CD: "Kongo",
    	CF: "Den sentralafrikanske republikken",
    	CG: "Kongo-Brazzaville",
    	CH: "Sveits",
    	CI: "Elfenbeinskysten",
    	CK: "CookÃ¸yane",
    	CL: "Chile",
    	CM: "Kamerun",
    	CN: "Kina",
    	CO: "Colombia",
    	CR: "Costa Rica",
    	CU: "Cuba",
    	CV: "Kapp Verde",
    	CW: "CuraÃ§ao",
    	CX: "ChristmasÃ¸ya",
    	CY: "Kypros",
    	CZ: "Tsjekkia",
    	DE: "Tyskland",
    	DJ: "Djibouti",
    	DK: "Danmark",
    	DM: "Dominica",
    	DO: "Den dominikanske republikken",
    	DZ: "Algerie",
    	EC: "Ecuador",
    	EE: "Estland",
    	EG: "Egypt",
    	EH: "Vest-Sahara",
    	ER: "Eritrea",
    	ES: "Spania",
    	ET: "Etiopia",
    	FI: "Finland",
    	FJ: "Fiji",
    	FK: "FalklandsÃ¸yane",
    	FM: "MikronesiafÃ¸derasjonen",
    	FO: "FÃ¦rÃ¸yane",
    	FR: "Frankrike",
    	GA: "Gabon",
    	GB: "Storbritannia",
    	GD: "Grenada",
    	GE: "Georgia",
    	GF: "Fransk Guyana",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GL: "GrÃ¸nland",
    	GM: "Gambia",
    	GN: "Guinea",
    	GP: "Guadeloupe",
    	GQ: "Ekvatorial-Guinea",
    	GR: "Hellas",
    	GS: "SÃ¸r-Georgia og de sÃ¸re SandwichÃ¸yane",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guinea-Bissau",
    	GY: "Guyana",
    	HK: "Hongkong",
    	HM: "Heard- og McDonald-Ã¸yane",
    	HN: "Honduras",
    	HR: "Kroatia",
    	HT: "Haiti",
    	HU: "Ungarn",
    	ID: "Indonesia",
    	IE: "Irland",
    	IL: "Israel",
    	IM: "Man",
    	IN: "India",
    	IO: "Britisk territorium i Indiahavet",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Island",
    	IT: "Italia",
    	JE: "Jersey",
    	JM: "Jamaica",
    	JO: "Jordan",
    	JP: "Japan",
    	KE: "Kenya",
    	KG: "Kirgisistan",
    	KH: "Kambodsja",
    	KI: "Kiribati",
    	KM: "Komorane",
    	KN: "Saint Kitts og Nevis",
    	KP: "Nord-Korea",
    	KR: "SÃ¸r-Korea",
    	KW: "Kuwait",
    	KY: "CaymanÃ¸yane",
    	KZ: "Kasakhstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "Saint Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberia",
    	LS: "Lesotho",
    	LT: "Litauen",
    	LU: "Luxembourg",
    	LV: "Latvia",
    	LY: "Libya",
    	MA: "Marokko",
    	MC: "Monaco",
    	MD: "Moldova",
    	ME: "Montenegro",
    	MF: "Saint-Martin",
    	MG: "Madagaskar",
    	MH: "MarshallÃ¸yane",
    	MK: "Makedonia",
    	ML: "Mali",
    	MM: "Burma",
    	MN: "Mongolia",
    	MO: "Macao",
    	MP: "Nord-Marianane",
    	MQ: "Martinique",
    	MR: "Mauritania",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldivane",
    	MW: "Malawi",
    	MX: "Mexico",
    	MY: "Malaysia",
    	MZ: "Mosambik",
    	NA: "Namibia",
    	NC: "Ny-Caledonia",
    	NE: "Niger",
    	NF: "Norfolk Island",
    	NG: "Nigeria",
    	NI: "Nicaragua",
    	NL: "Nederland",
    	NO: "Noreg",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "New Zealand",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Fransk Polynesia",
    	PG: "Papua Ny-Guinea",
    	PH: "Filippinane",
    	PK: "Pakistan",
    	PL: "Polen",
    	PM: "Saint-Pierre-et-Miquelon",
    	PN: "Pitcairn",
    	PR: "Puerto Rico",
    	PS: "Dei okkuperte palestinske omrÃ¥da",
    	PT: "Portugal",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "Romania",
    	RS: "Serbia",
    	RU: "Russland",
    	RW: "Rwanda",
    	SA: "Saudi-Arabia",
    	SB: "SalomonÃ¸yane",
    	SC: "Seychellane",
    	SD: "Sudan",
    	SE: "Sverige",
    	SG: "Singapore",
    	SH: "St. Helena",
    	SI: "Slovenia",
    	SJ: "Svalbard og Jan Mayen",
    	SK: "Slovakia",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalia",
    	SR: "Surinam",
    	SS: "SÃ¸r-Sudan",
    	ST: "SÃ£o TomÃ© og PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint Maarten (Nederlandsk del)",
    	SY: "Syria",
    	SZ: "Swaziland",
    	TC: "Turks- og CaicosÃ¸yane",
    	TD: "Tsjad",
    	TF: "SÃ¸re franske territorier",
    	TG: "Togo",
    	TH: "Thailand",
    	TJ: "Tadsjikistan",
    	TK: "Tokelau",
    	TL: "Aust-Timor",
    	TM: "Turkmenistan",
    	TN: "Tunisia",
    	TO: "Tonga",
    	TR: "Tyrkia",
    	TT: "Trinidad og Tobago",
    	TV: "Tuvalu",
    	TW: "Taiwan",
    	TZ: "Tanzania",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "USA, mindre, utanforliggande Ã¸yar",
    	US: "USA",
    	UY: "Uruguay",
    	UZ: "Usbekistan",
    	VA: "Vatikanstaten",
    	VC: "Saint Vincent og Grenadinane",
    	VE: "Venezuela",
    	VG: "JomfruÃ¸yane (Britisk)",
    	VI: "JomfruÃ¸yane (USA)",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis- og FutunaÃ¸yane",
    	WS: "Samoa",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "SÃ¸r-Afrika",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var nn = {
    	locale: locale$x,
    	countries: countries$x
    };

    var nn$1 = /*#__PURE__*/Object.freeze({
        locale: locale$x,
        countries: countries$x,
        default: nn
    });

    var locale$y = "pl";
    var countries$y = {
    	AF: "Afganistan",
    	AL: "Albania",
    	DZ: "Algieria",
    	AS: "Samoa AmerykaÅskie",
    	AD: "Andora",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "Antarktyka",
    	AG: "Antigua i Barbuda",
    	AR: "Argentyna",
    	AM: "Armenia",
    	AW: "Aruba",
    	AU: "Australia",
    	AT: "Austria",
    	AZ: "AzerbejdÅ¼an",
    	BS: "Bahamy",
    	BH: "Bahrajn",
    	BD: "Bangladesz",
    	BB: "Barbados",
    	BY: "BiaÅoruÅ",
    	BE: "Belgia",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermudy",
    	BT: "Bhutan",
    	BO: "Boliwia",
    	BA: "BoÅnia i Hercegowina",
    	BW: "Botswana",
    	BV: "Wyspa Bouveta",
    	BR: "Brazylia",
    	IO: "Brytyjskie Terytorium Oceanu Indyjskiego",
    	BN: "Brunei",
    	BG: "BuÅgaria",
    	BF: "Burkina Faso",
    	BI: "Burundi",
    	KH: "KambodÅ¼a",
    	CM: "Kamerun",
    	CA: "Kanada",
    	CV: "Republika Zielonego PrzylÄdka",
    	KY: "Kajmany",
    	CF: "Republika ÅrodkowoafrykaÅska",
    	TD: "Czad",
    	CL: "Chile",
    	CN: "Chiny",
    	CX: "Wyspa BoÅ¼ego Narodzenia",
    	CC: "Wyspy Kokosowe",
    	CO: "Kolumbia",
    	KM: "Komory",
    	CG: "Kongo",
    	CD: "Demokratyczna Republika Konga",
    	CK: "Wyspy Cooka",
    	CR: "Kostaryka",
    	CI: "WybrzeÅ¼e KoÅci SÅoniowej",
    	HR: "Chorwacja",
    	CU: "Kuba",
    	CY: "Cypr",
    	CZ: "Czechy",
    	DK: "Dania",
    	DJ: "DÅ¼ibuti",
    	DM: "Dominika",
    	DO: "Dominikana",
    	EC: "Ekwador",
    	EG: "Egipt",
    	SV: "Salwador",
    	GQ: "Gwinea RÃ³wnikowa",
    	ER: "Erytrea",
    	EE: "Estonia",
    	ET: "Etiopia",
    	FK: "Falklandy",
    	FO: "Wyspy Owcze",
    	FJ: "FidÅ¼i",
    	FI: "Finlandia",
    	FR: "Francja",
    	GF: "Gujana Francuska",
    	PF: "Polinezja Francuska",
    	TF: "Francuskie Terytoria PoÅudniowe i Antarktyczne",
    	GA: "Gabon",
    	GM: "Gambia",
    	GE: "Gruzja",
    	DE: "Niemcy",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GR: "Grecja",
    	GL: "Grenlandia",
    	GD: "Grenada",
    	GP: "Gwadelupa",
    	GU: "Guam",
    	GT: "Gwatemala",
    	GN: "Gwinea",
    	GW: "Gwinea Bissau",
    	GY: "Gujana",
    	HT: "Haiti",
    	HM: "Wyspy Heard i McDonalda",
    	VA: "Watykan",
    	HN: "Honduras",
    	HK: "Hongkong",
    	HU: "WÄgry",
    	IS: "Islandia",
    	IN: "Indie",
    	ID: "Indonezja",
    	IR: "Iran",
    	IQ: "Irak",
    	IE: "Irlandia",
    	IL: "Izrael",
    	IT: "WÅochy",
    	JM: "Jamajka",
    	JP: "Japonia",
    	JO: "Jordania",
    	KZ: "Kazachstan",
    	KE: "Kenia",
    	KI: "Kiribati",
    	KP: "Korea PÃ³Ånocna",
    	KR: "Korea PoÅudniowa",
    	KW: "Kuwejt",
    	KG: "Kirgistan",
    	LA: "Laos",
    	LV: "Åotwa",
    	LB: "Liban",
    	LS: "Lesotho",
    	LR: "Liberia",
    	LY: "Libia",
    	LI: "Liechtenstein",
    	LT: "Litwa",
    	LU: "Luksemburg",
    	MO: "Makau",
    	MK: "Macedonia",
    	MG: "Madagaskar",
    	MW: "Malawi",
    	MY: "Malezja",
    	MV: "Malediwy",
    	ML: "Mali",
    	MT: "Malta",
    	MH: "Wyspy Marshalla",
    	MQ: "Martynika",
    	MR: "Mauretania",
    	MU: "Mauritius",
    	YT: "Majotta",
    	MX: "Meksyk",
    	FM: "Mikronezja",
    	MD: "MoÅdawia",
    	MC: "Monako",
    	MN: "Mongolia",
    	MS: "Montserrat",
    	MA: "Maroko",
    	MZ: "Mozambik",
    	MM: "Mjanma",
    	NA: "Namibia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NL: "Holandia",
    	NC: "Nowa Kaledonia",
    	NZ: "Nowa Zelandia",
    	NI: "Nikaragua",
    	NE: "Niger",
    	NG: "Nigeria",
    	NU: "Niue",
    	NF: "Norfolk",
    	MP: "Mariany PÃ³Ånocne",
    	NO: "Norwegia",
    	OM: "Oman",
    	PK: "Pakistan",
    	PW: "Palau",
    	PS: "Palestyna",
    	PA: "Panama",
    	PG: "Papua-Nowa Gwinea",
    	PY: "Paragwaj",
    	PE: "Peru",
    	PH: "Filipiny",
    	PN: "Pitcairn",
    	PL: "Polska",
    	PT: "Portugalia",
    	PR: "Portoryko",
    	QA: "Katar",
    	RE: "Reunion",
    	RO: "Rumunia",
    	RU: "Rosja",
    	RW: "Rwanda",
    	SH: "Wyspa ÅwiÄtej Heleny, Wyspa WniebowstÄpienia i Tristan da Cunha",
    	KN: "Saint Kitts i Nevis",
    	LC: "Saint Lucia",
    	PM: "Saint-Pierre i Miquelon",
    	VC: "Saint Vincent i Grenadyny",
    	WS: "Samoa",
    	SM: "San Marino",
    	ST: "Wyspy ÅwiÄtego Tomasza i KsiÄÅ¼Äca",
    	SA: "Arabia Saudyjska",
    	SN: "Senegal",
    	SC: "Seszele",
    	SL: "Sierra Leone",
    	SG: "Singapur",
    	SK: "SÅowacja",
    	SI: "SÅowenia",
    	SB: "Wyspy Salomona",
    	SO: "Somalia",
    	ZA: "PoÅudniowa Afryka",
    	GS: "Georgia PoÅudniowa i Sandwich PoÅudniowy",
    	ES: "Hiszpania",
    	LK: "Sri Lanka",
    	SD: "Sudan",
    	SR: "Surinam",
    	SJ: "Svalbard i Jan Mayen",
    	SZ: "Suazi",
    	SE: "Szwecja",
    	CH: "Szwajcaria",
    	SY: "Syria",
    	TW: "Tajwan",
    	TJ: "TadÅ¼ykistan",
    	TZ: "Tanzania",
    	TH: "Tajlandia",
    	TL: "Timor Wschodni",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trynidad i Tobago",
    	TN: "Tunezja",
    	TR: "Turcja",
    	TM: "Turkmenistan",
    	TC: "Turks i Caicos",
    	TV: "Tuvalu",
    	UG: "Uganda",
    	UA: "Ukraina",
    	AE: "Zjednoczone Emiraty Arabskie",
    	GB: "Wielka Brytania",
    	US: "Stany Zjednoczone",
    	UM: "Dalekie Wyspy Mniejsze StanÃ³w Zjednoczonych",
    	UY: "Urugwaj",
    	UZ: "Uzbekistan",
    	VU: "Vanuatu",
    	VE: "Wenezuela",
    	VN: "Wietnam",
    	VG: "Brytyjskie Wyspy Dziewicze",
    	VI: "Wyspy Dziewicze StanÃ³w Zjednoczonych",
    	WF: "Wallis i Futuna",
    	EH: "Sahara Zachodnia",
    	YE: "Jemen",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	AX: "Wyspy Alandzkie",
    	BQ: "Bonaire, Sint Eustatius i Saba",
    	CW: "CuraÃ§ao",
    	GG: "Guernsey",
    	IM: "Wyspa Man",
    	JE: "Jersey",
    	ME: "CzarnogÃ³ra",
    	BL: "Saint-BarthÃ©lemy",
    	MF: "Saint-Martin",
    	RS: "Serbia",
    	SX: "Sint Maarten",
    	SS: "Sudan PoÅudniowy",
    	XK: "Kosowo"
    };
    var pl = {
    	locale: locale$y,
    	countries: countries$y
    };

    var pl$1 = /*#__PURE__*/Object.freeze({
        locale: locale$y,
        countries: countries$y,
        default: pl
    });

    var locale$z = "pt";
    var countries$z = {
    	AF: "AfeganistÃ£o",
    	ZA: "Ãfrica do Sul",
    	AL: "AlbÃ¢nia",
    	DE: "Alemanha",
    	AD: "Andorra",
    	AO: "Angola",
    	AI: "Anguilla",
    	AQ: "AntÃ¡rtida",
    	AG: "AntÃ­gua e Barbuda",
    	SA: "ArÃ¡bia Saudita",
    	DZ: "ArgÃ©lia",
    	AR: "Argentina",
    	AM: "ArmÃªnia",
    	AW: "Aruba",
    	AU: "AustrÃ¡lia",
    	AT: "Ãustria",
    	AZ: "AzerbaijÃ£o",
    	BS: "Bahamas",
    	BH: "Bahrein",
    	BD: "Bangladesh",
    	BB: "Barbados",
    	BE: "BÃ©lgica",
    	BZ: "Belize",
    	BJ: "Benin",
    	BM: "Bermudas",
    	BY: "BielorrÃºssia",
    	BO: "BolÃ­via",
    	BA: "BÃ³snia e Herzegovina",
    	BW: "Botsuana",
    	BR: "Brasil",
    	BN: "Brunei",
    	BG: "BulgÃ¡ria",
    	BF: "Burquina Faso",
    	BI: "Burundi",
    	BT: "ButÃ£o",
    	CV: "Cabo Verde",
    	KH: "Camboja",
    	CA: "CanadÃ¡",
    	QA: "Catar",
    	KZ: "CazaquistÃ£o",
    	TD: "Chade",
    	CL: "Chile",
    	CN: "China",
    	CY: "Chipre",
    	VA: "Cidade do Vaticano",
    	SG: "Cingapura",
    	CO: "ColÃ´mbia",
    	KM: "Comores",
    	CG: "Congo - Brazzaville",
    	CD: "Congo - Kinshasa",
    	KP: "Coreia do Norte",
    	KR: "Coreia do Sul",
    	CI: "Costa do Marfim",
    	CR: "Costa Rica",
    	HR: "CroÃ¡cia",
    	CU: "Cuba",
    	CW: "CuraÃ§ao",
    	DK: "Dinamarca",
    	DJ: "Djibuti",
    	DM: "Dominica",
    	EG: "Egito",
    	SV: "El Salvador",
    	AE: "Emirados Ãrabes Unidos",
    	EC: "Equador",
    	ER: "Eritreia",
    	SK: "EslovÃ¡quia",
    	SI: "EslovÃªnia",
    	ES: "Espanha",
    	US: "Estados Unidos",
    	EE: "EstÃ´nia",
    	ET: "EtiÃ³pia",
    	FJ: "Fiji",
    	PH: "Filipinas",
    	FI: "FinlÃ¢ndia",
    	FR: "FranÃ§a",
    	GA: "GabÃ£o",
    	GM: "GÃ¢mbia",
    	GH: "Gana",
    	GE: "GeÃ³rgia",
    	GS: "GeÃ³rgia do Sul e Ilhas Sandwich do Sul",
    	GI: "Gibraltar",
    	GD: "Granada",
    	GR: "GrÃ©cia",
    	GL: "GroenlÃ¢ndia",
    	GP: "Guadalupe",
    	GU: "Guam",
    	GT: "Guatemala",
    	GG: "Guernsey",
    	GY: "Guiana",
    	GF: "Guiana Francesa",
    	GN: "GuinÃ©",
    	GW: "GuinÃ© Bissau",
    	GQ: "GuinÃ© Equatorial",
    	HT: "Haiti",
    	NL: "Holanda",
    	HN: "Honduras",
    	HK: "Hong Kong, RAE da China",
    	HU: "Hungria",
    	YE: "IÃªmen",
    	BV: "Ilhas Bouvet",
    	CX: "Ilha Christmas",
    	IM: "Ilha de Man",
    	NF: "Ilha Norfolk",
    	AX: "Ilhas Ãland",
    	KY: "Ilhas Caiman",
    	CC: "Ilhas Cocos (Keeling)",
    	CK: "Ilhas Cook",
    	UM: "Ilhas Distantes dos EUA",
    	HM: "Ilha Heard e Ilha McDonald",
    	FO: "Ilhas Faroe",
    	FK: "Ilhas Malvinas",
    	MP: "Ilhas Marianas do Norte",
    	MH: "Ilhas Marshall",
    	PN: "Ilhas Pitcairn",
    	SB: "Ilhas SalomÃ£o",
    	TC: "Ilhas Turks e Caicos",
    	VG: "Ilhas Virgens BritÃ¢nicas",
    	VI: "Ilhas Virgens dos EUA",
    	IN: "Ãndia",
    	ID: "IndonÃ©sia",
    	IR: "IrÃ£",
    	IQ: "Iraque",
    	IE: "Irlanda",
    	IS: "IslÃ¢ndia",
    	IL: "Israel",
    	IT: "ItÃ¡lia",
    	JM: "Jamaica",
    	JP: "JapÃ£o",
    	JE: "Jersey",
    	JO: "JordÃ¢nia",
    	KW: "Kuwait",
    	LA: "Laos",
    	LS: "Lesoto",
    	LV: "LetÃ´nia",
    	LB: "LÃ­bano",
    	LR: "LibÃ©ria",
    	LY: "LÃ­bia",
    	LI: "Liechtenstein",
    	LT: "LituÃ¢nia",
    	LU: "Luxemburgo",
    	MO: "Macau, RAE da China",
    	MK: "MacedÃ´nia",
    	MG: "Madagascar",
    	MY: "MalÃ¡sia",
    	MW: "Malawi",
    	MV: "Maldivas",
    	ML: "Mali",
    	MT: "Malta",
    	MA: "Marrocos",
    	MQ: "Martinica",
    	MU: "MaurÃ­cio",
    	MR: "MauritÃ¢nia",
    	YT: "Mayotte",
    	MX: "MÃ©xico",
    	MM: "Mianmar (BirmÃ¢nia)",
    	FM: "MicronÃ©sia",
    	MZ: "MoÃ§ambique",
    	MD: "MoldÃ¡via",
    	MC: "MÃ´naco",
    	MN: "MongÃ³lia",
    	ME: "Montenegro",
    	MS: "Montserrat",
    	NA: "NamÃ­bia",
    	NR: "Nauru",
    	NP: "Nepal",
    	NI: "NicarÃ¡gua",
    	NE: "NÃ­ger",
    	NG: "NigÃ©ria",
    	NU: "Niue",
    	NO: "Noruega",
    	NC: "Nova CaledÃ´nia",
    	NZ: "Nova ZelÃ¢ndia",
    	OM: "OmÃ£",
    	BQ: "PaÃ­ses Baixos Caribenhos",
    	PW: "Palau",
    	PA: "PanamÃ¡",
    	PG: "Papua-Nova GuinÃ©",
    	PK: "PaquistÃ£o",
    	PY: "Paraguai",
    	PE: "Peru",
    	PF: "PolinÃ©sia Francesa",
    	PL: "PolÃ´nia",
    	PR: "Porto Rico",
    	PT: "Portugal",
    	KE: "QuÃªnia",
    	KG: "QuirguistÃ£o",
    	KI: "Quiribati",
    	GB: "Reino Unido",
    	CF: "RepÃºblica Centro-Africana",
    	DO: "RepÃºblica Dominicana",
    	CM: "RepÃºblica dos CamarÃµes",
    	CZ: "RepÃºblica Tcheca",
    	RE: "ReuniÃ£o",
    	RO: "RomÃªnia",
    	RW: "Ruanda",
    	RU: "RÃºssia",
    	EH: "Saara Ocidental",
    	PM: "Saint Pierre e Miquelon",
    	WS: "Samoa",
    	AS: "Samoa Americana",
    	SM: "San Marino",
    	SH: "Santa Helena",
    	LC: "Santa LÃºcia",
    	BL: "SÃ£o Bartolomeu",
    	KN: "SÃ£o CristÃ³vÃ£o e Nevis",
    	MF: "SÃ£o Martinho",
    	ST: "SÃ£o TomÃ© e PrÃ­ncipe",
    	VC: "SÃ£o Vicente e Granadinas",
    	SN: "Senegal",
    	SL: "Serra Leoa",
    	RS: "SÃ©rvia",
    	SC: "Seychelles",
    	SX: "Sint Maarten",
    	SY: "SÃ­ria",
    	SO: "SomÃ¡lia",
    	LK: "Sri Lanka",
    	SZ: "SuazilÃ¢ndia",
    	SD: "SudÃ£o",
    	SS: "SudÃ£o do Sul",
    	SE: "SuÃ©cia",
    	CH: "SuÃ­Ã§a",
    	SR: "Suriname",
    	SJ: "Svalbard e Jan Mayen",
    	TH: "TailÃ¢ndia",
    	TW: "Taiwan",
    	TJ: "TajiquistÃ£o",
    	TZ: "TanzÃ¢nia",
    	IO: "TerritÃ³rio BritÃ¢nico do Oceano Ãndico",
    	TF: "TerritÃ³rios Franceses do Sul",
    	PS: "TerritÃ³rios palestinos",
    	TL: "Timor-Leste",
    	TG: "Togo",
    	TK: "Tokelau",
    	TO: "Tonga",
    	TT: "Trinidad e Tobago",
    	TN: "TunÃ­sia",
    	TM: "TurcomenistÃ£o",
    	TR: "Turquia",
    	TV: "Tuvalu",
    	UA: "UcrÃ¢nia",
    	UG: "Uganda",
    	UY: "Uruguai",
    	UZ: "UzbequistÃ£o",
    	VU: "Vanuatu",
    	VE: "Venezuela",
    	VN: "VietnÃ£",
    	WF: "Wallis e Futuna",
    	ZM: "ZÃ¢mbia",
    	ZW: "ZimbÃ¡bue",
    	XK: "Kosovo"
    };
    var pt = {
    	locale: locale$z,
    	countries: countries$z
    };

    var pt$1 = /*#__PURE__*/Object.freeze({
        locale: locale$z,
        countries: countries$z,
        default: pt
    });

    var locale$A = "ro";
    var countries$A = {
    	AD: "Andorra",
    	AE: "Emiratele Arabe Unite",
    	AF: "Afganistan",
    	AG: "Antigua Èi Barbuda",
    	AI: "Anguilla",
    	AL: "Albania",
    	AM: "Armenia",
    	AO: "Angola",
    	AQ: "Antarctica",
    	AR: "Argentina",
    	AS: "Samoa AmericanÄ",
    	AT: "Austria",
    	AU: "Australia",
    	AW: "Aruba",
    	AX: "Insulele Ãland",
    	AZ: "Azerbaidjan",
    	BA: "Bosnia Èi HerÈegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgia",
    	BF: "Burkina Faso",
    	BG: "Bulgaria",
    	BH: "Bahrain",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "SfÃ¢ntul Bartolomeu",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivia",
    	BQ: "Insulele Caraibe Olandeze",
    	BR: "Brazilia",
    	BS: "Bahamas",
    	BT: "Bhutan",
    	BV: "Insula Bouvet",
    	BW: "Botswana",
    	BY: "Belarus",
    	BZ: "Belize",
    	CA: "Canada",
    	CC: "Insulele Cocos (Keeling)",
    	CD: "Congo - Kinshasa",
    	CF: "Republica CentrafricanÄ",
    	CG: "Congo - Brazzaville",
    	CH: "ElveÈia",
    	CI: "CÃ´te dâIvoire",
    	CK: "Insulele Cook",
    	CL: "Chile",
    	CM: "Camerun",
    	CN: "China",
    	CO: "Columbia",
    	CR: "Costa Rica",
    	CU: "Cuba",
    	CV: "Capul Verde",
    	CW: "CuraÃ§ao",
    	CX: "Insula Christmas",
    	CY: "Cipru",
    	CZ: "Cehia",
    	DE: "Germania",
    	DJ: "Djibouti",
    	DK: "Danemarca",
    	DM: "Dominica",
    	DO: "Republica DominicanÄ",
    	DZ: "Algeria",
    	EC: "Ecuador",
    	EE: "Estonia",
    	EG: "Egipt",
    	EH: "Sahara OccidentalÄ",
    	ER: "Eritreea",
    	ES: "Spania",
    	ET: "Etiopia",
    	FI: "Finlanda",
    	FJ: "Fiji",
    	FK: "Insulele Falkland",
    	FM: "Micronezia",
    	FO: "Insulele Feroe",
    	FR: "FranÈa",
    	GA: "Gabon",
    	GB: "Regatul Unit",
    	GD: "Grenada",
    	GE: "Georgia",
    	GF: "Guyana FrancezÄ",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GL: "Groenlanda",
    	GM: "Gambia",
    	GN: "Guineea",
    	GP: "Guadelupa",
    	GQ: "Guineea EcuatorialÄ",
    	GR: "Grecia",
    	GS: "Georgia de Sud Èi Insulele Sandwich de Sud",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guineea-Bissau",
    	GY: "Guyana",
    	HK: "R.A.S. Hong Kong a Chinei",
    	HM: "Insula Heard Èi Insulele McDonald",
    	HN: "Honduras",
    	HR: "CroaÈia",
    	HT: "Haiti",
    	HU: "Ungaria",
    	ID: "Indonezia",
    	IE: "Irlanda",
    	IL: "Israel",
    	IM: "Insula Man",
    	IN: "India",
    	IO: "Teritoriul Britanic din Oceanul Indian",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Islanda",
    	IT: "Italia",
    	JE: "Jersey",
    	JM: "Jamaica",
    	JO: "Iordania",
    	JP: "Japonia",
    	KE: "Kenya",
    	KG: "KÃ¢rgÃ¢zstan",
    	KH: "Cambodgia",
    	KI: "Kiribati",
    	KM: "Comore",
    	KN: "Saint Kitts Èi Nevis",
    	KP: "Coreea de Nord",
    	KR: "Coreea de Sud",
    	KW: "Kuweit",
    	KY: "Insulele Cayman",
    	KZ: "Kazahstan",
    	LA: "Laos",
    	LB: "Liban",
    	LC: "SfÃ¢nta Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberia",
    	LS: "Lesotho",
    	LT: "Lituania",
    	LU: "Luxemburg",
    	LV: "Letonia",
    	LY: "Libia",
    	MA: "Maroc",
    	MC: "Monaco",
    	MD: "Republica Moldova",
    	ME: "Muntenegru",
    	MF: "SfÃ¢ntul Martin",
    	MG: "Madagascar",
    	MH: "Insulele Marshall",
    	MK: "Republica Macedonia",
    	ML: "Mali",
    	MM: "Myanmar",
    	MN: "Mongolia",
    	MO: "R.A.S. Macao a Chinei",
    	MP: "Insulele Mariane de Nord",
    	MQ: "Martinica",
    	MR: "Mauritania",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldive",
    	MW: "Malawi",
    	MX: "Mexic",
    	MY: "Malaysia",
    	MZ: "Mozambic",
    	NA: "Namibia",
    	NC: "Noua Caledonie",
    	NE: "Niger",
    	NF: "Insula Norfolk",
    	NG: "Nigeria",
    	NI: "Nicaragua",
    	NL: "ÈÄrile de Jos",
    	NO: "Norvegia",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Noua ZeelandÄ",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Polinezia FrancezÄ",
    	PG: "Papua-Noua Guinee",
    	PH: "Filipine",
    	PK: "Pakistan",
    	PL: "Polonia",
    	PM: "Saint-Pierre Èi Miquelon",
    	PN: "Insulele Pitcairn",
    	PR: "Puerto Rico",
    	PS: "Teritoriile Palestiniene",
    	PT: "Portugalia",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "RomÃ¢nia",
    	RS: "Serbia",
    	RU: "Rusia",
    	RW: "Rwanda",
    	SA: "Arabia SauditÄ",
    	SB: "Insulele Solomon",
    	SC: "Seychelles",
    	SD: "Sudan",
    	SE: "Suedia",
    	SG: "Singapore",
    	SH: "SfÃ¢nta Elena",
    	SI: "Slovenia",
    	SJ: "Svalbard Èi Jan Mayen",
    	SK: "Slovacia",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalia",
    	SR: "Suriname",
    	SS: "Sudanul de Sud",
    	ST: "Sao TomÃ© Èi PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint-Maarten",
    	SY: "Siria",
    	SZ: "Swaziland",
    	TC: "Insulele Turks Èi Caicos",
    	TD: "Ciad",
    	TF: "Teritoriile Australe Èi Antarctice Franceze",
    	TG: "Togo",
    	TH: "Thailanda",
    	TJ: "Tadjikistan",
    	TK: "Tokelau",
    	TL: "Timorul de Est",
    	TM: "Turkmenistan",
    	TN: "Tunisia",
    	TO: "Tonga",
    	TR: "Turcia",
    	TT: "Trinidad Èi Tobago",
    	TV: "Tuvalu",
    	TW: "Taiwan",
    	TZ: "Tanzania",
    	UA: "Ucraina",
    	UG: "Uganda",
    	UM: "Insulele ÃndepÄrtate ale S.U.A.",
    	US: "Statele Unite ale Americii",
    	UY: "Uruguay",
    	UZ: "Uzbekistan",
    	VA: "Statul CetÄÈii Vaticanului",
    	VC: "Saint Vincent Èi Grenadinele",
    	VE: "Venezuela",
    	VG: "Insulele Virgine Britanice",
    	VI: "Insulele Virgine Americane",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis Èi Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Yemen",
    	YT: "Mayotte",
    	ZA: "Africa de Sud",
    	ZM: "Zambia",
    	ZW: "Zimbabwe"
    };
    var ro = {
    	locale: locale$A,
    	countries: countries$A
    };

    var ro$1 = /*#__PURE__*/Object.freeze({
        locale: locale$A,
        countries: countries$A,
        default: ro
    });

    var locale$B = "ru";
    var countries$B = {
    	AU: "ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ",
    	AT: "ÐÐ²ÑÑÑÐ¸Ñ",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸Ðµ Ð¾ÑÑÑÐ¾Ð²Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸Ñ",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	VI: "ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ ÐÑÑÑÐ¾Ð²Ð° (Ð¡Ð¨Ð)",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¾Ðµ Ð¡Ð°Ð¼Ð¾Ð°",
    	AI: "ÐÐ½Ð³Ð¸Ð»ÑÑ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AD: "ÐÐ½Ð´Ð¾ÑÑÐ°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AM: "ÐÑÐ¼ÐµÐ½Ð¸Ñ",
    	AW: "ÐÑÑÐ±Ð°",
    	AF: "ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	BS: "ÐÐ°Ð³Ð°Ð¼Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BZ: "ÐÐµÐ»Ð¸Ð·",
    	BY: "ÐÐµÐ»Ð°ÑÑÑÑ",
    	BE: "ÐÐµÐ»ÑÐ³Ð¸Ñ",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BM: "ÐÐµÑÐ¼ÑÐ´Ñ",
    	BG: "ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ",
    	BQ: "ÐÐ¾Ð½ÑÐ¹Ñ, Ð¡Ð¸Ð½Ñ-Ð­ÑÑÐ°ÑÐ¸ÑÑ Ð¸ Ð¡Ð°Ð±Ð°",
    	BA: "ÐÐ¾ÑÐ½Ð¸Ñ Ð¸ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ",
    	IO: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ°Ñ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ñ Ð² ÐÐ½Ð´Ð¸Ð¹ÑÐºÐ¾Ð¼ Ð¾ÐºÐµÐ°Ð½Ðµ",
    	VG: "ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ ÐÑÑÑÐ¾Ð²Ð° (ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ñ)",
    	BN: "ÐÑÑÐ½ÐµÐ¹",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð°-Ð¤Ð°ÑÐ¾",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BT: "ÐÑÑÐ°Ð½",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	GB: "ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	HU: "ÐÐµÐ½Ð³ÑÐ¸Ñ",
    	VE: "ÐÐµÐ½ÐµÑÑÑÐ»Ð°",
    	UM: "ÐÐ½ÐµÑÐ½Ð¸Ðµ Ð¼Ð°Ð»ÑÐµ Ð¾ÑÑÑÐ¾Ð²Ð° (Ð¡Ð¨Ð)",
    	TL: "ÐÐ¾ÑÑÐ¾ÑÐ½ÑÐ¹ Ð¢Ð¸Ð¼Ð¾Ñ",
    	VN: "ÐÑÐµÑÐ½Ð°Ð¼",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	HT: "ÐÐ°Ð¸ÑÐ¸",
    	GY: "ÐÐ°Ð¹Ð°Ð½Ð°",
    	GM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	GH: "ÐÐ°Ð½Ð°",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GF: "ÐÐ²Ð¸Ð°Ð½Ð°",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑ",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ",
    	DE: "ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ",
    	GG: "ÐÐµÑÐ½ÑÐ¸",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	HN: "ÐÐ¾Ð½Ð´ÑÑÐ°Ñ",
    	HK: "ÐÐ¾Ð½ÐºÐ¾Ð½Ð³",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ",
    	GR: "ÐÑÐµÑÐ¸Ñ",
    	GE: "ÐÑÑÐ·Ð¸Ñ",
    	GU: "ÐÑÐ°Ð¼",
    	DK: "ÐÐ°Ð½Ð¸Ñ",
    	JE: "ÐÐ¶ÐµÑÑÐ¸",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÐ¸",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	CD: "ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð½Ð³Ð¾",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸Ñ",
    	EH: "Ð¡ÐÐÐ ",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ",
    	IL: "ÐÐ·ÑÐ°Ð¸Ð»Ñ",
    	IN: "ÐÐ½Ð´Ð¸Ñ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IE: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	IS: "ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ",
    	ES: "ÐÑÐ¿Ð°Ð½Ð¸Ñ",
    	IT: "ÐÑÐ°Ð»Ð¸Ñ",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	CV: "ÐÐ°Ð±Ð¾-ÐÐµÑÐ´Ðµ",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	KY: "ÐÑÑÑÐ¾Ð²Ð° ÐÐ°Ð¹Ð¼Ð°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	KE: "ÐÐµÐ½Ð¸Ñ",
    	CY: "ÐÐ¸Ð¿Ñ",
    	KG: "ÐÐ¸ÑÐ³Ð¸Ð·Ð¸Ñ",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	TW: "ÐÐ¸ÑÐ°Ð¹ÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	KP: "ÐÐÐÐ  (ÐÐ¾ÑÐµÐ¹ÑÐºÐ°Ñ ÐÐ°ÑÐ¾Ð´Ð½Ð¾-ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°)",
    	CN: "ÐÐÐ  (ÐÐ¸ÑÐ°Ð¹ÑÐºÐ°Ñ ÐÐ°ÑÐ¾Ð´Ð½Ð°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°)",
    	CC: "ÐÐ¾ÐºÐ¾ÑÐ¾Ð²ÑÐµ Ð¾ÑÑÑÐ¾Ð²Ð°",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÑ",
    	CR: "ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°",
    	CI: "ÐÐ¾Ñ-Ð´âÐÐ²ÑÐ°Ñ",
    	CU: "ÐÑÐ±Ð°",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	LA: "ÐÐ°Ð¾Ñ",
    	LV: "ÐÐ°ÑÐ²Ð¸Ñ",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸Ñ",
    	LB: "ÐÐ¸Ð²Ð°Ð½",
    	LY: "ÐÐ¸Ð²Ð¸Ñ",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	MU: "ÐÐ°Ð²ÑÐ¸ÐºÐ¸Ð¹",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	YT: "ÐÐ°Ð¹Ð¾ÑÑÐ°",
    	MO: "ÐÐ°ÐºÐ°Ð¾",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ",
    	ML: "ÐÐ°Ð»Ð¸",
    	MV: "ÐÐ°Ð»ÑÐ´Ð¸Ð²Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MA: "ÐÐ°ÑÐ¾ÐºÐºÐ¾",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð»Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð°",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ°",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	MD: "ÐÐ¾Ð»Ð´Ð°Ð²Ð¸Ñ",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ",
    	MS: "ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ",
    	MM: "ÐÑÑÐ½Ð¼Ð°",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ",
    	NR: "ÐÐ°ÑÑÑ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸Ñ",
    	NL: "ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ñ",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°",
    	NU: "ÐÐ¸ÑÑ",
    	NZ: "ÐÐ¾Ð²Ð°Ñ ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ",
    	NC: "ÐÐ¾Ð²Ð°Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ",
    	AE: "ÐÐÐ­",
    	OM: "ÐÐ¼Ð°Ð½",
    	BV: "ÐÑÑÑÐ¾Ð² ÐÑÐ²Ðµ",
    	IM: "ÐÑÑÑÐ¾Ð² ÐÑÐ½",
    	CK: "ÐÑÑÑÐ¾Ð²Ð° ÐÑÐºÐ°",
    	NF: "ÐÑÑÑÐ¾Ð² ÐÐ¾ÑÑÐ¾Ð»Ðº",
    	CX: "ÐÑÑÑÐ¾Ð² Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð°",
    	PN: "ÐÑÑÑÐ¾Ð²Ð° ÐÐ¸ÑÐºÑÑÐ½",
    	SH: "ÐÑÑÑÐ¾Ð²Ð° Ð¡Ð²ÑÑÐ¾Ð¹ ÐÐ»ÐµÐ½Ñ, ÐÐ¾Ð·Ð½ÐµÑÐµÐ½Ð¸Ñ Ð¸ Ð¢ÑÐ¸ÑÑÐ°Ð½-Ð´Ð°-ÐÑÐ½ÑÑ",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PS: "ÐÐ¾ÑÑÐ´Ð°ÑÑÑÐ²Ð¾ ÐÐ°Ð»ÐµÑÑÐ¸Ð½Ð°",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PG: "ÐÐ°Ð¿ÑÐ° â ÐÐ¾Ð²Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	PE: "ÐÐµÑÑ",
    	PL: "ÐÐ¾Ð»ÑÑÐ°",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ",
    	PR: "ÐÑÑÑÑÐ¾-Ð Ð¸ÐºÐ¾",
    	CG: "Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð½Ð³Ð¾",
    	KR: "Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾ÑÐµÑ",
    	RE: "Ð ÐµÑÐ½ÑÐ¾Ð½",
    	RU: "Ð Ð¾ÑÑÐ¸Ñ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	RO: "Ð ÑÐ¼ÑÐ½Ð¸Ñ",
    	SV: "Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	SM: "Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸",
    	SA: "Ð¡Ð°ÑÐ´Ð¾Ð²ÑÐºÐ°Ñ ÐÑÐ°Ð²Ð¸Ñ",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	MP: "Ð¡ÐµÐ²ÐµÑÐ½ÑÐµ ÐÐ°ÑÐ¸Ð°Ð½ÑÐºÐ¸Ðµ ÐÑÑÑÐ¾Ð²Ð°",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»ÑÑÐºÐ¸Ðµ ÐÑÑÑÐ¾Ð²Ð°",
    	BL: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ»ÐµÐ¼Ð¸",
    	MF: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ½",
    	PM: "Ð¡ÐµÐ½-ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	VC: "Ð¡ÐµÐ½Ñ-ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ñ",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ",
    	LC: "Ð¡ÐµÐ½Ñ-ÐÑÑÐ¸Ñ",
    	RS: "Ð¡ÐµÑÐ±Ð¸Ñ",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SX: "Ð¡Ð¸Ð½Ñ-ÐÐ°ÑÑÐµÐ½",
    	SY: "Ð¡Ð¸ÑÐ¸Ñ",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð°",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	US: "Ð¡Ð¨Ð",
    	SL: "Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ",
    	TJ: "Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½",
    	TH: "Ð¢Ð°Ð¸Ð»Ð°Ð½Ð´",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ",
    	TC: "Ð¢ÐµÑÐºÑ Ð¸ ÐÐ°Ð¹ÐºÐ¾Ñ",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸Ñ",
    	TR: "Ð¢ÑÑÑÐ¸Ñ",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	UA: "Ð£ÐºÑÐ°Ð¸Ð½Ð°",
    	WF: "Ð£Ð¾Ð»Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	FO: "Ð¤Ð°ÑÐµÑÑ",
    	FJ: "Ð¤Ð¸Ð´Ð¶Ð¸",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½Ñ",
    	FI: "Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÐ¸Ðµ Ð¾ÑÑÑÐ¾Ð²Ð°",
    	FR: "Ð¤ÑÐ°Ð½ÑÐ¸Ñ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ¸Ðµ Ð®Ð¶Ð½ÑÐµ Ð¸ ÐÐ½ÑÐ°ÑÐºÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð¢ÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸",
    	HM: "Ð¥ÐµÑÐ´ Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´",
    	HR: "Ð¥Ð¾ÑÐ²Ð°ÑÐ¸Ñ",
    	CF: "Ð¦ÐÐ ",
    	TD: "Ð§Ð°Ð´",
    	ME: "Ð§ÐµÑÐ½Ð¾Ð³Ð¾ÑÐ¸Ñ",
    	CZ: "Ð§ÐµÑÐ¸Ñ",
    	CL: "Ð§Ð¸Ð»Ð¸",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ",
    	SE: "Ð¨Ð²ÐµÑÐ¸Ñ",
    	SJ: "Ð¨Ð¿Ð¸ÑÐ±ÐµÑÐ³ÐµÐ½ Ð¸ Ð¯Ð½-ÐÐ°Ð¹ÐµÐ½",
    	LK: "Ð¨ÑÐ¸-ÐÐ°Ð½ÐºÐ°",
    	EC: "Ð­ÐºÐ²Ð°Ð´Ð¾Ñ",
    	GQ: "Ð­ÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»ÑÐ½Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ",
    	ER: "Ð­ÑÐ¸ÑÑÐµÑ",
    	EE: "Ð­ÑÑÐ¾Ð½Ð¸Ñ",
    	ET: "Ð­ÑÐ¸Ð¾Ð¿Ð¸Ñ",
    	ZA: "Ð®ÐÐ ",
    	GS: "Ð®Ð¶Ð½Ð°Ñ ÐÐµÐ¾ÑÐ³Ð¸Ñ Ð¸ Ð®Ð¶Ð½ÑÐµ Ð¡Ð°Ð½Ð´Ð²Ð¸ÑÐµÐ²Ñ ÐÑÑÑÐ¾Ð²Ð°",
    	SS: "Ð®Ð¶Ð½ÑÐ¹ Ð¡ÑÐ´Ð°Ð½",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JP: "Ð¯Ð¿Ð¾Ð½Ð¸Ñ",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾"
    };
    var ru = {
    	locale: locale$B,
    	countries: countries$B
    };

    var ru$1 = /*#__PURE__*/Object.freeze({
        locale: locale$B,
        countries: countries$B,
        default: ru
    });

    var locale$C = "sk";
    var countries$C = {
    	AD: "Andorra",
    	AE: "SpojenÃ© arabskÃ© emirÃ¡ty",
    	AF: "Afganistan",
    	AG: "Antigua a Barbuda",
    	AI: "Anguilla",
    	AL: "AlbÃ¡nsko",
    	AM: "ArmÃ©nsko",
    	AO: "Angola",
    	AQ: "AntarktÃ­da",
    	AR: "ArgentÃ­na",
    	AS: "AmerickÃ¡ Samoa",
    	AT: "RakÃºsko",
    	AU: "AustrÃ¡lia",
    	AW: "Aruba",
    	AX: "Alandy",
    	AZ: "AzerbajdÅ¾an",
    	BA: "Bosna a Hercegovina",
    	BB: "Barbados",
    	BD: "BangladÃ©Å¡",
    	BE: "Belgicko",
    	BF: "Burkina Faso",
    	BG: "Bulharsko",
    	BH: "Bahrajn",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "SvÃ¤tÃ½ Bartolomej",
    	BM: "Bermudy",
    	BN: "Brunej",
    	BO: "BolÃ­via",
    	BQ: "KaribskÃ© Holandsko",
    	BR: "BrazÃ­lia",
    	BS: "Bahamy",
    	BT: "BhutÃ¡n",
    	BV: "Bouvetov ostrov",
    	BW: "Botswana",
    	BY: "Bielorusko",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "KokosovÃ© ostrovy",
    	CD: "KonÅ¾skÃ¡ demokratickÃ¡ republika",
    	CF: "StredoafrickÃ¡ republika",
    	CG: "KonÅ¾skÃ¡ republika",
    	CH: "Å vajÄiarsko",
    	CI: "PobreÅ¾ie Slonoviny",
    	CK: "Cookove ostrovy",
    	CL: "Äile",
    	CM: "Kamerun",
    	CN: "ÄÃ­na",
    	CO: "Kolumbia",
    	CR: "Kostarika",
    	CU: "Kuba",
    	CV: "Kapverdy",
    	CW: "CuraÃ§ao",
    	CX: "VianoÄnÃ½ ostrov",
    	CY: "Cyprus",
    	CZ: "Äesko",
    	DE: "Nemecko",
    	DJ: "DÅ¾ibutsko",
    	DK: "DÃ¡nsko",
    	DM: "Dominika",
    	DO: "DominikÃ¡nska republika",
    	DZ: "AlÅ¾Ã­rsko",
    	EC: "EkvÃ¡dor",
    	EE: "EstÃ³nsko",
    	EG: "Egypt",
    	EH: "ZÃ¡padnÃ¡ Sahara",
    	ER: "Eritrea",
    	ES: "Å panielsko",
    	ET: "EtiÃ³pia",
    	FI: "FÃ­nsko",
    	FJ: "FidÅ¾i",
    	FK: "Falklandy",
    	FM: "MikronÃ©zia",
    	FO: "FaerskÃ© ostrovy",
    	FR: "FrancÃºzsko",
    	GA: "Gabon",
    	GB: "SpojenÃ© krÃ¡Ä¾ovstvo",
    	GD: "Grenada",
    	GE: "GruzÃ­nsko",
    	GF: "FrancÃºzska Guayana",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "GibraltÃ¡r",
    	GL: "GrÃ³nsko",
    	GM: "Gambia",
    	GN: "Guinea",
    	GP: "Guadeloupe",
    	GQ: "RovnÃ­kovÃ¡ Guinea",
    	GR: "GrÃ©cko",
    	GS: "JuÅ¾nÃ¡ Georgia a JuÅ¾nÃ© Sandwichove ostrovy",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guinea-Bissau",
    	GY: "Guayana",
    	HK: "Hongkong â OAO ÄÃ­ny",
    	HM: "Heardov ostrov a Macdonaldove ostrovy",
    	HN: "Honduras",
    	HR: "ChorvÃ¡tsko",
    	HT: "Haiti",
    	HU: "MaÄarsko",
    	ID: "IndonÃ©zia",
    	IE: "Ãrsko",
    	IL: "Izrael",
    	IM: "Ostrov Man",
    	IN: "India",
    	IO: "BritskÃ© indickooceÃ¡nske Ãºzemie",
    	IQ: "Irak",
    	IR: "IrÃ¡n",
    	IS: "Island",
    	IT: "Taliansko",
    	JE: "Jersey",
    	JM: "Jamajka",
    	JO: "JordÃ¡nsko",
    	JP: "Japonsko",
    	KE: "KeÅa",
    	KG: "Kirgizsko",
    	KH: "KambodÅ¾a",
    	KI: "Kiribati",
    	KM: "Komory",
    	KN: "SvÃ¤tÃ½ KriÅ¡tof a Nevis",
    	KP: "SevernÃ¡ KÃ³rea",
    	KR: "JuÅ¾nÃ¡ KÃ³rea",
    	KW: "Kuvajt",
    	KY: "Kajmanie ostrovy",
    	KZ: "Kazachstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "SvÃ¤tÃ¡ Lucia",
    	LI: "LichtenÅ¡tajnsko",
    	LK: "SrÃ­ Lanka",
    	LR: "LibÃ©ria",
    	LS: "Lesotho",
    	LT: "Litva",
    	LU: "Luxembursko",
    	LV: "LotyÅ¡sko",
    	LY: "LÃ­bya",
    	MA: "Maroko",
    	MC: "Monako",
    	MD: "Moldavsko",
    	ME: "Äierna Hora",
    	MF: "SvÃ¤tÃ½ Martin (fr.)",
    	MG: "Madagaskar",
    	MH: "Marshallove ostrovy",
    	MK: "MacedÃ³nsko",
    	ML: "Mali",
    	MM: "Mjanmarsko",
    	MN: "Mongolsko",
    	MO: "Macao â OAO ÄÃ­ny",
    	MP: "SevernÃ© MariÃ¡ny",
    	MQ: "Martinik",
    	MR: "MauritÃ¡nia",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "MaurÃ­cius",
    	MV: "Maldivy",
    	MW: "Malawi",
    	MX: "Mexiko",
    	MY: "Malajzia",
    	MZ: "Mozambik",
    	NA: "NamÃ­bia",
    	NC: "NovÃ¡ KaledÃ³nia",
    	NE: "Niger",
    	NF: "Norfolk",
    	NG: "NigÃ©ria",
    	NI: "Nikaragua",
    	NL: "Holandsko",
    	NO: "NÃ³rsko",
    	NP: "NepÃ¡l",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "NovÃ½ ZÃ©land",
    	OM: "OmÃ¡n",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "FrancÃºzska PolynÃ©zia",
    	PG: "Papua NovÃ¡ Guinea",
    	PH: "FilipÃ­ny",
    	PK: "Pakistan",
    	PL: "PoÄ¾sko",
    	PM: "Saint Pierre a Miquelon",
    	PN: "Pitcairnove ostrovy",
    	PR: "Portoriko",
    	PS: "PalestÃ­nske Ãºzemia",
    	PT: "Portugalsko",
    	PW: "Palau",
    	PY: "Paraguaj",
    	QA: "Katar",
    	RE: "RÃ©union",
    	RO: "Rumunsko",
    	RS: "Srbsko",
    	RU: "Rusko",
    	RW: "Rwanda",
    	SA: "SaudskÃ¡ ArÃ¡bia",
    	SB: "Å alamÃºnove ostrovy",
    	SC: "Seychely",
    	SD: "SudÃ¡n",
    	SE: "Å vÃ©dsko",
    	SG: "Singapur",
    	SH: "SvÃ¤tÃ¡ Helena",
    	SI: "Slovinsko",
    	SJ: "Svalbard a Jan Mayen",
    	SK: "Slovensko",
    	SL: "Sierra Leone",
    	SM: "San MarÃ­no",
    	SN: "Senegal",
    	SO: "SomÃ¡lsko",
    	SR: "Surinam",
    	SS: "JuÅ¾nÃ½ SudÃ¡n",
    	ST: "SvÃ¤tÃ½ TomÃ¡Å¡ a Princov ostrov",
    	SV: "SalvÃ¡dor",
    	SX: "SvÃ¤tÃ½ Martin (hol.)",
    	SY: "SÃ½ria",
    	SZ: "Svazijsko",
    	TC: "Turks a Caicos",
    	TD: "Äad",
    	TF: "FrancÃºzske juÅ¾nÃ© a antarktickÃ© Ãºzemia",
    	TG: "Togo",
    	TH: "Thajsko",
    	TJ: "TadÅ¾ikistan",
    	TK: "Tokelau",
    	TL: "VÃ½chodnÃ½ Timor",
    	TM: "TurkmÃ©nsko",
    	TN: "Tunisko",
    	TO: "Tonga",
    	TR: "Turecko",
    	TT: "Trinidad a Tobago",
    	TV: "Tuvalu",
    	TW: "Taiwan",
    	TZ: "TanzÃ¡nia",
    	UA: "Ukrajina",
    	UG: "Uganda",
    	UM: "MenÅ¡ie odÄ¾ahlÃ© ostrovy USA",
    	US: "SpojenÃ© Å¡tÃ¡ty",
    	UY: "Uruguaj",
    	UZ: "Uzbekistan",
    	VA: "VatikÃ¡n",
    	VC: "SvÃ¤tÃ½ Vincent a GrenadÃ­ny",
    	VE: "Venezuela",
    	VG: "BritskÃ© PanenskÃ© ostrovy",
    	VI: "AmerickÃ© PanenskÃ© ostrovy",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis a Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "JuÅ¾nÃ¡ Afrika",
    	ZM: "Zambia",
    	ZW: "Zimbabwe"
    };
    var sk = {
    	locale: locale$C,
    	countries: countries$C
    };

    var sk$1 = /*#__PURE__*/Object.freeze({
        locale: locale$C,
        countries: countries$C,
        default: sk
    });

    var locale$D = "sl";
    var countries$D = {
    	AD: "Andora",
    	AE: "ZdruÅ¾eni arabski emirati",
    	AF: "Afganistan",
    	AG: "Antigva in Barbuda",
    	AI: "Angvila",
    	AL: "Albanija",
    	AM: "Armenija",
    	AO: "Angola",
    	AQ: "Antarktika",
    	AR: "Argentina",
    	AS: "AmeriÅ¡ka Samoa",
    	AT: "Avstrija",
    	AU: "Avstralija",
    	AW: "Aruba",
    	AX: "Ãlandski otoki",
    	AZ: "AzerbajdÅ¾an",
    	BA: "Bosna in Hercegovina",
    	BB: "Barbados",
    	BD: "BangladeÅ¡",
    	BE: "Belgija",
    	BF: "Burkina Faso",
    	BG: "Bolgarija",
    	BH: "Bahrajn",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint BarthÃ©lemy",
    	BM: "Bermudi",
    	BN: "Brunej",
    	BO: "Bolivija",
    	BQ: "Nizozemski Karibi",
    	BR: "Brazilija",
    	BS: "Bahami",
    	BT: "Butan",
    	BV: "Bouvetov otok",
    	BW: "Bocvana",
    	BY: "Belorusija",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "Kokosovi otoki",
    	CD: "DemokratiÄna republika Kongo",
    	CF: "CentralnoafriÅ¡ka republika",
    	CG: "Kongo - Brazzaville",
    	CH: "Å vica",
    	CI: "SlonokoÅ¡Äena obala",
    	CK: "Cookovi otoki",
    	CL: "Äile",
    	CM: "Kamerun",
    	CN: "Kitajska",
    	CO: "Kolumbija",
    	CR: "Kostarika",
    	CU: "Kuba",
    	CV: "Zelenortski otoki",
    	CW: "CuraÃ§ao",
    	CX: "BoÅ¾iÄni otok",
    	CY: "Ciper",
    	CZ: "ÄeÅ¡ka",
    	DE: "NemÄija",
    	DJ: "DÅ¾ibuti",
    	DK: "Danska",
    	DM: "Dominika",
    	DO: "Dominikanska republika",
    	DZ: "AlÅ¾irija",
    	EC: "Ekvador",
    	EE: "Estonija",
    	EG: "Egipt",
    	EH: "Zahodna Sahara",
    	ER: "Eritreja",
    	ES: "Å panija",
    	ET: "Etiopija",
    	FI: "Finska",
    	FJ: "FidÅ¾i",
    	FK: "Falklandski otoki",
    	FM: "Mikronezija",
    	FO: "Ferski otoki",
    	FR: "Francija",
    	GA: "Gabon",
    	GB: "ZdruÅ¾eno kraljestvo",
    	GD: "Grenada",
    	GE: "Gruzija",
    	GF: "Francoska Gvajana",
    	GG: "Guernsey",
    	GH: "Gana",
    	GI: "Gibraltar",
    	GL: "Grenlandija",
    	GM: "Gambija",
    	GN: "Gvineja",
    	GP: "Gvadalupe",
    	GQ: "Ekvatorialna Gvineja",
    	GR: "GrÄija",
    	GS: "JuÅ¾na Georgia in JuÅ¾ni Sandwichevi otoki",
    	GT: "Gvatemala",
    	GU: "Guam",
    	GW: "Gvineja Bissau",
    	GY: "Gvajana",
    	HK: "Hongkong",
    	HM: "Heardov otok in McDonaldovi otoki",
    	HN: "Honduras",
    	HR: "HrvaÅ¡ka",
    	HT: "Haiti",
    	HU: "MadÅ¾arska",
    	ID: "Indonezija",
    	IE: "Irska",
    	IL: "Izrael",
    	IM: "Otok Man",
    	IN: "Indija",
    	IO: "Britansko ozemlje v Indijskem oceanu",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Islandija",
    	IT: "Italija",
    	JE: "Jersey",
    	JM: "Jamajka",
    	JO: "Jordanija",
    	JP: "Japonska",
    	KE: "Kenija",
    	KG: "Kirgizistan",
    	KH: "KambodÅ¾a",
    	KI: "Kiribati",
    	KM: "Komori",
    	KN: "Saint Kitts in Nevis",
    	KP: "Severna Koreja",
    	KR: "JuÅ¾na Koreja",
    	KW: "Kuvajt",
    	KY: "Kajmanski otoki",
    	KZ: "Kazahstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "Saint Lucia",
    	LI: "LihtenÅ¡tajn",
    	LK: "Å rilanka",
    	LR: "Liberija",
    	LS: "Lesoto",
    	LT: "Litva",
    	LU: "Luksemburg",
    	LV: "Latvija",
    	LY: "Libija",
    	MA: "Maroko",
    	MC: "Monako",
    	MD: "Moldavija",
    	ME: "Ärna gora",
    	MF: "Saint Martin",
    	MG: "Madagaskar",
    	MH: "Marshallovi otoki",
    	MK: "Makedonija",
    	ML: "Mali",
    	MM: "Mjanmar (Burma)",
    	MN: "Mongolija",
    	MO: "Macao",
    	MP: "Severni Marianski otoki",
    	MQ: "Martinik",
    	MR: "Mavretanija",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldivi",
    	MW: "Malavi",
    	MX: "Mehika",
    	MY: "Malezija",
    	MZ: "Mozambik",
    	NA: "Namibija",
    	NC: "Nova Kaledonija",
    	NE: "Niger",
    	NF: "NorfolÅ¡ki otok",
    	NG: "Nigerija",
    	NI: "Nikaragva",
    	NL: "Nizozemska",
    	NO: "NorveÅ¡ka",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Nova Zelandija",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Francoska Polinezija",
    	PG: "Papua Nova Gvineja",
    	PH: "Filipini",
    	PK: "Pakistan",
    	PL: "Poljska",
    	PM: "Saint Pierre in Miquelon",
    	PN: "Pitcairn",
    	PR: "Portoriko",
    	PS: "Palestinsko ozemlje",
    	PT: "Portugalska",
    	PW: "Palau",
    	PY: "Paragvaj",
    	QA: "Katar",
    	RE: "Reunion",
    	RO: "Romunija",
    	RS: "Srbija",
    	RU: "Rusija",
    	RW: "Ruanda",
    	SA: "Saudova Arabija",
    	SB: "Salomonovi otoki",
    	SC: "SejÅ¡eli",
    	SD: "Sudan",
    	SE: "Å vedska",
    	SG: "Singapur",
    	SH: "Sveta Helena",
    	SI: "Slovenija",
    	SJ: "Svalbard in Jan Mayen",
    	SK: "SlovaÅ¡ka",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalija",
    	SR: "Surinam",
    	SS: "JuÅ¾ni Sudan",
    	ST: "Sao Tome in Principe",
    	SV: "Salvador",
    	SX: "Sint Maarten",
    	SY: "Sirija",
    	SZ: "Svazi",
    	TC: "Otoki Turks in Caicos",
    	TD: "Äad",
    	TF: "Francosko juÅ¾no ozemlje",
    	TG: "Togo",
    	TH: "Tajska",
    	TJ: "TadÅ¾ikistan",
    	TK: "Tokelau",
    	TL: "Timor-Leste",
    	TM: "Turkmenistan",
    	TN: "Tunizija",
    	TO: "Tonga",
    	TR: "TurÄija",
    	TT: "Trinidad in Tobago",
    	TV: "Tuvalu",
    	TW: "Tajvan",
    	TZ: "Tanzanija",
    	UA: "Ukrajina",
    	UG: "Uganda",
    	UM: "Stranski zunanji otoki ZdruÅ¾enih drÅ¾av",
    	US: "ZdruÅ¾ene drÅ¾ave Amerike",
    	UY: "Urugvaj",
    	UZ: "Uzbekistan",
    	VA: "Vatikan",
    	VC: "Saint Vincent in Grenadine",
    	VE: "Venezuela",
    	VG: "Britanski DeviÅ¡ki otoki",
    	VI: "AmeriÅ¡ki DeviÅ¡ki otoki",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis in Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "JuÅ¾noafriÅ¡ka republika",
    	ZM: "Zambija",
    	ZW: "Zimbabve"
    };
    var sl = {
    	locale: locale$D,
    	countries: countries$D
    };

    var sl$1 = /*#__PURE__*/Object.freeze({
        locale: locale$D,
        countries: countries$D,
        default: sl
    });

    var locale$E = "sr";
    var countries$E = {
    	AD: "ÐÐ½Ð´Ð¾ÑÐ°",
    	AE: "Ð£ÑÐµÐ´Ð¸ÑÐµÐ½Ð¸ ÐÑÐ°Ð¿ÑÐºÐ¸ ÐÐ¼Ð¸ÑÐ°ÑÐ¸",
    	AF: "ÐÐ²Ð³Ð°Ð½Ð¸ÑÑÐ°Ð½",
    	AG: "ÐÐ½ÑÐ¸Ð³Ð²Ð° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	AI: "ÐÐ½Ð³Ð²Ð¸Ð»Ð°",
    	AL: "ÐÐ»Ð±Ð°Ð½Ð¸ÑÐ°",
    	AM: "ÐÐµÑÐ¼ÐµÐ½Ð¸ÑÐ°",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AS: "ÐÐ¼ÐµÑÐ¸ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°",
    	AT: "ÐÑÑÑÑÐ¸ÑÐ°",
    	AU: "ÐÑÑÑÑÐ°Ð»Ð¸ÑÐ°",
    	AW: "ÐÑÑÐ±Ð°",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	AZ: "ÐÐ·ÐµÑÐ±ÐµÑÑÐ°Ð½",
    	BA: "ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BE: "ÐÐµÐ»Ð³Ð¸ÑÐ°",
    	BF: "ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾",
    	BG: "ÐÑÐ³Ð°ÑÑÐºÐ°",
    	BH: "ÐÐ°ÑÑÐµÐ¸Ð½",
    	BI: "ÐÑÑÑÐ½Ð´Ð¸",
    	BJ: "ÐÐµÐ½Ð¸Ð½",
    	BL: "Ð¡ÐµÐ½ ÐÐ°ÑÑÐµÐ»ÐµÐ¼Ð¸",
    	BM: "ÐÐµÑÐ¼ÑÐ´Ð°",
    	BN: "ÐÑÑÐ½ÐµÑ",
    	BO: "ÐÐ¾Ð»Ð¸Ð²Ð¸ÑÐ°",
    	BQ: "ÐÐ°ÑÐ¸Ð¿ÑÐºÐ° Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»",
    	BS: "ÐÐ°ÑÐ°Ð¼Ð¸",
    	BT: "ÐÑÑÐ°Ð½",
    	BV: "ÐÑÑÑÐ²Ð¾ ÐÑÐ²Ðµ",
    	BW: "ÐÐ¾ÑÐ²Ð°Ð½Ð°",
    	BY: "ÐÐµÐ»Ð¾ÑÑÑÐ¸ÑÐ°",
    	BZ: "ÐÐµÐ»Ð¸Ð·Ðµ",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	CC: "ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ð° (ÐÐ¸Ð»Ð¸Ð½Ð³Ð¾Ð²Ð°) ÐÑÑÑÐ²Ð°",
    	CD: "ÐÐ¾Ð½Ð³Ð¾ - ÐÐ¸Ð½ÑÐ°ÑÐ°",
    	CF: "Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾Ð°ÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	CG: "ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»",
    	CH: "Ð¨Ð²Ð°ÑÑÐ°ÑÑÐºÐ°",
    	CI: "ÐÐ±Ð°Ð»Ð° Ð¡Ð»Ð¾Ð½Ð¾Ð²Ð°ÑÐµ",
    	CK: "ÐÑÐºÐ¾Ð²Ð° ÐÑÑÑÐ²Ð°",
    	CL: "Ð§Ð¸Ð»Ðµ",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CN: "ÐÐ¸Ð½Ð°",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±Ð¸ÑÐ°",
    	CR: "ÐÐ¾ÑÑÐ°ÑÐ¸ÐºÐ°",
    	CU: "ÐÑÐ±Ð°",
    	CV: "ÐÐµÐ»ÐµÐ½Ð¾ÑÑÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	CX: "ÐÐ¾Ð¶Ð¸ÑÐ½Ð¾ ÐÑÑÑÐ²Ð¾",
    	CY: "ÐÐ¸Ð¿Ð°Ñ",
    	CZ: "Ð§ÐµÑÐºÐ°",
    	DE: "ÐÐµÐ¼Ð°ÑÐºÐ°",
    	DJ: "ÐÐ¸Ð±ÑÑÐ¸",
    	DK: "ÐÐ°Ð½ÑÐºÐ°",
    	DM: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°",
    	DO: "ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	EC: "ÐÐºÐ²Ð°Ð´Ð¾Ñ",
    	EE: "ÐÑÑÐ¾Ð½Ð¸ÑÐ°",
    	EG: "ÐÐ³Ð¸Ð¿Ð°Ñ",
    	EH: "ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°",
    	ER: "ÐÑÐ¸ÑÑÐµÑÐ°",
    	ES: "Ð¨Ð¿Ð°Ð½Ð¸ÑÐ°",
    	ET: "ÐÑÐ¸Ð¾Ð¿Ð¸ÑÐ°",
    	FI: "Ð¤Ð¸Ð½ÑÐºÐ°",
    	FJ: "Ð¤Ð¸ÑÐ¸",
    	FK: "Ð¤Ð¾ÐºÐ»Ð°Ð½Ð´ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	FM: "ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐ°",
    	FO: "Ð¤Ð°ÑÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	FR: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ°",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	GB: "Ð£ÑÐµÐ´Ð¸ÑÐµÐ½Ð¾ ÐÑÐ°ÑÐµÐ²ÑÑÐ²Ð¾",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GE: "ÐÑÑÐ·Ð¸ÑÐ°",
    	GF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ²Ð°ÑÐ°Ð½Ð°",
    	GG: "ÐÐµÑÐ½Ð·Ð¸",
    	GH: "ÐÐ°Ð½Ð°",
    	GI: "ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ",
    	GL: "ÐÑÐµÐ½Ð»Ð°Ð½Ð´",
    	GM: "ÐÐ°Ð¼Ð±Ð¸ÑÐ°",
    	GN: "ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿",
    	GQ: "ÐÐºÐ²Ð°ÑÐ¾ÑÐ¸ÑÐ°Ð»Ð½Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	GR: "ÐÑÑÐºÐ°",
    	GS: "ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÑÐ¸ÑÐ° Ð¸ ÐÑÐ¶Ð½Ð° Ð¡ÐµÐ½Ð´Ð²Ð¸ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GU: "ÐÑÐ°Ð¼",
    	GW: "ÐÐ²Ð¸Ð½ÐµÑÐ°-ÐÐ¸ÑÐ°Ð¾",
    	GY: "ÐÐ²Ð°ÑÐ°Ð½Ð°",
    	HK: "Ð¡ÐÐ  Ð¥Ð¾Ð½Ð³ÐºÐ¾Ð½Ð³ (ÐÐ¸Ð½Ð°)",
    	HM: "ÐÑÑÑÐ²Ð¾ Ð¥ÐµÑÐ´ Ð¸ ÐÐµÐºÐ´Ð¾Ð½Ð°Ð»Ð´Ð¾Ð²Ð° Ð¾ÑÑÑÐ²Ð°",
    	HN: "Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ",
    	HR: "Ð¥ÑÐ²Ð°ÑÑÐºÐ°",
    	HT: "Ð¥Ð°Ð¸ÑÐ¸",
    	HU: "ÐÐ°ÑÐ°ÑÑÐºÐ°",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸ÑÐ°",
    	IE: "ÐÑÑÐºÐ°",
    	IL: "ÐÐ·ÑÐ°ÐµÐ»",
    	IM: "ÐÑÑÑÐ²Ð¾ ÐÐ°Ð½",
    	IN: "ÐÐ½Ð´Ð¸ÑÐ°",
    	IO: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐ° ÐÐ½Ð´Ð¸ÑÑÐºÐ¾Ð³ Ð¾ÐºÐµÐ°Ð½Ð°",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IS: "ÐÑÐ»Ð°Ð½Ð´",
    	IT: "ÐÑÐ°Ð»Ð¸ÑÐ°",
    	JE: "ÐÐµÑÐ·Ð¸",
    	JM: "ÐÐ°Ð¼Ð°ÑÐºÐ°",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½",
    	JP: "ÐÐ°Ð¿Ð°Ð½",
    	KE: "ÐÐµÐ½Ð¸ÑÐ°",
    	KG: "ÐÐ¸ÑÐ³Ð¸ÑÑÐ°Ð½",
    	KH: "ÐÐ°Ð¼Ð±Ð¾ÑÐ°",
    	KI: "ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	KN: "Ð¡ÐµÐ½Ñ ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ",
    	KP: "Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑÐ°",
    	KR: "ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÐµÑÐ°",
    	KW: "ÐÑÐ²Ð°ÑÑ",
    	KY: "ÐÐ°ÑÐ¼Ð°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	LA: "ÐÐ°Ð¾Ñ",
    	LB: "ÐÐ¸Ð±Ð°Ð½",
    	LC: "Ð¡Ð²ÐµÑÐ° ÐÑÑÐ¸ÑÐ°",
    	LI: "ÐÐ¸ÑÑÐµÐ½ÑÑÐ°ÑÐ½",
    	LK: "Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°",
    	LR: "ÐÐ¸Ð±ÐµÑÐ¸ÑÐ°",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LT: "ÐÐ¸ÑÐ²Ð°Ð½Ð¸ÑÐ°",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	LV: "ÐÐµÑÐ¾Ð½Ð¸ÑÐ°",
    	LY: "ÐÐ¸Ð±Ð¸ÑÐ°",
    	MA: "ÐÐ°ÑÐ¾ÐºÐ¾",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MD: "ÐÐ¾Ð»Ð´Ð°Ð²Ð¸ÑÐ°",
    	ME: "Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°",
    	MF: "Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¸Ð½ (Ð¤ÑÐ°Ð½ÑÑÑÐºÐ°)",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	MH: "ÐÐ°ÑÑÐ°Ð»ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°",
    	ML: "ÐÐ°Ð»Ð¸",
    	MM: "ÐÐ¸ÑÐ°Ð½Ð¼Ð°Ñ (ÐÑÑÐ¼Ð°)",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸ÑÐ°",
    	MO: "Ð¡ÐÐ  ÐÐ°ÐºÐ°Ð¾ (ÐÐ¸Ð½Ð°)",
    	MP: "Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ°ÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº",
    	MR: "ÐÐ°ÑÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°",
    	MS: "ÐÐ¾Ð½ÑÐµÑÐ°Ñ",
    	MT: "ÐÐ°Ð»ÑÐ°",
    	MU: "ÐÐ°ÑÑÐ¸ÑÐ¸ÑÑÑ",
    	MV: "ÐÐ°Ð»Ð´Ð¸Ð²Ð¸",
    	MW: "ÐÐ°Ð»Ð°Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ¾",
    	MY: "ÐÐ°Ð»ÐµÐ·Ð¸ÑÐ°",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº",
    	NA: "ÐÐ°Ð¼Ð¸Ð±Ð¸ÑÐ°",
    	NC: "ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸ÑÐ°",
    	NE: "ÐÐ¸Ð³ÐµÑ",
    	NF: "ÐÑÑÑÐ²Ð¾ ÐÐ¾ÑÑÐ¾Ðº",
    	NG: "ÐÐ¸Ð³ÐµÑÐ¸ÑÐ°",
    	NI: "ÐÐ¸ÐºÐ°ÑÐ°Ð³Ð²Ð°",
    	NL: "Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°",
    	NO: "ÐÐ¾ÑÐ²ÐµÑÐºÐ°",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NR: "ÐÐ°ÑÑÑ",
    	NU: "ÐÐ¸ÑÐµ",
    	NZ: "ÐÐ¾Ð²Ð¸ ÐÐµÐ»Ð°Ð½Ð´",
    	OM: "ÐÐ¼Ð°Ð½",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PE: "ÐÐµÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°",
    	PG: "ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°",
    	PH: "Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PL: "ÐÐ¾ÑÑÐºÐ°",
    	PM: "Ð¡ÐµÐ½ ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½",
    	PN: "ÐÐ¸ÑÐºÐµÑÐ½",
    	PR: "ÐÐ¾ÑÑÐ¾ÑÐ¸ÐºÐ¾",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐµ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸ÑÐ°",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ñ",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	RE: "Ð ÐµÐ¸Ð½Ð¸Ð¾Ð½",
    	RO: "Ð ÑÐ¼ÑÐ½Ð¸ÑÐ°",
    	RS: "Ð¡ÑÐ±Ð¸ÑÐ°",
    	RU: "Ð ÑÑÐ¸ÑÐ°",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	SA: "Ð¡Ð°ÑÐ´Ð¸ÑÑÐºÐ° ÐÑÐ°Ð±Ð¸ÑÐ°",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	SC: "Ð¡ÐµÑÑÐµÐ»Ð¸",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SE: "Ð¨Ð²ÐµÐ´ÑÐºÐ°",
    	SG: "Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ",
    	SH: "Ð¡Ð²ÐµÑÐ° ÐÐµÐ»ÐµÐ½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸ÑÐ°",
    	SJ: "Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ ÐÐ°Ð½ ÐÐ°ÑÐµÐ½",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÑÐºÐ°",
    	SL: "Ð¡Ð¸ÑÐµÑÐ° ÐÐµÐ¾Ð½Ðµ",
    	SM: "Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ð¸ÑÐ°",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	SS: "ÐÑÐ¶Ð½Ð¸ Ð¡ÑÐ´Ð°Ð½",
    	ST: "Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ",
    	SV: "Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ",
    	SX: "Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¸Ð½ (Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°)",
    	SY: "Ð¡Ð¸ÑÐ¸ÑÐ°",
    	SZ: "Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´",
    	TC: "ÐÑÑÑÐ²Ð° Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¸ÐºÐ¾Ñ",
    	TD: "Ð§Ð°Ð´",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÑÐºÐµ ÐÑÐ¶Ð½Ðµ Ð¢ÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TH: "Ð¢Ð°ÑÐ»Ð°Ð½Ð´",
    	TJ: "Ð¢Ð°ÑÐ¸ÐºÐ¸ÑÑÐ°Ð½",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TL: "ÐÑÑÐ¾ÑÐ½Ð¸ Ð¢Ð¸Ð¼Ð¾Ñ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½",
    	TN: "Ð¢ÑÐ½Ð¸Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TR: "Ð¢ÑÑÑÐºÐ°",
    	TT: "Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TW: "Ð¢Ð°ÑÐ²Ð°Ð½",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸ÑÐ°",
    	UA: "Ð£ÐºÑÐ°ÑÐ¸Ð½Ð°",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	UM: "Ð£Ð´Ð°ÑÐµÐ½Ð° Ð¾ÑÑÑÐ²Ð° Ð¡ÐÐ",
    	US: "Ð¡ÑÐµÐ´Ð¸ÑÐµÐ½Ðµ ÐÑÐ¶Ð°Ð²Ðµ",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ñ",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	VC: "Ð¡ÐµÐ½Ñ ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸",
    	VE: "ÐÐµÐ½ÐµÑÑÐµÐ»Ð°",
    	VG: "ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	VI: "ÐÐ¼ÐµÑÐ¸ÑÐºÐ° ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°",
    	VN: "ÐÐ¸ÑÐµÑÐ½Ð°Ð¼",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	WF: "ÐÐ°Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	YE: "ÐÐµÐ¼ÐµÐ½",
    	YT: "ÐÐ°ÑÐ¾Ñ",
    	ZA: "ÐÑÐ¶Ð½Ð¾Ð°ÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°",
    	ZM: "ÐÐ°Ð¼Ð±Ð¸ÑÐ°",
    	ZW: "ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ"
    };
    var sr = {
    	locale: locale$E,
    	countries: countries$E
    };

    var sr$1 = /*#__PURE__*/Object.freeze({
        locale: locale$E,
        countries: countries$E,
        default: sr
    });

    var locale$F = "sv";
    var countries$F = {
    	AD: "Andorra",
    	AE: "FÃ¶renade Arabemiraten",
    	AF: "Afghanistan",
    	AG: "Antigua och Barbuda",
    	AI: "Anguilla",
    	AL: "Albanien",
    	AM: "Armenien",
    	AO: "Angola",
    	AQ: "Antarktis",
    	AR: "Argentina",
    	AS: "Amerikanska Samoa",
    	AT: "Ãsterrike",
    	AU: "Australien",
    	AW: "Aruba",
    	AX: "Ãland",
    	AZ: "Azerbajdzjan",
    	BA: "Bosnien och Hercegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgien",
    	BF: "Burkina Faso",
    	BG: "Bulgarien",
    	BH: "Bahrain",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint-BarthÃ©lemy",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivia",
    	BQ: "Bonaire, Saint Eustatius och Saba",
    	BR: "Brasilien",
    	BS: "Bahamas",
    	BT: "Bhutan",
    	BV: "BouvetÃ¶n",
    	BW: "Botswana",
    	BY: "Vitryssland",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "KokosÃ¶arna",
    	CD: "Demokratiska republiken Kongo",
    	CF: "Centralafrikanska republiken",
    	CG: "Kongo-Brazzaville",
    	CH: "Schweiz",
    	CI: "Elfenbenskusten",
    	CK: "CookÃ¶arna",
    	CL: "Chile",
    	CM: "Kamerun",
    	CN: "Kina",
    	CO: "Colombia",
    	CR: "Costa Rica",
    	CU: "Kuba",
    	CV: "Kap Verde",
    	CW: "Curacao",
    	CX: "JulÃ¶n",
    	CY: "Cypern",
    	CZ: "Tjeckien",
    	DE: "Tyskland",
    	DJ: "Djibouti",
    	DK: "Danmark",
    	DM: "Dominica",
    	DO: "Dominikanska republiken",
    	DZ: "Algeriet",
    	EC: "Ecuador",
    	EE: "Estland",
    	EG: "Egypten",
    	EH: "VÃ¤stsahara",
    	ER: "Eritrea",
    	ES: "Spanien",
    	ET: "Etiopien",
    	FI: "Finland",
    	FJ: "Fiji",
    	FK: "FalklandsÃ¶arna",
    	FM: "Mikronesiska federationen",
    	FO: "FÃ¤rÃ¶arna",
    	FR: "Frankrike",
    	GA: "Gabon",
    	GB: "Storbritannien",
    	GD: "Grenada",
    	GE: "Georgien",
    	GF: "Franska Guyana",
    	GG: "Guernsey",
    	GH: "Ghana",
    	GI: "Gibraltar",
    	GL: "GrÃ¶nland",
    	GM: "Gambia",
    	GN: "Guinea",
    	GP: "Guadeloupe",
    	GQ: "Ekvatorialguinea",
    	GR: "Grekland",
    	GS: "Sydgeorgien och SydsandwichÃ¶arna",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Guinea Bissau",
    	GY: "Guyana",
    	HK: "Hongkong",
    	HM: "Heard- och McDonaldsÃ¶arna",
    	HN: "Honduras",
    	HR: "Kroatien",
    	HT: "Haiti",
    	HU: "Ungern",
    	ID: "Indonesien",
    	IE: "Irland",
    	IL: "Israel",
    	IM: "Isle of Man",
    	IN: "Indien",
    	IO: "Brittiska territoriet i Indiska Oceanen",
    	IQ: "Irak",
    	IR: "Iran",
    	IS: "Island",
    	IT: "Italien",
    	JE: "Jersey",
    	JM: "Jamaica",
    	JO: "Jordanien",
    	JP: "Japan",
    	KE: "Kenya",
    	KG: "Kirgizistan",
    	KH: "Kambodja",
    	KI: "Kiribati",
    	KM: "Komorerna",
    	KN: "Saint Kitts och Nevis",
    	KP: "Nordkorea",
    	KR: "Sydkorea",
    	KW: "Kuwait",
    	KY: "CaymanÃ¶arna",
    	KZ: "Kazakstan",
    	LA: "Laos",
    	LB: "Libanon",
    	LC: "Saint Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberia",
    	LS: "Lesotho",
    	LT: "Litauen",
    	LU: "Luxemburg",
    	LV: "Lettland",
    	LY: "Libyen",
    	MA: "Marocko",
    	MC: "Monaco",
    	MD: "Moldavien",
    	ME: "Montenegro",
    	MF: "Saint Martin (franska delen)",
    	MG: "Madagaskar",
    	MH: "MarshallÃ¶arna",
    	MK: "Makedonien",
    	ML: "Mali",
    	MM: "Burma",
    	MN: "Mongoliet",
    	MO: "Macau",
    	MP: "Nordmarianerna",
    	MQ: "Martinique",
    	MR: "Mauretanien",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldiverna",
    	MW: "Malawi",
    	MX: "Mexiko",
    	MY: "Malaysia",
    	MZ: "MoÃ§ambique",
    	NA: "Namibia",
    	NC: "Nya Kaledonien",
    	NE: "Niger",
    	NF: "NorfolkÃ¶n",
    	NG: "Nigeria",
    	NI: "Nicaragua",
    	NL: "NederlÃ¤nderna",
    	NO: "Norge",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Nya Zeeland",
    	OM: "Oman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Franska Polynesien",
    	PG: "Papua Nya Guinea",
    	PH: "Filippinerna",
    	PK: "Pakistan",
    	PL: "Polen",
    	PM: "Saint-Pierre och Miquelon",
    	PN: "PitcairnÃ¶arna",
    	PR: "Puerto Rico",
    	PS: "Palestinska territoriet, ockuperade",
    	PT: "Portugal",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Qatar",
    	RE: "RÃ©union",
    	RO: "RumÃ¤nien",
    	RS: "Serbien",
    	RU: "Ryssland",
    	RW: "Rwanda",
    	SA: "Saudiarabien",
    	SB: "SalomonÃ¶arna",
    	SC: "Seychellerna",
    	SD: "Sudan",
    	SE: "Sverige",
    	SG: "Singapore",
    	SH: "Sankta Helena",
    	SI: "Slovenien",
    	SJ: "Svalbard och Jan Mayen",
    	SK: "Slovakien",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somalia",
    	SR: "Surinam",
    	SS: "Sydsudan",
    	ST: "SÃ£o TomÃ© och PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint Maarten (nederlÃ¤ndska delen)",
    	SY: "Syrien",
    	SZ: "Swaziland",
    	TC: "Turks- och CaicosÃ¶arna",
    	TD: "Tchad",
    	TF: "Franska sÃ¶dra territorierna",
    	TG: "Togo",
    	TH: "Thailand",
    	TJ: "Tadzjikistan",
    	TK: "TokelauÃ¶arna",
    	TL: "Ãsttimor",
    	TM: "Turkmenistan",
    	TN: "Tunisien",
    	TO: "Tonga",
    	TR: "Turkiet",
    	TT: "Trinidad och Tobago",
    	TV: "Tuvalu",
    	TW: "Taiwan",
    	TZ: "Tanzania",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "USA:s yttre Ã¶ar",
    	US: "USA",
    	UY: "Uruguay",
    	UZ: "Uzbekistan",
    	VA: "Vatikanstaten",
    	VC: "Saint Vincent och Grenadinerna",
    	VE: "Venezuela",
    	VG: "Brittiska JungfruÃ¶arna",
    	VI: "Amerikanska JungfruÃ¶arna",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis- och FutunaÃ¶arna",
    	WS: "Samoa",
    	YE: "Jemen",
    	YT: "Mayotte",
    	ZA: "Sydafrika",
    	ZM: "Zambia",
    	ZW: "Zimbabwe",
    	XK: "Kosovo"
    };
    var sv = {
    	locale: locale$F,
    	countries: countries$F
    };

    var sv$1 = /*#__PURE__*/Object.freeze({
        locale: locale$F,
        countries: countries$F,
        default: sv
    });

    var locale$G = "tr";
    var countries$G = {
    	AD: "Andorra",
    	AE: "BirleÅik Arap Emirlikleri",
    	AF: "Afganistan",
    	AG: "Antigua ve Barbuda",
    	AI: "Anguilla",
    	AL: "Arnavutluk",
    	AM: "Ermenistan",
    	AO: "Angola",
    	AQ: "Antarktika",
    	AR: "Arjantin",
    	AS: "Amerikan SamoasÄ±",
    	AT: "Avusturya",
    	AU: "Avustralya",
    	AW: "Aruba",
    	AX: "Ãland AdalarÄ±",
    	AZ: "Azerbaycan",
    	BA: "Bosna Hersek",
    	BB: "Barbados",
    	BD: "BangladeÅ",
    	BE: "BelÃ§ika",
    	BF: "Burkina Faso",
    	BG: "Bulgaristan",
    	BH: "Bahreyn",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Saint Barthelemy",
    	BM: "Bermuda",
    	BN: "Brunei",
    	BO: "Bolivya",
    	BQ: "Karayip Hollanda",
    	BR: "Brezilya",
    	BS: "Bahamalar",
    	BT: "Butan",
    	BV: "Bouvet AdasÄ±",
    	BW: "Botsvana",
    	BY: "Beyaz Rusya",
    	BZ: "Belize",
    	CA: "Kanada",
    	CC: "Cocos (Keeling) AdalarÄ±",
    	CD: "Kongo - KinÅasa",
    	CF: "Orta Afrika Cumhuriyeti",
    	CG: "Kongo - Brazavil",
    	CH: "Ä°sviÃ§re",
    	CI: "FildiÅi Sahili",
    	CK: "Cook AdalarÄ±",
    	CL: "Åili",
    	CM: "Kamerun",
    	CN: "Ãin",
    	CO: "Kolombiya",
    	CR: "Kosta Rika",
    	CU: "KÃ¼ba",
    	CV: "Cape Verde",
    	CW: "CuraÃ§ao",
    	CX: "Christmas AdasÄ±",
    	CY: "GÃ¼ney KÄ±brÄ±s Rum Kesimi",
    	CZ: "Ãek Cumhuriyeti",
    	DE: "Almanya",
    	DJ: "Cibuti",
    	DK: "Danimarka",
    	DM: "Dominika",
    	DO: "Dominik Cumhuriyeti",
    	DZ: "Cezayir",
    	EC: "Ekvador",
    	EE: "Estonya",
    	EG: "MÄ±sÄ±r",
    	EH: "BatÄ± Sahara",
    	ER: "Eritre",
    	ES: "Ä°spanya",
    	ET: "Etiyopya",
    	FI: "Finlandiya",
    	FJ: "Fiji",
    	FK: "Falkland AdalarÄ±",
    	FM: "Mikronezya",
    	FO: "Faroe AdalarÄ±",
    	FR: "Fransa",
    	GA: "Gabon",
    	GB: "BirleÅik KrallÄ±k",
    	GD: "Grenada",
    	GE: "GÃ¼rcistan",
    	GF: "FransÄ±z GuyanasÄ±",
    	GG: "Guernsey",
    	GH: "Gana",
    	GI: "CebelitarÄ±k",
    	GL: "GrÃ¶nland",
    	GM: "Gambiya",
    	GN: "Gine",
    	GP: "Guadalupe",
    	GQ: "Ekvator Ginesi",
    	GR: "Yunanistan",
    	GS: "GÃ¼ney Georgia ve GÃ¼ney Sandwich AdalarÄ±",
    	GT: "Guatemala",
    	GU: "Guam",
    	GW: "Gine-Bissau",
    	GY: "Guyana",
    	HK: "Ãin Hong Kong ÃYB",
    	HM: "Heard AdasÄ± ve McDonald AdalarÄ±",
    	HN: "Honduras",
    	HR: "HÄ±rvatistan",
    	HT: "Haiti",
    	HU: "Macaristan",
    	ID: "Endonezya",
    	IE: "Ä°rlanda",
    	IL: "Ä°srail",
    	IM: "Man AdasÄ±",
    	IN: "Hindistan",
    	IO: "Britanya Hint Okyanusu TopraklarÄ±",
    	IQ: "Irak",
    	IR: "Ä°ran",
    	IS: "Ä°zlanda",
    	IT: "Ä°talya",
    	JE: "Jersey",
    	JM: "Jamaika",
    	JO: "ÃrdÃ¼n",
    	JP: "Japonya",
    	KE: "Kenya",
    	KG: "KÄ±rgÄ±zistan",
    	KH: "KamboÃ§ya",
    	KI: "Kiribati",
    	KM: "Komorlar",
    	KN: "Saint Kitts ve Nevis",
    	KP: "Kuzey Kore",
    	KR: "GÃ¼ney Kore",
    	KW: "Kuveyt",
    	KY: "Cayman AdalarÄ±",
    	KZ: "Kazakistan",
    	LA: "Laos",
    	LB: "LÃ¼bnan",
    	LC: "Saint Lucia",
    	LI: "Liechtenstein",
    	LK: "Sri Lanka",
    	LR: "Liberya",
    	LS: "Lesoto",
    	LT: "Litvanya",
    	LU: "LÃ¼ksemburg",
    	LV: "Letonya",
    	LY: "Libya",
    	MA: "Fas",
    	MC: "Monako",
    	MD: "Moldova",
    	ME: "KaradaÄ",
    	MF: "Saint Martin",
    	MG: "Madagaskar",
    	MH: "Marshall AdalarÄ±",
    	MK: "Makedonya",
    	ML: "Mali",
    	MM: "Myanmar (Burma)",
    	MN: "MoÄolistan",
    	MO: "Ãin Makao ÃYB",
    	MP: "Kuzey Mariana AdalarÄ±",
    	MQ: "Martinik",
    	MR: "Moritanya",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mauritius",
    	MV: "Maldivler",
    	MW: "Malavi",
    	MX: "Meksika",
    	MY: "Malezya",
    	MZ: "Mozambik",
    	NA: "Namibya",
    	NC: "Yeni Kaledonya",
    	NE: "Nijer",
    	NF: "Norfolk AdasÄ±",
    	NG: "Nijerya",
    	NI: "Nikaragua",
    	NL: "Hollanda",
    	NO: "NorveÃ§",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Yeni Zelanda",
    	OM: "Umman",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "FransÄ±z PolinezyasÄ±",
    	PG: "Papua Yeni Gine",
    	PH: "Filipinler",
    	PK: "Pakistan",
    	PL: "Polonya",
    	PM: "Saint Pierre ve Miquelon",
    	PN: "Pitcairn AdalarÄ±",
    	PR: "Porto Riko",
    	PS: "Filistin BÃ¶lgeleri",
    	PT: "Portekiz",
    	PW: "Palau",
    	PY: "Paraguay",
    	QA: "Katar",
    	RE: "RÃ©union",
    	RO: "Romanya",
    	RS: "SÄ±rbistan",
    	RU: "Rusya",
    	RW: "Ruanda",
    	SA: "Suudi Arabistan",
    	SB: "Solomon AdalarÄ±",
    	SC: "SeyÅeller",
    	SD: "Sudan",
    	SE: "Ä°sveÃ§",
    	SG: "Singapur",
    	SH: "Saint Helena",
    	SI: "Slovenya",
    	SJ: "Svalbard ve Jan Mayen AdalarÄ±",
    	SK: "Slovakya",
    	SL: "Sierra Leone",
    	SM: "San Marino",
    	SN: "Senegal",
    	SO: "Somali",
    	SR: "Surinam",
    	SS: "GÃ¼ney Sudan",
    	ST: "SÃ£o TomÃ© ve PrÃ­ncipe",
    	SV: "El Salvador",
    	SX: "Sint Maarten",
    	SY: "Suriye",
    	SZ: "Svaziland",
    	TC: "Turks ve Caicos AdalarÄ±",
    	TD: "Ãad",
    	TF: "FransÄ±z GÃ¼ney TopraklarÄ±",
    	TG: "Togo",
    	TH: "Tayland",
    	TJ: "Tacikistan",
    	TK: "Tokelau",
    	TL: "Timor-Leste",
    	TM: "TÃ¼rkmenistan",
    	TN: "Tunus",
    	TO: "Tonga",
    	TR: "TÃ¼rkiye",
    	TT: "Trinidad ve Tobago",
    	TV: "Tuvalu",
    	TW: "Tayvan",
    	TZ: "Tanzanya",
    	UA: "Ukrayna",
    	UG: "Uganda",
    	UM: "ABD Uzak AdalarÄ±",
    	US: "ABD",
    	UY: "Uruguay",
    	UZ: "Ãzbekistan",
    	VA: "Vatikan",
    	VC: "Saint Vincent ve Grenadinler",
    	VE: "Venezuela",
    	VG: "Britanya Virjin AdalarÄ±",
    	VI: "ABD Virjin AdalarÄ±",
    	VN: "Vietnam",
    	VU: "Vanuatu",
    	WF: "Wallis ve Futuna AdalarÄ±",
    	WS: "Samoa",
    	YE: "Yemen",
    	YT: "Mayotte",
    	ZA: "GÃ¼ney Afrika",
    	ZM: "Zambiya",
    	ZW: "Zimbabve",
    	XK: "Kosova"
    };
    var tr = {
    	locale: locale$G,
    	countries: countries$G
    };

    var tr$1 = /*#__PURE__*/Object.freeze({
        locale: locale$G,
        countries: countries$G,
        default: tr
    });

    var locale$H = "uk";
    var countries$H = {
    	AU: "ÐÐ²ÑÑÑÐ°Ð»ÑÑ",
    	AT: "ÐÐ²ÑÑÑÑÑ",
    	AZ: "ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½",
    	AX: "ÐÐ»Ð°Ð½Ð´ÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	AL: "ÐÐ»Ð±Ð°Ð½ÑÑ",
    	DZ: "ÐÐ»Ð¶Ð¸Ñ",
    	AS: "ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÑÐºÐµ Ð¡Ð°Ð¼Ð¾Ð°",
    	AI: "ÐÐ½Ð³ÑÐ»ÑÑ",
    	AO: "ÐÐ½Ð³Ð¾Ð»Ð°",
    	AD: "ÐÐ½Ð´Ð¾ÑÑÐ°",
    	AQ: "ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°",
    	AG: "ÐÐ½ÑÐ¸Ð³ÑÐ° Ñ ÐÐ°ÑÐ±ÑÐ´Ð°",
    	MO: "ÐÐ¾Ð¼Ð¸Ð½Ñ",
    	AR: "ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°",
    	AM: "ÐÑÐ¼ÐµÐ½ÑÑ",
    	AW: "ÐÑÑÐ±Ð°",
    	AF: "ÐÑÐ³Ð°Ð½ÑÑÑÐ°Ð½",
    	BS: "ÐÐ°Ð³Ð°Ð¼Ð¸",
    	BD: "ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ",
    	BB: "ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ",
    	BH: "ÐÐ°ÑÑÐµÐ¹Ð½",
    	BZ: "ÐÐµÐ»ÑÐ·",
    	BE: "ÐÐµÐ»ÑÐ³ÑÑ",
    	BJ: "ÐÐµÐ½ÑÐ½",
    	BM: "ÐÐµÑÐ¼ÑÐ´Ð¸",
    	BY: "ÐÑÐ»Ð¾ÑÑÑÑ",
    	BG: "ÐÐ¾Ð»Ð³Ð°ÑÑÑ",
    	BO: "ÐÐ¾Ð»ÑÐ²ÑÑ",
    	BA: "ÐÐ¾ÑÐ½ÑÑ Ñ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°",
    	BW: "ÐÐ¾ÑÑÐ²Ð°Ð½Ð°",
    	BR: "ÐÑÐ°Ð·Ð¸Ð»ÑÑ",
    	IO: "ÐÑÐ¸ÑÐ°Ð½ÑÑÐºÐ° Ð¢ÐµÑÐ¸ÑÐ¾ÑÑÑ Ð² ÐÐ½Ð´ÑÐ¹ÑÑÐºÐ¾Ð¼Ñ ÐÐºÐµÐ°Ð½Ñ",
    	VG: "ÐÑÐ¸ÑÐ°Ð½ÑÑÐºÑ ÐÑÑÐ³ÑÐ½ÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸",
    	BN: "ÐÑÑÐ½ÐµÐ¹ ÐÐ°ÑÑÑÑÐ°Ð»Ð°Ð¼",
    	BF: "ÐÑÑÐºÑÐ½Ð°-Ð¤Ð°ÑÐ¾",
    	BI: "ÐÑÑÑÐ½Ð´Ñ",
    	BT: "ÐÑÑÐ°Ð½",
    	VU: "ÐÐ°Ð½ÑÐ°ÑÑ",
    	VA: "ÐÐ°ÑÐ¸ÐºÐ°Ð½",
    	GB: "ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½ÑÑ",
    	VE: "ÐÐµÐ½ÐµÑÑÐµÐ»Ð°",
    	VI: "ÐÑÑÐ³ÑÐ½ÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸ (Ð¡Ð¨Ð)",
    	WF: "ÐÐ¾Ð»Ð»ÑÑ Ñ Ð¤ÑÑÑÐ½Ð°",
    	VN: "Ð'ÑÑÐ½Ð°Ð¼",
    	UM: "ÐÐ¾Ð²Ð½ÑÑÐ½Ñ Ð¼Ð°Ð»Ñ Ð¾ÑÑÑÐ¾Ð²Ð¸ (Ð¡Ð¨Ð)",
    	GA: "ÐÐ°Ð±Ð¾Ð½",
    	HT: "ÐÐ°ÑÑÑ",
    	GY: "ÐÐ°ÑÐ½Ð°",
    	GM: "ÐÐ°Ð¼Ð±ÑÑ",
    	GH: "ÐÐ°Ð½Ð°",
    	GP: "ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°",
    	GT: "ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°",
    	GF: "ÐÐ²ÑÐ°Ð½Ð°",
    	GN: "ÐÐ²ÑÐ½ÐµÑ",
    	GW: "ÐÐ²ÑÐ½ÐµÑ-ÐÑÑÐ°Ñ",
    	GG: "ÐÐµÑÐ½ÑÑ",
    	GI: "ÐÑÐ±ÑÐ°Ð»ÑÐ°Ñ",
    	HN: "ÐÐ¾Ð½Ð´ÑÑÐ°Ñ",
    	HK: "ÐÐ¾Ð½ÐºÐ¾Ð½Ð³",
    	GD: "ÐÑÐµÐ½Ð°Ð´Ð°",
    	GR: "ÐÑÐµÑÑÑ",
    	GE: "ÐÑÑÐ·ÑÑ",
    	GU: "ÐÑÐ°Ð¼",
    	GL: "ÒÑÐµÐ½Ð»Ð°Ð½Ð´ÑÑ",
    	DK: "ÐÐ°Ð½ÑÑ",
    	JE: "ÐÐ¶ÐµÑÑÑ",
    	DJ: "ÐÐ¶Ð¸Ð±ÑÑÑ",
    	DM: "ÐÐ¾Ð¼ÑÐ½ÑÐºÐ°",
    	DO: "ÐÐ¾Ð¼ÑÐ½ÑÐºÐ°Ð½ÑÑÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°",
    	CD: "ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐ½Ð° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ° ÐÐ¾Ð½Ð³Ð¾",
    	EC: "ÐÐºÐ²Ð°Ð´Ð¾Ñ",
    	GQ: "ÐÐºÐ²Ð°ÑÐ¾ÑÑÐ°Ð»ÑÐ½Ð° ÐÐ²ÑÐ½ÐµÑ",
    	ER: "ÐÑÐ¸ÑÑÐµÑ",
    	EE: "ÐÑÑÐ¾Ð½ÑÑ",
    	ET: "ÐÑÑÐ¾Ð¿ÑÑ",
    	EG: "ÐÐ³Ð¸Ð¿ÐµÑ",
    	YE: "ÐÐ¼ÐµÐ½",
    	ZM: "ÐÐ°Ð¼Ð±ÑÑ",
    	ZW: "ÐÑÐ¼Ð±Ð°Ð±Ð²Ðµ",
    	IL: "ÐÐ·ÑÐ°ÑÐ»Ñ",
    	IN: "ÐÐ½Ð´ÑÑ",
    	ID: "ÐÐ½Ð´Ð¾Ð½ÐµÐ·ÑÑ",
    	IQ: "ÐÑÐ°Ðº",
    	IR: "ÐÑÐ°Ð½",
    	IE: "ÐÑÐ»Ð°Ð½Ð´ÑÑ",
    	IS: "ÐÑÐ»Ð°Ð½Ð´ÑÑ",
    	ES: "ÐÑÐ¿Ð°Ð½ÑÑ",
    	IT: "ÐÑÐ°Ð»ÑÑ",
    	JO: "ÐÐ¾ÑÐ´Ð°Ð½ÑÑ",
    	CV: "ÐÐ°Ð±Ð¾-ÐÐµÑÐ´Ðµ",
    	KZ: "ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½",
    	KY: "ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð¸",
    	KH: "ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°",
    	CM: "ÐÐ°Ð¼ÐµÑÑÐ½",
    	CA: "ÐÐ°Ð½Ð°Ð´Ð°",
    	BQ: "ÐÐ°ÑÐ¸Ð±ÑÑÐºÑ ÐÑÐ´ÐµÑÐ»Ð°Ð½Ð´Ð¸",
    	QA: "ÐÐ°ÑÐ°Ñ",
    	KE: "ÐÐµÐ½ÑÑ",
    	CY: "ÐÑÐ¿Ñ",
    	KI: "ÐÑÑÐ¸Ð±Ð°ÑÑ",
    	KG: "ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½",
    	TW: "Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ° ÐÐ¸ÑÐ°Ð¹",
    	KP: "ÐÐÐÐ  (ÐÐ¾ÑÐµÐ¹ÑÑÐºÐ° ÐÐ°ÑÐ¾Ð´Ð½Ð¾-ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐ½Ð° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°)",
    	CN: "ÐÐÐ  (ÐÐ¸ÑÐ°Ð¹ÑÑÐºÐ° ÐÐ°ÑÐ¾Ð´Ð½Ð° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°)",
    	CC: "ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ñ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	CO: "ÐÐ¾Ð»ÑÐ¼Ð±ÑÑ",
    	KM: "ÐÐ¾Ð¼Ð¾ÑÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸",
    	XK: "ÐÐ¾ÑÐ¾Ð²Ð¾",
    	CR: "ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°",
    	CI: "ÐÐ¾Ñ-Ð´'ÐÐ²ÑÐ°Ñ",
    	CU: "ÐÑÐ±Ð°",
    	KW: "ÐÑÐ²ÐµÐ¹Ñ",
    	CW: "ÐÑÑÐ°ÑÐ°Ð¾",
    	LA: "ÐÐ°Ð¾Ñ",
    	LV: "ÐÐ°ÑÐ²ÑÑ",
    	LS: "ÐÐµÑÐ¾ÑÐ¾",
    	LR: "ÐÑÐ±ÐµÑÑÑ",
    	LB: "ÐÑÐ²Ð°Ð½",
    	LY: "ÐÑÐ²ÑÑ",
    	LT: "ÐÐ¸ÑÐ²Ð°",
    	LI: "ÐÑÑÑÐµÐ½ÑÑÐµÐ¹Ð½",
    	LU: "ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³",
    	MU: "ÐÐ°Ð²ÑÐ¸ÐºÑÐ¹",
    	MR: "ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½ÑÑ",
    	MG: "ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ",
    	YT: "ÐÐ°Ð¹Ð¾ÑÑÐ°",
    	MK: "ÐÐ°ÐºÐµÐ´Ð¾Ð½ÑÑ",
    	MW: "ÐÐ°Ð»Ð°Ð²Ñ",
    	MY: "ÐÐ°Ð»Ð°Ð¹Ð·ÑÑ",
    	ML: "ÐÐ°Ð»Ñ",
    	MV: "ÐÐ°Ð»ÑÐ´ÑÐ²Ñ",
    	MT: "ÐÐ°Ð»ÑÑÐ°",
    	MA: "ÐÐ°ÑÐ¾ÐºÐºÐ¾",
    	MQ: "ÐÐ°ÑÑÐ¸Ð½ÑÐºÐ°",
    	MH: "ÐÐ°ÑÑÐ°Ð»Ð»Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð¸",
    	MX: "ÐÐµÐºÑÐ¸ÐºÐ°",
    	FM: "ÐÑÐºÑÐ¾Ð½ÐµÐ·ÑÑ",
    	MZ: "ÐÐ¾Ð·Ð°Ð¼Ð±ÑÐº",
    	MD: "ÐÐ¾Ð»Ð´Ð¾Ð²Ð°",
    	MC: "ÐÐ¾Ð½Ð°ÐºÐ¾",
    	MN: "ÐÐ¾Ð½Ð³Ð¾Ð»ÑÑ",
    	MS: "ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ",
    	MM: "Ð'ÑÐ½Ð¼Ð°",
    	NA: "ÐÐ°Ð¼ÑÐ±ÑÑ",
    	NR: "ÐÐ°ÑÑÑ",
    	NP: "ÐÐµÐ¿Ð°Ð»",
    	NE: "ÐÑÐ³ÐµÑ",
    	NG: "ÐÑÐ³ÐµÑÑÑ",
    	NL: "ÐÑÐ´ÐµÑÐ»Ð°Ð½Ð´Ð¸",
    	NI: "ÐÑÐºÐ°ÑÐ°Ð³ÑÐ°",
    	DE: "ÐÑÐ¼ÐµÑÑÐ¸Ð½Ð°",
    	NU: "ÐÑÑÐµ",
    	NZ: "ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´ÑÑ",
    	NC: "ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½ÑÑ",
    	NO: "ÐÐ¾ÑÐ²ÐµÐ³ÑÑ",
    	AE: "ÐÐ±'ÑÐ´Ð½Ð°Ð½Ñ ÐÑÐ°Ð±ÑÑÐºÑ ÐÐ¼ÑÑÐ°ÑÐ¸",
    	OM: "ÐÐ¼Ð°Ð½",
    	BV: "ÐÑÑÑÑÐ² ÐÑÐ²Ðµ",
    	HM: "ÐÑÑÑÑÐ² ÐÐµÑÐ´ Ñ Ð¾ÑÑÑÐ¾Ð²Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´",
    	IM: "ÐÑÑÑÑÐ² ÐÐµÐ½",
    	NF: "ÐÑÑÑÑÐ² ÐÐ¾ÑÑÐ¾Ð»Ðº",
    	CX: "ÐÑÑÑÑÐ² Ð ÑÐ·Ð´Ð²Ð°",
    	CK: "ÐÑÑÑÐ¾Ð²Ð¸ ÐÑÐºÐ°",
    	SH: "ÐÑÑÑÐ¾Ð²Ð¸ Ð¡Ð²ÑÑÐ¾Ñ ÐÐ»ÐµÐ½Ð¸, ÐÐ¾Ð·Ð½ÐµÑÑÐ½Ð½Ñ Ñ Ð¢ÑÐ¸ÑÑÐ°Ð½-Ð´Ð°-ÐÑÐ½ÑÑ",
    	TC: "ÐÑÑÑÐ¾Ð²Ð¸ Ð¢ÐµÑÐºÑ Ñ ÐÐ°Ð¹ÐºÐ¾Ñ",
    	PK: "ÐÐ°ÐºÐ¸ÑÑÐ°Ð½",
    	PW: "ÐÐ°Ð»Ð°Ñ",
    	PS: "ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÑÐºÐ° Ð´ÐµÑÐ¶Ð°Ð²Ð°",
    	PA: "ÐÐ°Ð½Ð°Ð¼Ð°",
    	PG: "ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²ÑÐ½ÐµÑ",
    	ZA: "ÐÐÐ ",
    	PY: "ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹",
    	PE: "ÐÐµÑÑ",
    	GS: "ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ¶Ð¾ÑÐ´Ð¶ÑÑ ÑÐ° ÐÑÐ²Ð´ÐµÐ½Ð½Ñ Ð¡Ð°Ð½Ð´Ð²ÑÑÐµÐ²Ñ ÐÑÑÑÐ¾Ð²Ð¸",
    	KR: "ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ¾ÑÐµÑ",
    	SS: "ÐÑÐ²Ð´ÐµÐ½Ð½Ð¸Ð¹ Ð¡ÑÐ´Ð°Ð½",
    	MP: "ÐÑÐ²Ð½ÑÑÐ½Ñ ÐÐ°ÑÑÐ°Ð½ÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸",
    	PN: "ÐÑÑÐºÐµÑÐ½",
    	PL: "ÐÐ¾Ð»ÑÑÐ°",
    	PT: "ÐÐ¾ÑÑÑÐ³Ð°Ð»ÑÑ",
    	PR: "ÐÑÐµÑÑÐ¾-Ð ÑÐºÐ¾",
    	CG: "Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ° ÐÐ¾Ð½Ð³Ð¾",
    	RE: "Ð ÐµÑÐ½ÑÐ¹Ð¾Ð½",
    	RU: "Ð Ð¾ÑÑÑ",
    	RW: "Ð ÑÐ°Ð½Ð´Ð°",
    	RO: "Ð ÑÐ¼ÑÐ½ÑÑ",
    	EH: "Ð¡ÐÐÐ ",
    	SV: "Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ",
    	WS: "Ð¡Ð°Ð¼Ð¾Ð°",
    	SM: "Ð¡Ð°Ð½-ÐÐ°ÑÑÐ½Ð¾",
    	ST: "Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ñ ÐÑÐ¸Ð½ÑÑÐ¿Ñ",
    	SA: "Ð¡Ð°ÑÐ´ÑÐ²ÑÑÐºÐ° ÐÑÐ°Ð²ÑÑ",
    	SZ: "Ð¡Ð²Ð°Ð·ÑÐ»ÐµÐ½Ð´",
    	SJ: "Ð¡Ð²Ð°Ð»ÑÐ±Ð°ÑÐ´ Ñ Ð¯Ð½-ÐÐ°ÑÐ½",
    	SC: "Ð¡ÐµÐ¹ÑÐµÐ»ÑÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸",
    	BL: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ»ÑÐ¼Ñ",
    	MF: "Ð¡ÐµÐ½-ÐÐ°ÑÑÐµÐ½",
    	PM: "Ð¡ÐµÐ½-Ð'ÑÑ Ñ ÐÑÐºÐµÐ»Ð¾Ð½",
    	SN: "Ð¡ÐµÐ½ÐµÐ³Ð°Ð»",
    	VC: "Ð¡ÐµÐ½Ñ-ÐÑÐ½ÑÐµÐ½Ñ Ñ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸",
    	KN: "Ð¡ÐµÐ½Ñ-ÐÑÑÑÑ Ñ ÐÐµÐ²ÑÑ",
    	LC: "Ð¡ÐµÐ½Ñ-ÐÑÑÑÑ",
    	RS: "Ð¡ÐµÑÐ±ÑÑ",
    	SG: "Ð¡ÑÐ½Ð³Ð°Ð¿ÑÑ",
    	SX: "Ð¡ÑÐ½Ñ-ÐÐ°ÑÑÐµÐ½",
    	SY: "Ð¡ÑÑÑÑ",
    	SK: "Ð¡Ð»Ð¾Ð²Ð°ÑÑÐ¸Ð½Ð°",
    	SI: "Ð¡Ð»Ð¾Ð²ÐµÐ½ÑÑ",
    	SB: "Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð¸",
    	SO: "Ð¡Ð¾Ð¼Ð°Ð»Ñ",
    	SD: "Ð¡ÑÐ´Ð°Ð½",
    	SR: "Ð¡ÑÑÐ¸Ð½Ð°Ð¼",
    	TL: "Ð¡ÑÑÐ´Ð½Ð¸Ð¹ Ð¢Ð¸Ð¼Ð¾Ñ",
    	US: "Ð¡Ð¨Ð",
    	SL: "Ð¡ÑÑÑÑÐ°-ÐÐµÐ¾Ð½Ðµ",
    	TJ: "Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½",
    	TH: "Ð¢Ð°ÑÐ»Ð°Ð½Ð´",
    	TZ: "Ð¢Ð°Ð½Ð·Ð°Ð½ÑÑ",
    	TG: "Ð¢Ð¾Ð³Ð¾",
    	TK: "Ð¢Ð¾ÐºÐµÐ»Ð°Ñ",
    	TO: "Ð¢Ð¾Ð½Ð³Ð°",
    	TT: "Ð¢ÑÐ¸Ð½ÑÐ´Ð°Ð´ Ñ Ð¢Ð¾Ð±Ð°Ð³Ð¾",
    	TV: "Ð¢ÑÐ²Ð°Ð»Ñ",
    	TN: "Ð¢ÑÐ½ÑÑ",
    	TM: "Ð¢ÑÑÐºÐ¼ÐµÐ½ÑÑÑÐ°Ð½",
    	TR: "Ð¢ÑÑÑÑÑ",
    	UG: "Ð£Ð³Ð°Ð½Ð´Ð°",
    	HU: "Ð£Ð³Ð¾ÑÑÐ¸Ð½Ð°",
    	UZ: "Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½",
    	UA: "Ð£ÐºÑÐ°ÑÐ½Ð°",
    	UY: "Ð£ÑÑÐ³Ð²Ð°Ð¹",
    	FO: "Ð¤Ð°ÑÐµÑÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸",
    	FJ: "Ð¤ÑÐ´Ð¶Ñ",
    	PH: "Ð¤ÑÐ»ÑÐ¿Ð¿ÑÐ½Ð¸",
    	FI: "Ð¤ÑÐ½Ð»ÑÐ½Ð´ÑÑ",
    	FK: "Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸",
    	FR: "Ð¤ÑÐ°Ð½ÑÑÑ",
    	PF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ° ÐÐ¾Ð»ÑÐ½ÐµÐ·ÑÑ",
    	TF: "Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÑ ÐÑÐ²Ð´ÐµÐ½Ð½Ñ Ñ ÐÐ½ÑÐ°ÑÐºÑÐ¸ÑÐ½Ñ Ð¢ÐµÑÐ¸ÑÐ¾ÑÑÑ",
    	HR: "Ð¥Ð¾ÑÐ²Ð°ÑÑÑ",
    	CF: "Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÑÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°",
    	TD: "Ð§Ð°Ð´",
    	ME: "Ð§Ð¾ÑÐ½Ð¾Ð³Ð¾ÑÑÑ",
    	CZ: "Ð§ÐµÑÑÑ",
    	CL: "Ð§ÑÐ»Ñ",
    	CH: "Ð¨Ð²ÐµÐ¹ÑÐ°ÑÑÑ",
    	SE: "Ð¨Ð²ÐµÑÑÑ",
    	LK: "Ð¨ÑÑ-ÐÐ°Ð½ÐºÐ°",
    	JM: "Ð¯Ð¼Ð°Ð¹ÐºÐ°",
    	JP: "Ð¯Ð¿Ð¾Ð½ÑÑ"
    };
    var uk = {
    	locale: locale$H,
    	countries: countries$H
    };

    var uk$1 = /*#__PURE__*/Object.freeze({
        locale: locale$H,
        countries: countries$H,
        default: uk
    });

    var locale$I = "uz";
    var countries$I = {
    	AD: "Andorra",
    	AE: "Birlashgan Arab Amirliklari",
    	AF: "AfgÊ»oniston",
    	AG: "Antigua va Barbuda",
    	AI: "Angilya",
    	AL: "Albaniya",
    	AM: "Armaniston",
    	AO: "Angola",
    	AQ: "Antarktida",
    	AR: "Argentina",
    	AS: "Amerika Samoasi",
    	AT: "Avstriya",
    	AU: "Avstraliya",
    	AW: "Aruba",
    	AX: "Aland orollari",
    	AZ: "Ozarbayjon",
    	BA: "Bosniya va Gertsegovina",
    	BB: "Barbados",
    	BD: "Bangladesh",
    	BE: "Belgiya",
    	BF: "Burkina-Faso",
    	BG: "Bolgariya",
    	BH: "Bahrayn",
    	BI: "Burundi",
    	BJ: "Benin",
    	BL: "Sen-Bartelemi",
    	BM: "Bermuda orollari",
    	BN: "Bruney",
    	BO: "Boliviya",
    	BQ: "Boneyr, Sint-Estatius va Saba",
    	BR: "Braziliya",
    	BS: "Bagama orollari",
    	BT: "Butan",
    	BV: "Buve oroli",
    	BW: "Botsvana",
    	BY: "Belarus",
    	BZ: "Beliz",
    	CA: "Kanada",
    	CC: "Kokos (Kiling) orollari",
    	CD: "Kongo â Kinshasa",
    	CF: "Markaziy Afrika Respublikasi",
    	CG: "Kongo â Brazzavil",
    	CH: "Shveytsariya",
    	CI: "Kot-dâIvuar",
    	CK: "Kuk orollari",
    	CL: "Chili",
    	CM: "Kamerun",
    	CN: "Xitoy",
    	CO: "Kolumbiya",
    	CR: "Kosta-Rika",
    	CU: "Kuba",
    	CV: "Kabo-Verde",
    	CW: "Kyurasao",
    	CX: "Rojdestvo oroli",
    	CY: "Kipr",
    	CZ: "Chexiya",
    	DE: "Germaniya",
    	DJ: "Jibuti",
    	DK: "Daniya",
    	DM: "Dominika",
    	DO: "Dominikan Respublikasi",
    	DZ: "Jazoir",
    	EC: "Ekvador",
    	EE: "Estoniya",
    	EG: "Misr",
    	EH: "Gâarbiy Sahroi Kabir",
    	ER: "Eritreya",
    	ES: "Ispaniya",
    	ET: "Efiopiya",
    	FI: "Finlandiya",
    	FJ: "Fiji",
    	FK: "Folklend orollari",
    	FM: "Mikroneziya",
    	FO: "Farer orollari",
    	FR: "Fransiya",
    	GA: "Gabon",
    	GB: "Buyuk Britaniya",
    	GD: "Grenada",
    	GE: "Gruziya",
    	GF: "Fransuz Gvianasi",
    	GG: "Gernsi",
    	GH: "Gana",
    	GI: "Gibraltar",
    	GL: "Grenlandiya",
    	GM: "Gambiya",
    	GN: "Gvineya",
    	GP: "Gvadelupe",
    	GQ: "Ekvatorial Gvineya",
    	GR: "Gretsiya",
    	GS: "Janubiy Georgiya va Janubiy Sendvich orollari",
    	GT: "Gvatemala",
    	GU: "Guam",
    	GW: "Gvineya-Bisau",
    	GY: "Gayana",
    	HK: "Gonkong (Xitoy MMH)",
    	HM: "Xerd va Makdonald orollari",
    	HN: "Gonduras",
    	HR: "Xorvatiya",
    	HT: "Gaiti",
    	HU: "Vengriya",
    	ID: "Indoneziya",
    	IE: "Irlandiya",
    	IL: "Isroil",
    	IM: "Men oroli",
    	IN: "Hindiston",
    	IO: "Britaniyaning Hind okeanidagi hududi",
    	IQ: "Iroq",
    	IR: "Eron",
    	IS: "Islandiya",
    	IT: "Italiya",
    	JE: "Jersi",
    	JM: "Yamayka",
    	JO: "Iordaniya",
    	JP: "Yaponiya",
    	KE: "Keniya",
    	KG: "QirgÊ»iziston",
    	KH: "Kambodja",
    	KI: "Kiribati",
    	KM: "Komor orollari",
    	KN: "Sent-Kits va Nevis",
    	KP: "Shimoliy Koreya",
    	KR: "Janubiy Koreya",
    	KW: "Quvayt",
    	KY: "Kayman orollari",
    	KZ: "QozogÊ»iston",
    	LA: "Laos",
    	LB: "Livan",
    	LC: "Sent-Lyusiya",
    	LI: "Lixtenshteyn",
    	LK: "Shri-Lanka",
    	LR: "Liberiya",
    	LS: "Lesoto",
    	LT: "Litva",
    	LU: "Lyuksemburg",
    	LV: "Latviya",
    	LY: "Liviya",
    	MA: "Marokash",
    	MC: "Monako",
    	MD: "Moldova",
    	ME: "Chernogoriya",
    	MF: "Sent-Martin",
    	MG: "Madagaskar",
    	MH: "Marshall orollari",
    	MK: "Makedoniya",
    	ML: "Mali",
    	MM: "Myanma (Birma)",
    	MN: "Mongoliya",
    	MO: "Makao (Xitoy MMH)",
    	MP: "Shimoliy Mariana orollari",
    	MQ: "Martinika",
    	MR: "Mavritaniya",
    	MS: "Montserrat",
    	MT: "Malta",
    	MU: "Mavrikiy",
    	MV: "Maldiv orollari",
    	MW: "Malavi",
    	MX: "Meksika",
    	MY: "Malayziya",
    	MZ: "Mozambik",
    	NA: "Namibiya",
    	NC: "Yangi Kaledoniya",
    	NE: "Niger",
    	NF: "Norfolk oroli",
    	NG: "Nigeriya",
    	NI: "Nikaragua",
    	NL: "Niderlandiya",
    	NO: "Norvegiya",
    	NP: "Nepal",
    	NR: "Nauru",
    	NU: "Niue",
    	NZ: "Yangi Zelandiya",
    	OM: "Ummon",
    	PA: "Panama",
    	PE: "Peru",
    	PF: "Fransuz Polineziyasi",
    	PG: "Papua â Yangi Gvineya",
    	PH: "Filippin",
    	PK: "Pokiston",
    	PL: "Polsha",
    	PM: "Sen-Pyer va Mikelon",
    	PN: "Pitkern orollari",
    	PR: "Puerto-Riko",
    	PS: "Falastin hududi",
    	PT: "Portugaliya",
    	PW: "Palau",
    	PY: "Paragvay",
    	QA: "Qatar",
    	RE: "Reyunion",
    	RO: "Ruminiya",
    	RS: "Serbiya",
    	RU: "Rossiya",
    	RW: "Ruanda",
    	SA: "Saudiya Arabistoni",
    	SB: "Solomon orollari",
    	SC: "Seyshel orollari",
    	SD: "Sudan",
    	SE: "Shvetsiya",
    	SG: "Singapur",
    	SH: "Muqaddas Yelena oroli",
    	SI: "Sloveniya",
    	SJ: "Svalbard va Yan-Mayen",
    	SK: "Slovakiya",
    	SL: "Syerra-Leone",
    	SM: "San-Marino",
    	SN: "Senegal",
    	SO: "Somali",
    	SR: "Surinam",
    	SS: "Janubiy Sudan",
    	ST: "San-Tome va Prinsipi",
    	SV: "Salvador",
    	SX: "Sint-Marten",
    	SY: "Suriya",
    	SZ: "Svazilend",
    	TC: "Turks va Kaykos orollari",
    	TD: "Chad",
    	TF: "Fransuz Janubiy hududlari",
    	TG: "Togo",
    	TH: "Tailand",
    	TJ: "Tojikiston",
    	TK: "Tokelau",
    	TL: "Timor-Leste",
    	TM: "Turkmaniston",
    	TN: "Tunis",
    	TO: "Tonga",
    	TR: "Turkiya",
    	TT: "Trinidad va Tobago",
    	TV: "Tuvalu",
    	TW: "Tayvan",
    	TZ: "Tanzaniya",
    	UA: "Ukraina",
    	UG: "Uganda",
    	UM: "AQSH yondosh orollari",
    	US: "Amerika Qoâshma Shtatlari",
    	UY: "Urugvay",
    	UZ: "OÊ»zbekiston",
    	VA: "Vatikan",
    	VC: "Sent-Vinsent va Grenadin",
    	VE: "Venesuela",
    	VG: "Britaniya Virgin orollari",
    	VI: "AQSH Virgin orollari",
    	VN: "Vyetnam",
    	VU: "Vanuatu",
    	WF: "Uollis va Futuna",
    	WS: "Samoa",
    	XK: "Kosovo",
    	YE: "Yaman",
    	YT: "Mayotta",
    	ZA: "Janubiy Afrika Respublikasi",
    	ZM: "Zambiya",
    	ZW: "Zimbabve"
    };
    var uz = {
    	locale: locale$I,
    	countries: countries$I
    };

    var uz$1 = /*#__PURE__*/Object.freeze({
        locale: locale$I,
        countries: countries$I,
        default: uz
    });

    var locale$J = "zh";
    var countries$J = {
    	AD: "å®éå°",
    	AE: "é¿èé",
    	AF: "é¿å¯æ±",
    	AG: "å®å°å¡åå·´å¸è¾¾",
    	AI: "å®å­æ",
    	AL: "é¿å°å·´å°¼äº",
    	AM: "äºç¾å°¼äº",
    	AO: "å®å¥æ",
    	AQ: "åææ´²",
    	AR: "é¿æ ¹å»·",
    	AS: "ç¾å±è¨æ©äº",
    	AT: "å¥¥å°å©",
    	AU: "æ¾³å¤§å©äº",
    	AW: "é¿é²å·´",
    	AX: "å¥¥å°",
    	AZ: "é¿å¡æç",
    	BA: "æ³¢æ¯å°¼äºåé»å¡å¥ç»´é£",
    	BB: "å·´å·´å¤æ¯",
    	BD: "å­å æå½",
    	BE: "æ¯å©æ¶",
    	BF: "å¸åçº³æ³ç´¢",
    	BG: "ä¿å å©äº",
    	BH: "å·´æ",
    	BI: "å¸éè¿ª",
    	BJ: "è´å®",
    	BL: "å£å·´æ³°åç±³",
    	BM: "ç¾æå¤§",
    	BN: "æè±",
    	BO: "ç»å©ç»´äº",
    	BQ: "å åæ¯è·å°",
    	BR: "å·´è¥¿",
    	BS: "å·´åé©¬",
    	BT: "ä¸ä¸¹",
    	BV: "å¸é¦å²",
    	BW: "åè¨ç¦çº³",
    	BY: "ç½ä¿ç½æ¯",
    	BZ: "ä¼¯å©å¹",
    	CA: "å æ¿å¤§",
    	CC: "ç§ç§æ¯ï¼åºæï¼ç¾¤å²",
    	CD: "åæï¼é)",
    	CF: "ä¸­é",
    	CG: "åæï¼å¸)",
    	CH: "çå£«",
    	CI: "ç§ç¹è¿ªç¦",
    	CK: "åºåç¾¤å²",
    	CL: "æºå©",
    	CM: "åéº¦é",
    	CN: "ä¸­å½",
    	CO: "å¥ä¼¦æ¯äº",
    	CR: "å¥æ¯è¾¾é»å ",
    	CU: "å¤å·´",
    	CV: "ä½å¾è§",
    	CW: "åºæç´¢",
    	CX: "å£è¯å²",
    	CY: "èµæ®åæ¯",
    	CZ: "æ·å",
    	DE: "å¾·å½",
    	DJ: "åå¸æ",
    	DK: "ä¸¹éº¦",
    	DM: "å¤ç±³å°¼å",
    	DO: "å¤ç±³å°¼å ",
    	DZ: "é¿å°åå©äº",
    	EC: "åçå¤å°",
    	EE: "ç±æ²å°¼äº",
    	EG: "åå",
    	EH: "é¿æä¼¯æåææ°ä¸»å±åå½",
    	ER: "åç«ç¹éäº",
    	ES: "è¥¿ç­ç",
    	ET: "è¡£ç´¢æ¯äº",
    	FI: "è¬å°",
    	FJ: "ææµ",
    	FK: "ç¦åå°ç¾¤å²",
    	FM: "å¯åç½å°¼è¥¿äºèé¦",
    	FO: "æ³ç½ç¾¤å²",
    	FR: "æ³å½",
    	GA: "å å½­",
    	GB: "è±å½",
    	GD: "æ ¼çé£è¾¾",
    	GE: "æ ¼é²åäº",
    	GF: "æ³å±å­äºé£",
    	GG: "æ ¹è¥¿",
    	GH: "å çº³",
    	GI: "ç´å¸ç½é",
    	GL: "æ ¼éµå°",
    	GM: "åæ¯äº",
    	GN: "å åäº",
    	GP: "çå¾·ç½æ®",
    	GQ: "èµ¤éå åäº",
    	GR: "å¸è",
    	GS: "åä¹æ²»äºååæ¡å¨å¥ç¾¤å²",
    	GT: "å±å°é©¬æ",
    	GU: "å³å²",
    	GW: "å åäºæ¯ç»",
    	GY: "å­äºé£",
    	HK: "é¦æ¸¯",
    	HM: "èµ«å¾·å²åéº¦ååçº³ç¾¤å²",
    	HN: "å®é½ææ¯",
    	HR: "åç½å°äº",
    	HT: "æµ·å°",
    	HU: "åçå©",
    	ID: "å°å°¼",
    	IE: "ç±å°å°",
    	IL: "ä»¥è²å",
    	IM: "é©¬æ©å²",
    	IN: "å°åº¦",
    	IO: "è±å±å°åº¦æ´é¢å°",
    	IQ: "ä¼æå",
    	IR: "ä¼æ",
    	IS: "å°å²",
    	IT: "æå¤§å©",
    	JE: "æ³½è¥¿",
    	JM: "çä¹°å ",
    	JO: "çº¦æ¦",
    	JP: "æ¥æ¬",
    	KE: "è¯å°¼äº",
    	KG: "åå°åæ¯æ¯å¦",
    	KH: "æ¬åå¯¨",
    	KI: "åºéå·´æ¯",
    	KM: "ç§æ©ç½",
    	KN: "å£åºè¨åå°¼ç»´æ¯",
    	KP: "æé²",
    	KR: "é©å½",
    	KW: "ç§å¨ç¹",
    	KY: "å¼æ¼ç¾¤å²",
    	KZ: "åè¨åæ¯å¦",
    	LA: "èæ",
    	LB: "é»å·´å«©",
    	LC: "å£å¢è¥¿äº",
    	LI: "åæ¯æ¦æ¯ç»",
    	LK: "æ¯éå°å¡",
    	LR: "å©æ¯éäº",
    	LS: "èµç´¢æ",
    	LT: "ç«é¶å®",
    	LU: "å¢æ£®å ¡",
    	LV: "æè±ç»´äº",
    	LY: "å©æ¯äº",
    	MA: "æ©æ´å¥",
    	MC: "æ©çº³å¥",
    	MD: "æ©å°å¤ç¦",
    	ME: "èç¹åå¥ç½",
    	MF: "æ³å±å£é©¬ä¸",
    	MG: "é©¬è¾¾å æ¯å ",
    	MH: "é©¬ç»å°ç¾¤å²",
    	MK: "é©¬å¶é¡¿",
    	ML: "é©¬é",
    	MM: "ç¼ç¸",
    	MN: "èå¤",
    	MO: "æ¾³é¨",
    	MP: "åé©¬éäºçº³ç¾¤å²",
    	MQ: "é©¬æå°¼å",
    	MR: "æ¯éå¡å°¼äº",
    	MS: "èç¹å¡æç¹",
    	MT: "é©¬å°ä»",
    	MU: "æ¨¡éè¥¿æ¯",
    	MV: "é©¬å°å°å¤«",
    	MW: "é©¬æç»´",
    	MX: "å¢¨è¥¿å¥",
    	MY: "é©¬æ¥è¥¿äº",
    	MZ: "è«æ¡æ¯å",
    	NA: "çº³ç±³æ¯äº",
    	NC: "æ°åéå¤å°¼äº",
    	NE: "å°¼æ¥å°",
    	NF: "è¯ºç¦åå²",
    	NG: "å¥åå©äº",
    	NI: "å°¼å æç",
    	NL: "è·å°",
    	NO: "æªå¨",
    	NP: "å°¼æ³å°",
    	NR: "çé²",
    	NU: "çº½å",
    	NZ: "æ°è¥¿å°",
    	OM: "é¿æ¼",
    	PA: "å·´æ¿é©¬",
    	PE: "ç§é²",
    	PF: "æ³å±ç»éå°¼è¥¿äº",
    	PG: "å·´å¸äºæ°å åäº",
    	PH: "è²å¾å®¾",
    	PK: "å·´åºæ¯å¦",
    	PL: "æ³¢å°",
    	PM: "å£ç®åå°åå¯åé",
    	PN: "ç®ç¹å¯æ©ç¾¤å²",
    	PR: "æ³¢å¤é»å",
    	PS: "å·´åæ¯å¦",
    	PT: "è¡èç",
    	PW: "å¸ç",
    	PY: "å·´æå­",
    	QA: "å¡å¡å°",
    	RE: "çå°¼æ±ª",
    	RO: "ç½é©¬å°¼äº",
    	RS: "å¡å°ç»´äº",
    	RU: "ä¿ç½æ¯",
    	RW: "å¢æºè¾¾",
    	SA: "æ²ä¹å°é¿æä¼¯",
    	SB: "æç½é¨ç¾¤å²",
    	SC: "å¡èå°",
    	SD: "èä¸¹",
    	SE: "çå¸",
    	SG: "æ°å å¡",
    	SH: "å£èµ«åæ¿",
    	SI: "æ¯æ´ç»´å°¼äº",
    	SJ: "æ¯ç¦å°å·´ç¾¤å²åæ¬é©¬å»¶å²",
    	SK: "æ¯æ´ä¼å",
    	SL: "å¡æå©æ",
    	SM: "å£é©¬åè¯º",
    	SN: "å¡åå å°",
    	SO: "ç´¢é©¬å©äº",
    	SR: "èéå",
    	SS: "åèä¸¹",
    	ST: "å£å¤ç¾åæ®æè¥¿æ¯",
    	SV: "è¨å°ç¦å¤",
    	SX: "è·å±å£é©¬ä¸",
    	SY: "åå©äº",
    	SZ: "æ¯å¨å£«å°",
    	TC: "ç¹åæ¯åå¯ç§æ¯ç¾¤å²",
    	TD: "ä¹å¾",
    	TF: "æ³å±åé¨é¢å°",
    	TG: "å¤å¥",
    	TH: "æ³°å½",
    	TJ: "å¡ååæ¯å¦",
    	TK: "æåå³",
    	TL: "ä¸å¸æ±¶",
    	TM: "ååºæ¼æ¯å¦",
    	TN: "çªå°¼è¥¿äº",
    	TO: "æ±¤å ",
    	TR: "åè³å¶",
    	TT: "åéè¾¾åæå·´å¥",
    	TV: "å¾ç¦å¢",
    	TW: "èºæ¹¾",
    	TZ: "å¦æ¡å°¼äº",
    	UA: "ä¹åå°",
    	UG: "ä¹å¹²è¾¾",
    	UM: "ç¾å½æ¬åå¤å°å²å±¿",
    	US: "ç¾å½",
    	UY: "ä¹æå­",
    	UZ: "ä¹å¹å«åæ¯å¦",
    	VA: "æ¢µèå",
    	VC: "å£ææ£®åæ ¼çé£ä¸",
    	VE: "å§åçæ",
    	VG: "è±å±ç»´å°äº¬ç¾¤å²",
    	VI: "ç¾å±ç»´å°äº¬ç¾¤å²",
    	VN: "è¶å",
    	VU: "ç¦åªé¿å¾",
    	WF: "ç¦å©æ¯åå¯å¾çº³",
    	WS: "è¨æ©äº",
    	YE: "å¶é¨",
    	YT: "é©¬çº¦ç¹",
    	ZA: "åé",
    	ZM: "å°æ¯äº",
    	ZW: "è¾å·´å¨",
    	XK: "ç§ç´¢æ²"
    };
    var zh = {
    	locale: locale$J,
    	countries: countries$J
    };

    var zh$1 = /*#__PURE__*/Object.freeze({
        locale: locale$J,
        countries: countries$J,
        default: zh
    });

    var require$$0 = ( ar$1 && ar ) || ar$1;

    var require$$1 = ( az$1 && az ) || az$1;

    var require$$2 = ( be$1 && be ) || be$1;

    var require$$3 = ( bg$1 && bg ) || bg$1;

    var require$$4 = ( bs$1 && bs ) || bs$1;

    var require$$5 = ( ca$1 && ca ) || ca$1;

    var require$$6 = ( cs$1 && cs ) || cs$1;

    var require$$7 = ( da$1 && da ) || da$1;

    var require$$8 = ( de$1 && de ) || de$1;

    var require$$9 = ( el$1 && el ) || el$1;

    var require$$10 = ( en$1 && en ) || en$1;

    var require$$11 = ( es$1 && es ) || es$1;

    var require$$12 = ( et$1 && et ) || et$1;

    var require$$13 = ( fa$1 && fa ) || fa$1;

    var require$$14 = ( fi$1 && fi ) || fi$1;

    var require$$15 = ( fr$1 && fr ) || fr$1;

    var require$$16 = ( he$1 && he ) || he$1;

    var require$$17 = ( hr$1 && hr ) || hr$1;

    var require$$18 = ( hu$1 && hu ) || hu$1;

    var require$$19 = ( hy$1 && hy ) || hy$1;

    var require$$20 = ( id$2 && id$1 ) || id$2;

    var require$$21 = ( it$1 && it ) || it$1;

    var require$$22 = ( ja$1 && ja ) || ja$1;

    var require$$23 = ( ka$1 && ka ) || ka$1;

    var require$$24 = ( kk$1 && kk ) || kk$1;

    var require$$25 = ( ko$1 && ko ) || ko$1;

    var require$$26 = ( ky$1 && ky ) || ky$1;

    var require$$27 = ( lt$1 && lt ) || lt$1;

    var require$$28 = ( lv$1 && lv ) || lv$1;

    var require$$29 = ( mk$1 && mk ) || mk$1;

    var require$$30 = ( mn$1 && mn ) || mn$1;

    var require$$31 = ( nb$1 && nb ) || nb$1;

    var require$$32 = ( nl$1 && nl ) || nl$1;

    var require$$33 = ( nn$1 && nn ) || nn$1;

    var require$$34 = ( pl$1 && pl ) || pl$1;

    var require$$35 = ( pt$1 && pt ) || pt$1;

    var require$$36 = ( ro$1 && ro ) || ro$1;

    var require$$37 = ( ru$1 && ru ) || ru$1;

    var require$$38 = ( sk$1 && sk ) || sk$1;

    var require$$39 = ( sl$1 && sl ) || sl$1;

    var require$$40 = ( sr$1 && sr ) || sr$1;

    var require$$41 = ( sv$1 && sv ) || sv$1;

    var require$$42 = ( tr$1 && tr ) || tr$1;

    var require$$43 = ( uk$1 && uk ) || uk$1;

    var require$$44 = ( uz$1 && uz ) || uz$1;

    var require$$45 = ( zh$1 && zh ) || zh$1;

    var locales = [
      require$$0,
      require$$1,
      require$$2,
      require$$3,
      require$$4,
      require$$5,
      require$$6,
      require$$7,
      require$$8,
      require$$9,
      require$$10,
      require$$11,
      require$$12,
      require$$13,
      require$$14,
      require$$15,
      require$$9,
      require$$16,
      require$$17,
      require$$18,
      require$$19,
      require$$20,
      require$$21,
      require$$22,
      require$$23,
      require$$24,
      require$$25,
      require$$26,
      require$$27,
      require$$28,
      require$$29,
      require$$30,
      require$$31,
      require$$32,
      require$$33,
      require$$34,
      require$$35,
      require$$36,
      require$$37,
      require$$38,
      require$$39,
      require$$40,
      require$$41,
      require$$42,
      require$$43,
      require$$44,
      require$$45
    ];

    for (var i = 0; i < locales.length; i++) {
      i18nIsoCountries.registerLocale(locales[i]);
    }

    var entryNode = i18nIsoCountries;

    // 21.2.5.3 get RegExp.prototype.flags

    var _flags = function () {
      var that = _anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };

    // 21.2.5.3 get RegExp.prototype.flags()
    if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
      configurable: true,
      get: _flags
    });

    var TO_STRING = 'toString';
    var $toString = /./[TO_STRING];

    var define = function (fn) {
      _redefine(RegExp.prototype, TO_STRING, fn, true);
    };

    // 21.2.5.14 RegExp.prototype.toString()
    if (_fails(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
      define(function toString() {
        var R = _anObject(this);
        return '/'.concat(R.source, '/',
          'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
      });
    // FF44- RegExp#toString has a wrong name
    } else if ($toString.name != TO_STRING) {
      define(function toString() {
        return $toString.call(this);
      });
    }

    // fallback for non-array-like ES3 and non-enumerable old V8 strings

    // eslint-disable-next-line no-prototype-builtins
    var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return _cof(it) == 'String' ? it.split('') : Object(it);
    };

    // 7.1.13 ToObject(argument)

    var _toObject = function (it) {
      return Object(_defined(it));
    };

    // 7.2.2 IsArray(argument)

    var _isArray = Array.isArray || function isArray(arg) {
      return _cof(arg) == 'Array';
    };

    var SPECIES = _wks('species');

    var _arraySpeciesConstructor = function (original) {
      var C;
      if (_isArray(original)) {
        C = original.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
        if (_isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      } return C === undefined ? Array : C;
    };

    // 9.4.2.3 ArraySpeciesCreate(originalArray, length)


    var _arraySpeciesCreate = function (original, length) {
      return new (_arraySpeciesConstructor(original))(length);
    };

    // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex





    var _arrayMethods = function (TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || _arraySpeciesCreate;
      return function ($this, callbackfn, that) {
        var O = _toObject($this);
        var self = _iobject(O);
        var f = _ctx(callbackfn, that, 3);
        var length = _toLength(self.length);
        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;
        for (;length > index; index++) if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
          if (TYPE) {
            if (IS_MAP) result[index] = res;   // map
            else if (res) switch (TYPE) {
              case 3: return true;             // some
              case 5: return val;              // find
              case 6: return index;            // findIndex
              case 2: result.push(val);        // filter
            } else if (IS_EVERY) return false; // every
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };

    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = _wks('unscopables');
    var ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
    var _addToUnscopables = function (key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };

    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

    var $find = _arrayMethods(5);
    var KEY = 'find';
    var forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function () { forced = false; });
    _export(_export.P + _export.F * forced, 'Array', {
      find: function find(callbackfn /* , that = undefined */) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    _addToUnscopables(KEY);

    var AfdControl = function AfdControl($el, options) {
      var _this = this;

      classCallCheck(this, AfdControl);

      defineProperty(this, "setupParams", function (requestOptions) {
        var defaultData = {
          format: 'json'
        };

        if (_this.options.serial && _this.options.password) {
          defaultData.serial = _this.options.serial;
          defaultData.password = _this.options.password;
        } else if (_this.options.token && _this.options.id) {
          defaultData.token = _this.options.token;
          defaultData.id = _this.options.id;
        } else {
          throw 'You must either supply password and serial, or token and id';
        } // reverseGeocode should not have a country ISO set


        if (_this.controlType !== 'reverseGeocode') {
          // check to see if default country
          if (_this.options.defaultCountry) {
            defaultData.countryiso = _this.options.defaultCountry;
          }

          if (_this.options.country.defaultCountry) {
            defaultData.countryiso = _this.options.country.defaultCountry;
          } // Check to see if there is a country control, if so WA will be activated


          var $countryField = $('[data-afd-control="country"]');

          if ($countryField.length > 0) {
            defaultData.countryiso = $countryField.val();
          } // checks to see if there is a custom country control and whether or not a function is supplied to turn the value into ISO3


          if (_this.options.country.customCountryControl) {
            var customCountryControl = _this.options.typeahead.containers.length === 0 ? $(_this.options.country.customCountryControl) : _this.$element.closest(_this.options.typeahead.containers.toString).find(_this.options.country.customCountryControl);

            if (_this.options.country.customCountryConverter) {
              if (typeof _this.options.country.customCountryConverter !== 'function') {
                throw 'customCountryConverter Must be a function';
              }

              defaultData.countryiso = _this.options.country.customCountryConverter(customCountryControl.val());
            } else {
              defaultData.countryiso = customCountryControl.val();
            }
          }
        }

        try {
          return {
            method: 'GET',
            url: _this.options.pceUrl,
            error: function error(err, errText, errThrown) {
              console.log(err);
              console.log(errText);
              console.log(errThrown);
              $(document).trigger('afd:pceError', err);
            },
            data: $.extend(true, {}, defaultData, requestOptions),
            // callback and beforesend are only applicable when the request sequence module is used
            callback: typeof _this.requestCallback !== 'undefined' ? {
              done: _this.requestCallback
            } : null,
            beforeSend: typeof _this.beforeSend !== 'undefined' ? _this.beforeSend : null
          };
        } catch (err) {
          console.error('Error setting up request');
          console.error(err);
        }
      });

      defineProperty(this, "eventHandler", function ($element, event, handler) {
        $element.off(event + '.afd').on(event + '.afd', handler);
      });

      this.$element = $el;
      this.element = $el.get()[0];

      if (typeof $el.data('afd-additional-options') !== 'undefined') {
        var customOptions = window[$el.data('afd-additional-options')];
        this.options = $.extend(true, {}, options, customOptions);
      } else {
        this.options = options;
      }
    };

    var afdValidationMixin = function afdValidationMixin(Base) {
      var _temp;

      return _temp =
      /*#__PURE__*/
      function (_Base) {
        inherits(_temp, _Base);

        function _temp() {
          var _getPrototypeOf2;

          var _this;

          classCallCheck(this, _temp);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(_temp)).call.apply(_getPrototypeOf2, [this].concat(args)));

          defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleInvalid", function (message) {
            var $el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var element = $el ? $el[0] : _this.$element[0];
            var $element = $el ? $el : _this.$element;
            element.setCustomValidity(message); // If user wants to use browser native validation messages then report the failure now

            if (_this.options.nativeValidationMessages === true) {
              element.reportValidity();
            } // Add afd Invalid class


            $element.removeClass('afd-valid').addClass('afd-invalid'); // Bootstrap 3 Validation

            $element.parent('.form-group').addClass('has-error').removeClass('has-success'); // Bootstrap 4 Validation

            $element.parent().addClass('was-validated');
            $element.siblings('.invalid-feedback').first().html(element.validationMessage); // trigger validation complete event

            $$1(document).trigger('afd:validateComplete', {
              valid: false,
              validationMessage: message
            });
          });

          defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleValid", function () {
            var $el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var element = $el ? $el[0] : _this.$element[0];
            var $element = $el ? $el : _this.$element;
            element.setCustomValidity(''); //Add afd Valid class

            $element.addClass('afd-valid').removeClass('afd-invalid'); // Bootstrap 3 Validation

            $element.parent('.form-group').removeClass('has-error').addClass('has-success'); // Bootstrap 4 Validation

            $element.parent().addClass('was-validated');
            $element.siblings('.invalid-feedback').first().html(element.validationMessage); // trigger validation complete event

            $$1(document).trigger('afd:validateComplete', {
              valid: true,
              validationMessage: null
            });
          });

          defineProperty(assertThisInitialized(assertThisInitialized(_this)), "clearValidation", function () {
            var $el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var element = $el ? $el[0] : _this.$element[0];
            var $element = $el ? $el : _this.$element;
            element.setCustomValidity('');
            $element.parent('.form-group').removeClass('has-error').removeClass('has-success'); // Add afd Invalid class

            $element.removeClass('afd-valid').removeClass('afd-invalid'); // Bootstrap 4 Validation

            $element.parent().removeClass('was-validated');
          });

          defineProperty(assertThisInitialized(assertThisInitialized(_this)), "showLoadingSpinner", function ($element, parentSelector) {
            if (parentSelector) {
              $element.closest(parentSelector).addClass('afd-loading');
            }
          });

          defineProperty(assertThisInitialized(assertThisInitialized(_this)), "hideLoadingSpinner", function ($element, parentSelector) {
            if (parentSelector) {
              $element.closest(parentSelector).removeClass('afd-loading');
            }
          });

          return _this;
        }

        return _temp;
      }(Base), _temp;
    };

    var intlTelInput = createCommonjsModule(function (module) {
    /*
     * International Telephone Input v17.0.0
     * https://github.com/jackocnr/intl-tel-input.git
     * Licensed under the MIT license
     */

    // wrap in UMD
    (function(factory) {
        if (module.exports) module.exports = factory(); else window.intlTelInput = factory();
    })(function(undefined) {
        return function() {
            // Array of country objects for the flag dropdown.
            // Here is the criteria for the plugin to support a given country/territory
            // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
            // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes
            // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png
            // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml
            // Each country array has the following information:
            // [
            //    Country name,
            //    iso2 code,
            //    International dial code,
            //    Order (if >1 country with same dial code),
            //    Area codes
            // ]
            var allCountries = [ [ "Afghanistan (â«Ø§ÙØºØ§ÙØ³ØªØ§Ùâ¬â)", "af", "93" ], [ "Albania (ShqipÃ«ri)", "al", "355" ], [ "Algeria (â«Ø§ÙØ¬Ø²Ø§Ø¦Ø±â¬â)", "dz", "213" ], [ "American Samoa", "as", "1", 5, [ "684" ] ], [ "Andorra", "ad", "376" ], [ "Angola", "ao", "244" ], [ "Anguilla", "ai", "1", 6, [ "264" ] ], [ "Antigua and Barbuda", "ag", "1", 7, [ "268" ] ], [ "Argentina", "ar", "54" ], [ "Armenia (ÕÕ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶)", "am", "374" ], [ "Aruba", "aw", "297" ], [ "Australia", "au", "61", 0 ], [ "Austria (Ãsterreich)", "at", "43" ], [ "Azerbaijan (AzÉrbaycan)", "az", "994" ], [ "Bahamas", "bs", "1", 8, [ "242" ] ], [ "Bahrain (â«Ø§ÙØ¨Ø­Ø±ÙÙâ¬â)", "bh", "973" ], [ "Bangladesh (à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶)", "bd", "880" ], [ "Barbados", "bb", "1", 9, [ "246" ] ], [ "Belarus (ÐÐµÐ»Ð°ÑÑÑÑ)", "by", "375" ], [ "Belgium (BelgiÃ«)", "be", "32" ], [ "Belize", "bz", "501" ], [ "Benin (BÃ©nin)", "bj", "229" ], [ "Bermuda", "bm", "1", 10, [ "441" ] ], [ "Bhutan (à½ à½à¾²à½´à½)", "bt", "975" ], [ "Bolivia", "bo", "591" ], [ "Bosnia and Herzegovina (ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°)", "ba", "387" ], [ "Botswana", "bw", "267" ], [ "Brazil (Brasil)", "br", "55" ], [ "British Indian Ocean Territory", "io", "246" ], [ "British Virgin Islands", "vg", "1", 11, [ "284" ] ], [ "Brunei", "bn", "673" ], [ "Bulgaria (ÐÑÐ»Ð³Ð°ÑÐ¸Ñ)", "bg", "359" ], [ "Burkina Faso", "bf", "226" ], [ "Burundi (Uburundi)", "bi", "257" ], [ "Cambodia (ááááá»áá¶)", "kh", "855" ], [ "Cameroon (Cameroun)", "cm", "237" ], [ "Canada", "ca", "1", 1, [ "204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905" ] ], [ "Cape Verde (Kabu Verdi)", "cv", "238" ], [ "Caribbean Netherlands", "bq", "599", 1, [ "3", "4", "7" ] ], [ "Cayman Islands", "ky", "1", 12, [ "345" ] ], [ "Central African Republic (RÃ©publique centrafricaine)", "cf", "236" ], [ "Chad (Tchad)", "td", "235" ], [ "Chile", "cl", "56" ], [ "China (ä¸­å½)", "cn", "86" ], [ "Christmas Island", "cx", "61", 2 ], [ "Cocos (Keeling) Islands", "cc", "61", 1 ], [ "Colombia", "co", "57" ], [ "Comoros (â«Ø¬Ø²Ø± Ø§ÙÙÙØ±â¬â)", "km", "269" ], [ "Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243" ], [ "Congo (Republic) (Congo-Brazzaville)", "cg", "242" ], [ "Cook Islands", "ck", "682" ], [ "Costa Rica", "cr", "506" ], [ "CÃ´te dâIvoire", "ci", "225" ], [ "Croatia (Hrvatska)", "hr", "385" ], [ "Cuba", "cu", "53" ], [ "CuraÃ§ao", "cw", "599", 0 ], [ "Cyprus (ÎÏÏÏÎ¿Ï)", "cy", "357" ], [ "Czech Republic (ÄeskÃ¡ republika)", "cz", "420" ], [ "Denmark (Danmark)", "dk", "45" ], [ "Djibouti", "dj", "253" ], [ "Dominica", "dm", "1", 13, [ "767" ] ], [ "Dominican Republic (RepÃºblica Dominicana)", "do", "1", 2, [ "809", "829", "849" ] ], [ "Ecuador", "ec", "593" ], [ "Egypt (â«ÙØµØ±â¬â)", "eg", "20" ], [ "El Salvador", "sv", "503" ], [ "Equatorial Guinea (Guinea Ecuatorial)", "gq", "240" ], [ "Eritrea", "er", "291" ], [ "Estonia (Eesti)", "ee", "372" ], [ "Ethiopia", "et", "251" ], [ "Falkland Islands (Islas Malvinas)", "fk", "500" ], [ "Faroe Islands (FÃ¸royar)", "fo", "298" ], [ "Fiji", "fj", "679" ], [ "Finland (Suomi)", "fi", "358", 0 ], [ "France", "fr", "33" ], [ "French Guiana (Guyane franÃ§aise)", "gf", "594" ], [ "French Polynesia (PolynÃ©sie franÃ§aise)", "pf", "689" ], [ "Gabon", "ga", "241" ], [ "Gambia", "gm", "220" ], [ "Georgia (á¡áá¥áá ááááá)", "ge", "995" ], [ "Germany (Deutschland)", "de", "49" ], [ "Ghana (Gaana)", "gh", "233" ], [ "Gibraltar", "gi", "350" ], [ "Greece (ÎÎ»Î»Î¬Î´Î±)", "gr", "30" ], [ "Greenland (Kalaallit Nunaat)", "gl", "299" ], [ "Grenada", "gd", "1", 14, [ "473" ] ], [ "Guadeloupe", "gp", "590", 0 ], [ "Guam", "gu", "1", 15, [ "671" ] ], [ "Guatemala", "gt", "502" ], [ "Guernsey", "gg", "44", 1, [ "1481", "7781", "7839", "7911" ] ], [ "Guinea (GuinÃ©e)", "gn", "224" ], [ "Guinea-Bissau (GuinÃ© Bissau)", "gw", "245" ], [ "Guyana", "gy", "592" ], [ "Haiti", "ht", "509" ], [ "Honduras", "hn", "504" ], [ "Hong Kong (é¦æ¸¯)", "hk", "852" ], [ "Hungary (MagyarorszÃ¡g)", "hu", "36" ], [ "Iceland (Ãsland)", "is", "354" ], [ "India (à¤­à¤¾à¤°à¤¤)", "in", "91" ], [ "Indonesia", "id", "62" ], [ "Iran (â«Ø§ÛØ±Ø§Ùâ¬â)", "ir", "98" ], [ "Iraq (â«Ø§ÙØ¹Ø±Ø§Ùâ¬â)", "iq", "964" ], [ "Ireland", "ie", "353" ], [ "Isle of Man", "im", "44", 2, [ "1624", "74576", "7524", "7924", "7624" ] ], [ "Israel (â«××©×¨××â¬â)", "il", "972" ], [ "Italy (Italia)", "it", "39", 0 ], [ "Jamaica", "jm", "1", 4, [ "876", "658" ] ], [ "Japan (æ¥æ¬)", "jp", "81" ], [ "Jersey", "je", "44", 3, [ "1534", "7509", "7700", "7797", "7829", "7937" ] ], [ "Jordan (â«Ø§ÙØ£Ø±Ø¯Ùâ¬â)", "jo", "962" ], [ "Kazakhstan (ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½)", "kz", "7", 1, [ "33", "7" ] ], [ "Kenya", "ke", "254" ], [ "Kiribati", "ki", "686" ], [ "Kosovo", "xk", "383" ], [ "Kuwait (â«Ø§ÙÙÙÙØªâ¬â)", "kw", "965" ], [ "Kyrgyzstan (ÐÑÑÐ³ÑÐ·ÑÑÐ°Ð½)", "kg", "996" ], [ "Laos (àº¥àº²àº§)", "la", "856" ], [ "Latvia (Latvija)", "lv", "371" ], [ "Lebanon (â«ÙØ¨ÙØ§Ùâ¬â)", "lb", "961" ], [ "Lesotho", "ls", "266" ], [ "Liberia", "lr", "231" ], [ "Libya (â«ÙÙØ¨ÙØ§â¬â)", "ly", "218" ], [ "Liechtenstein", "li", "423" ], [ "Lithuania (Lietuva)", "lt", "370" ], [ "Luxembourg", "lu", "352" ], [ "Macau (æ¾³é)", "mo", "853" ], [ "Macedonia (FYROM) (ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°)", "mk", "389" ], [ "Madagascar (Madagasikara)", "mg", "261" ], [ "Malawi", "mw", "265" ], [ "Malaysia", "my", "60" ], [ "Maldives", "mv", "960" ], [ "Mali", "ml", "223" ], [ "Malta", "mt", "356" ], [ "Marshall Islands", "mh", "692" ], [ "Martinique", "mq", "596" ], [ "Mauritania (â«ÙÙØ±ÙØªØ§ÙÙØ§â¬â)", "mr", "222" ], [ "Mauritius (Moris)", "mu", "230" ], [ "Mayotte", "yt", "262", 1, [ "269", "639" ] ], [ "Mexico (MÃ©xico)", "mx", "52" ], [ "Micronesia", "fm", "691" ], [ "Moldova (Republica Moldova)", "md", "373" ], [ "Monaco", "mc", "377" ], [ "Mongolia (ÐÐ¾Ð½Ð³Ð¾Ð»)", "mn", "976" ], [ "Montenegro (Crna Gora)", "me", "382" ], [ "Montserrat", "ms", "1", 16, [ "664" ] ], [ "Morocco (â«Ø§ÙÙØºØ±Ø¨â¬â)", "ma", "212", 0 ], [ "Mozambique (MoÃ§ambique)", "mz", "258" ], [ "Myanmar (Burma) (áá¼ááºáá¬)", "mm", "95" ], [ "Namibia (NamibiÃ«)", "na", "264" ], [ "Nauru", "nr", "674" ], [ "Nepal (à¤¨à¥à¤ªà¤¾à¤²)", "np", "977" ], [ "Netherlands (Nederland)", "nl", "31" ], [ "New Caledonia (Nouvelle-CalÃ©donie)", "nc", "687" ], [ "New Zealand", "nz", "64" ], [ "Nicaragua", "ni", "505" ], [ "Niger (Nijar)", "ne", "227" ], [ "Nigeria", "ng", "234" ], [ "Niue", "nu", "683" ], [ "Norfolk Island", "nf", "672" ], [ "North Korea (ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­)", "kp", "850" ], [ "Northern Mariana Islands", "mp", "1", 17, [ "670" ] ], [ "Norway (Norge)", "no", "47", 0 ], [ "Oman (â«Ø¹ÙÙØ§Ùâ¬â)", "om", "968" ], [ "Pakistan (â«Ù¾Ø§Ú©Ø³ØªØ§Ùâ¬â)", "pk", "92" ], [ "Palau", "pw", "680" ], [ "Palestine (â«ÙÙØ³Ø·ÙÙâ¬â)", "ps", "970" ], [ "Panama (PanamÃ¡)", "pa", "507" ], [ "Papua New Guinea", "pg", "675" ], [ "Paraguay", "py", "595" ], [ "Peru (PerÃº)", "pe", "51" ], [ "Philippines", "ph", "63" ], [ "Poland (Polska)", "pl", "48" ], [ "Portugal", "pt", "351" ], [ "Puerto Rico", "pr", "1", 3, [ "787", "939" ] ], [ "Qatar (â«ÙØ·Ø±â¬â)", "qa", "974" ], [ "RÃ©union (La RÃ©union)", "re", "262", 0 ], [ "Romania (RomÃ¢nia)", "ro", "40" ], [ "Russia (Ð Ð¾ÑÑÐ¸Ñ)", "ru", "7", 0 ], [ "Rwanda", "rw", "250" ], [ "Saint BarthÃ©lemy", "bl", "590", 1 ], [ "Saint Helena", "sh", "290" ], [ "Saint Kitts and Nevis", "kn", "1", 18, [ "869" ] ], [ "Saint Lucia", "lc", "1", 19, [ "758" ] ], [ "Saint Martin (Saint-Martin (partie franÃ§aise))", "mf", "590", 2 ], [ "Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508" ], [ "Saint Vincent and the Grenadines", "vc", "1", 20, [ "784" ] ], [ "Samoa", "ws", "685" ], [ "San Marino", "sm", "378" ], [ "SÃ£o TomÃ© and PrÃ­ncipe (SÃ£o TomÃ© e PrÃ­ncipe)", "st", "239" ], [ "Saudi Arabia (â«Ø§ÙÙÙÙÙØ© Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙØ³Ø¹ÙØ¯ÙØ©â¬â)", "sa", "966" ], [ "Senegal (SÃ©nÃ©gal)", "sn", "221" ], [ "Serbia (Ð¡ÑÐ±Ð¸ÑÐ°)", "rs", "381" ], [ "Seychelles", "sc", "248" ], [ "Sierra Leone", "sl", "232" ], [ "Singapore", "sg", "65" ], [ "Sint Maarten", "sx", "1", 21, [ "721" ] ], [ "Slovakia (Slovensko)", "sk", "421" ], [ "Slovenia (Slovenija)", "si", "386" ], [ "Solomon Islands", "sb", "677" ], [ "Somalia (Soomaaliya)", "so", "252" ], [ "South Africa", "za", "27" ], [ "South Korea (ëíë¯¼êµ­)", "kr", "82" ], [ "South Sudan (â«Ø¬ÙÙØ¨ Ø§ÙØ³ÙØ¯Ø§Ùâ¬â)", "ss", "211" ], [ "Spain (EspaÃ±a)", "es", "34" ], [ "Sri Lanka (à·à·âà¶»à· à¶½à¶à¶à·à·)", "lk", "94" ], [ "Sudan (â«Ø§ÙØ³ÙØ¯Ø§Ùâ¬â)", "sd", "249" ], [ "Suriname", "sr", "597" ], [ "Svalbard and Jan Mayen", "sj", "47", 1, [ "79" ] ], [ "Swaziland", "sz", "268" ], [ "Sweden (Sverige)", "se", "46" ], [ "Switzerland (Schweiz)", "ch", "41" ], [ "Syria (â«Ø³ÙØ±ÙØ§â¬â)", "sy", "963" ], [ "Taiwan (å°ç£)", "tw", "886" ], [ "Tajikistan", "tj", "992" ], [ "Tanzania", "tz", "255" ], [ "Thailand (à¹à¸à¸¢)", "th", "66" ], [ "Timor-Leste", "tl", "670" ], [ "Togo", "tg", "228" ], [ "Tokelau", "tk", "690" ], [ "Tonga", "to", "676" ], [ "Trinidad and Tobago", "tt", "1", 22, [ "868" ] ], [ "Tunisia (â«ØªÙÙØ³â¬â)", "tn", "216" ], [ "Turkey (TÃ¼rkiye)", "tr", "90" ], [ "Turkmenistan", "tm", "993" ], [ "Turks and Caicos Islands", "tc", "1", 23, [ "649" ] ], [ "Tuvalu", "tv", "688" ], [ "U.S. Virgin Islands", "vi", "1", 24, [ "340" ] ], [ "Uganda", "ug", "256" ], [ "Ukraine (Ð£ÐºÑÐ°ÑÐ½Ð°)", "ua", "380" ], [ "United Arab Emirates (â«Ø§ÙØ¥ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©â¬â)", "ae", "971" ], [ "United Kingdom", "gb", "44", 0 ], [ "United States", "us", "1", 0 ], [ "Uruguay", "uy", "598" ], [ "Uzbekistan (OÊ»zbekiston)", "uz", "998" ], [ "Vanuatu", "vu", "678" ], [ "Vatican City (CittÃ  del Vaticano)", "va", "39", 1, [ "06698" ] ], [ "Venezuela", "ve", "58" ], [ "Vietnam (Viá»t Nam)", "vn", "84" ], [ "Wallis and Futuna (Wallis-et-Futuna)", "wf", "681" ], [ "Western Sahara (â«Ø§ÙØµØ­Ø±Ø§Ø¡ Ø§ÙØºØ±Ø¨ÙØ©â¬â)", "eh", "212", 1, [ "5288", "5289" ] ], [ "Yemen (â«Ø§ÙÙÙÙâ¬â)", "ye", "967" ], [ "Zambia", "zm", "260" ], [ "Zimbabwe", "zw", "263" ], [ "Ãland Islands", "ax", "358", 1, [ "18" ] ] ];
            // loop over all of the countries above, restructuring the data to be objects with named keys
            for (var i = 0; i < allCountries.length; i++) {
                var c = allCountries[i];
                allCountries[i] = {
                    name: c[0],
                    iso2: c[1],
                    dialCode: c[2],
                    priority: c[3] || 0,
                    areaCodes: c[4] || null
                };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var intlTelInputGlobals = {
                getInstance: function getInstance(input) {
                    var id = input.getAttribute("data-intl-tel-input-id");
                    return window.intlTelInputGlobals.instances[id];
                },
                instances: {}
            };
            if (typeof window === "object") window.intlTelInputGlobals = intlTelInputGlobals;
            // these vars persist through all instances of the plugin
            var id = 0;
            var defaults = {
                // whether or not to allow the dropdown
                allowDropdown: true,
                // if there is just a dial code in the input: remove it on blur
                autoHideDialCode: true,
                // add a placeholder in the input with an example number for the selected country
                autoPlaceholder: "polite",
                // modify the parentClass
                customContainer: "",
                // modify the auto placeholder
                customPlaceholder: null,
                // append menu to specified element
                dropdownContainer: null,
                // don't display these countries
                excludeCountries: [],
                // format the input value during initialisation and on setNumber
                formatOnDisplay: true,
                // geoIp lookup function
                geoIpLookup: null,
                // inject a hidden input with this name, and on submit, populate it with the result of getNumber
                hiddenInput: "",
                // initial country
                initialCountry: "",
                // localized country names e.g. { 'de': 'Deutschland' }
                localizedCountries: null,
                // don't insert international dial codes
                nationalMode: true,
                // display only these countries
                onlyCountries: [],
                // number type to use for placeholders
                placeholderNumberType: "MOBILE",
                // the countries at the top of the list. defaults to united states and united kingdom
                preferredCountries: [ "us", "gb" ],
                // display the country dial code next to the selected flag so it's not part of the typed number
                separateDialCode: false,
                // specify the path to the libphonenumber script to enable validation/formatting
                utilsScript: ""
            };
            // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes
            var regionlessNanpNumbers = [ "800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889" ];
            if (typeof window === "object") {
                // keep track of if the window.load event has fired as impossible to check after the fact
                window.addEventListener("load", function() {
                    // UPDATE: use a public static field so we can fudge it in the tests
                    window.intlTelInputGlobals.windowLoaded = true;
                });
            }
            // utility function to iterate over an object. can't use Object.entries or native forEach because
            // of IE11
            var forEachProp = function forEachProp(obj, callback) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length; i++) {
                    callback(keys[i], obj[keys[i]]);
                }
            };
            // run a method on each instance of the plugin
            var forEachInstance = function forEachInstance(method) {
                forEachProp(window.intlTelInputGlobals.instances, function(key) {
                    window.intlTelInputGlobals.instances[key][method]();
                });
            };
            // this is our plugin class that we will create an instance of
            // eslint-disable-next-line no-unused-vars
            var Iti = /*#__PURE__*/
            function() {
                function Iti(input, options) {
                    var _this = this;
                    _classCallCheck(this, Iti);
                    this.id = id++;
                    this.telInput = input;
                    this.activeItem = null;
                    this.highlightedItem = null;
                    // process specified options / defaults
                    // alternative to Object.assign, which isn't supported by IE11
                    var customOptions = options || {};
                    this.options = {};
                    forEachProp(defaults, function(key, value) {
                        _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;
                    });
                    this.hadInitialPlaceholder = Boolean(input.getAttribute("placeholder"));
                }
                _createClass(Iti, [ {
                    key: "_init",
                    value: function _init() {
                        var _this2 = this;
                        // if in nationalMode, disable options relating to dial codes
                        if (this.options.nationalMode) this.options.autoHideDialCode = false;
                        // if separateDialCode then doesn't make sense to A) insert dial code into input
                        // (autoHideDialCode), and B) display national numbers (because we're displaying the country
                        // dial code next to them)
                        if (this.options.separateDialCode) {
                            this.options.autoHideDialCode = this.options.nationalMode = false;
                        }
                        // we cannot just test screen size as some smartphones/website meta tags will report desktop
                        // resolutions
                        // Note: for some reason jasmine breaks if you put this in the main Plugin function with the
                        // rest of these declarations
                        // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'
                        this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                        if (this.isMobile) {
                            // trigger the mobile dropdown css
                            document.body.classList.add("iti-mobile");
                            // on mobile, we want a full screen dropdown, so we must append it to the body
                            if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;
                        }
                        // these promises get resolved when their individual requests complete
                        // this way the dev can do something like iti.promise.then(...) to know when all requests are
                        // complete
                        if (typeof Promise !== "undefined") {
                            var autoCountryPromise = new Promise(function(resolve, reject) {
                                _this2.resolveAutoCountryPromise = resolve;
                                _this2.rejectAutoCountryPromise = reject;
                            });
                            var utilsScriptPromise = new Promise(function(resolve, reject) {
                                _this2.resolveUtilsScriptPromise = resolve;
                                _this2.rejectUtilsScriptPromise = reject;
                            });
                            this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);
                        } else {
                            // prevent errors when Promise doesn't exist
                            this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};
                            this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};
                        }
                        // in various situations there could be no country selected initially, but we need to be able
                        // to assume this variable exists
                        this.selectedCountryData = {};
                        // process all the data: onlyCountries, excludeCountries, preferredCountries etc
                        this._processCountryData();
                        // generate the markup
                        this._generateMarkup();
                        // set the initial state of the input value and the selected flag
                        this._setInitialState();
                        // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click
                        this._initListeners();
                        // utils script, and auto country
                        this._initRequests();
                    }
                }, {
                    key: "_processCountryData",
                    value: function _processCountryData() {
                        // process onlyCountries or excludeCountries array if present
                        this._processAllCountries();
                        // process the countryCodes map
                        this._processCountryCodes();
                        // process the preferredCountries
                        this._processPreferredCountries();
                        // translate countries according to localizedCountries option
                        if (this.options.localizedCountries) this._translateCountriesByLocale();
                        // sort countries by name
                        if (this.options.onlyCountries.length || this.options.localizedCountries) {
                            this.countries.sort(this._countryNameSort);
                        }
                    }
                }, {
                    key: "_addCountryCode",
                    value: function _addCountryCode(iso2, dialCode, priority) {
                        if (dialCode.length > this.dialCodeMaxLen) {
                            this.dialCodeMaxLen = dialCode.length;
                        }
                        if (!this.countryCodes.hasOwnProperty(dialCode)) {
                            this.countryCodes[dialCode] = [];
                        }
                        // bail if we already have this country for this dialCode
                        for (var i = 0; i < this.countryCodes[dialCode].length; i++) {
                            if (this.countryCodes[dialCode][i] === iso2) return;
                        }
                        // check for undefined as 0 is falsy
                        var index = priority !== undefined ? priority : this.countryCodes[dialCode].length;
                        this.countryCodes[dialCode][index] = iso2;
                    }
                }, {
                    key: "_processAllCountries",
                    value: function _processAllCountries() {
                        if (this.options.onlyCountries.length) {
                            var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {
                                return country.toLowerCase();
                            });
                            this.countries = allCountries.filter(function(country) {
                                return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;
                            });
                        } else if (this.options.excludeCountries.length) {
                            var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {
                                return country.toLowerCase();
                            });
                            this.countries = allCountries.filter(function(country) {
                                return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;
                            });
                        } else {
                            this.countries = allCountries;
                        }
                    }
                }, {
                    key: "_translateCountriesByLocale",
                    value: function _translateCountriesByLocale() {
                        for (var i = 0; i < this.countries.length; i++) {
                            var iso = this.countries[i].iso2.toLowerCase();
                            if (this.options.localizedCountries.hasOwnProperty(iso)) {
                                this.countries[i].name = this.options.localizedCountries[iso];
                            }
                        }
                    }
                }, {
                    key: "_countryNameSort",
                    value: function _countryNameSort(a, b) {
                        return a.name.localeCompare(b.name);
                    }
                }, {
                    key: "_processCountryCodes",
                    value: function _processCountryCodes() {
                        this.dialCodeMaxLen = 0;
                        this.countryCodes = {};
                        // first: add dial codes
                        for (var i = 0; i < this.countries.length; i++) {
                            var c = this.countries[i];
                            this._addCountryCode(c.iso2, c.dialCode, c.priority);
                        }
                        // next: add area codes
                        // this is a second loop over countries, to make sure we have all of the "root" countries
                        // already in the map, so that we can access them, as each time we add an area code substring
                        // to the map, we also need to include the "root" country's code, as that also matches
                        for (var _i = 0; _i < this.countries.length; _i++) {
                            var _c = this.countries[_i];
                            // area codes
                            if (_c.areaCodes) {
                                var rootCountryCode = this.countryCodes[_c.dialCode][0];
                                // for each area code
                                for (var j = 0; j < _c.areaCodes.length; j++) {
                                    var areaCode = _c.areaCodes[j];
                                    // for each digit in the area code to add all partial matches as well
                                    for (var k = 1; k < areaCode.length; k++) {
                                        var partialDialCode = _c.dialCode + areaCode.substr(0, k);
                                        // start with the root country, as that also matches this dial code
                                        this._addCountryCode(rootCountryCode, partialDialCode);
                                        this._addCountryCode(_c.iso2, partialDialCode);
                                    }
                                    // add the full area code
                                    this._addCountryCode(_c.iso2, _c.dialCode + areaCode);
                                }
                            }
                        }
                    }
                }, {
                    key: "_processPreferredCountries",
                    value: function _processPreferredCountries() {
                        this.preferredCountries = [];
                        for (var i = 0; i < this.options.preferredCountries.length; i++) {
                            var countryCode = this.options.preferredCountries[i].toLowerCase();
                            var countryData = this._getCountryData(countryCode, false, true);
                            if (countryData) this.preferredCountries.push(countryData);
                        }
                    }
                }, {
                    key: "_createEl",
                    value: function _createEl(name, attrs, container) {
                        var el = document.createElement(name);
                        if (attrs) forEachProp(attrs, function(key, value) {
                            return el.setAttribute(key, value);
                        });
                        if (container) container.appendChild(el);
                        return el;
                    }
                }, {
                    key: "_generateMarkup",
                    value: function _generateMarkup() {
                        // if autocomplete does not exist on the element and its form, then
                        // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can
                        // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the
                        // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)
                        if (!this.telInput.hasAttribute("autocomplete") && !(this.telInput.form && this.telInput.form.hasAttribute("autocomplete"))) {
                            this.telInput.setAttribute("autocomplete", "off");
                        }
                        // containers (mostly for positioning)
                        var parentClass = "iti";
                        if (this.options.allowDropdown) parentClass += " iti--allow-dropdown";
                        if (this.options.separateDialCode) parentClass += " iti--separate-dial-code";
                        if (this.options.customContainer) {
                            parentClass += " ";
                            parentClass += this.options.customContainer;
                        }
                        var wrapper = this._createEl("div", {
                            "class": parentClass
                        });
                        this.telInput.parentNode.insertBefore(wrapper, this.telInput);
                        this.flagsContainer = this._createEl("div", {
                            "class": "iti__flag-container"
                        }, wrapper);
                        wrapper.appendChild(this.telInput);
                        // selected flag (displayed to left of input)
                        this.selectedFlag = this._createEl("div", {
                            "class": "iti__selected-flag",
                            role: "combobox",
                            "aria-owns": "iti-".concat(this.id, "__country-listbox"),
                            "aria-expanded": "false"
                        }, this.flagsContainer);
                        this.selectedFlagInner = this._createEl("div", {
                            "class": "iti__flag"
                        }, this.selectedFlag);
                        if (this.options.separateDialCode) {
                            this.selectedDialCode = this._createEl("div", {
                                "class": "iti__selected-dial-code"
                            }, this.selectedFlag);
                        }
                        if (this.options.allowDropdown) {
                            // make element focusable and tab navigable
                            this.selectedFlag.setAttribute("tabindex", "0");
                            this.dropdownArrow = this._createEl("div", {
                                "class": "iti__arrow"
                            }, this.selectedFlag);
                            // country dropdown: preferred countries, then divider, then all countries
                            this.countryList = this._createEl("ul", {
                                "class": "iti__country-list iti__hide",
                                id: "iti-".concat(this.id, "__country-listbox"),
                                role: "listbox"
                            });
                            if (this.preferredCountries.length) {
                                this._appendListItems(this.preferredCountries, "iti__preferred", true);
                                this._createEl("li", {
                                    "class": "iti__divider",
                                    role: "separator",
                                    "aria-disabled": "true"
                                }, this.countryList);
                            }
                            this._appendListItems(this.countries, "iti__standard");
                            // create dropdownContainer markup
                            if (this.options.dropdownContainer) {
                                this.dropdown = this._createEl("div", {
                                    "class": "iti iti--container"
                                });
                                this.dropdown.appendChild(this.countryList);
                            } else {
                                this.flagsContainer.appendChild(this.countryList);
                            }
                        }
                        if (this.options.hiddenInput) {
                            var hiddenInputName = this.options.hiddenInput;
                            var name = this.telInput.getAttribute("name");
                            if (name) {
                                var i = name.lastIndexOf("[");
                                // if input name contains square brackets, then give the hidden input the same name,
                                // replacing the contents of the last set of brackets with the given hiddenInput name
                                if (i !== -1) hiddenInputName = "".concat(name.substr(0, i), "[").concat(hiddenInputName, "]");
                            }
                            this.hiddenInput = this._createEl("input", {
                                type: "hidden",
                                name: hiddenInputName
                            });
                            wrapper.appendChild(this.hiddenInput);
                        }
                    }
                }, {
                    key: "_appendListItems",
                    value: function _appendListItems(countries, className, preferred) {
                        // we create so many DOM elements, it is faster to build a temp string
                        // and then add everything to the DOM in one go at the end
                        var tmp = "";
                        // for each country
                        for (var i = 0; i < countries.length; i++) {
                            var c = countries[i];
                            var idSuffix = preferred ? "-preferred" : "";
                            // open the list item
                            tmp += "<li class='iti__country ".concat(className, "' tabIndex='-1' id='iti-").concat(this.id, "__item-").concat(c.iso2).concat(idSuffix, "' role='option' data-dial-code='").concat(c.dialCode, "' data-country-code='").concat(c.iso2, "'>");
                            // add the flag
                            tmp += "<div class='iti__flag-box'><div class='iti__flag iti__".concat(c.iso2, "'></div></div>");
                            // and the country name and dial code
                            tmp += "<span class='iti__country-name'>".concat(c.name, "</span>");
                            tmp += "<span class='iti__dial-code'>+".concat(c.dialCode, "</span>");
                            // close the list item
                            tmp += "</li>";
                        }
                        this.countryList.insertAdjacentHTML("beforeend", tmp);
                    }
                }, {
                    key: "_setInitialState",
                    value: function _setInitialState() {
                        var val = this.telInput.value;
                        var dialCode = this._getDialCode(val);
                        var isRegionlessNanp = this._isRegionlessNanp(val);
                        var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;
                        // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the
                        // flag, else fall back to the default country
                        if (dialCode && !isRegionlessNanp) {
                            this._updateFlagFromNumber(val);
                        } else if (initialCountry !== "auto") {
                            // see if we should select a flag
                            if (initialCountry) {
                                this._setFlag(initialCountry.toLowerCase());
                            } else {
                                if (dialCode && isRegionlessNanp) {
                                    // has intl dial code, is regionless nanp, and no initialCountry, so default to US
                                    this._setFlag("us");
                                } else {
                                    // no dial code and no initialCountry, so default to first in list
                                    this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;
                                    if (!val) {
                                        this._setFlag(this.defaultCountry);
                                    }
                                }
                            }
                            // if empty and no nationalMode and no autoHideDialCode then insert the default dial code
                            if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {
                                this.telInput.value = "+".concat(this.selectedCountryData.dialCode);
                            }
                        }
                        // NOTE: if initialCountry is set to auto, that will be handled separately
                        // format - note this wont be run after _updateDialCode as that's only called if no val
                        if (val) this._updateValFromNumber(val);
                    }
                }, {
                    key: "_initListeners",
                    value: function _initListeners() {
                        this._initKeyListeners();
                        if (this.options.autoHideDialCode) this._initBlurListeners();
                        if (this.options.allowDropdown) this._initDropdownListeners();
                        if (this.hiddenInput) this._initHiddenInputListener();
                    }
                }, {
                    key: "_initHiddenInputListener",
                    value: function _initHiddenInputListener() {
                        var _this3 = this;
                        this._handleHiddenInputSubmit = function() {
                            _this3.hiddenInput.value = _this3.getNumber();
                        };
                        if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleHiddenInputSubmit);
                    }
                }, {
                    key: "_getClosestLabel",
                    value: function _getClosestLabel() {
                        var el = this.telInput;
                        while (el && el.tagName !== "LABEL") {
                            el = el.parentNode;
                        }
                        return el;
                    }
                }, {
                    key: "_initDropdownListeners",
                    value: function _initDropdownListeners() {
                        var _this4 = this;
                        // hack for input nested inside label (which is valid markup): clicking the selected-flag to
                        // open the dropdown would then automatically trigger a 2nd click on the input which would
                        // close it again
                        this._handleLabelClick = function(e) {
                            // if the dropdown is closed, then focus the input, else ignore the click
                            if (_this4.countryList.classList.contains("iti__hide")) _this4.telInput.focus(); else e.preventDefault();
                        };
                        var label = this._getClosestLabel();
                        if (label) label.addEventListener("click", this._handleLabelClick);
                        // toggle country dropdown on click
                        this._handleClickSelectedFlag = function() {
                            // only intercept this event if we're opening the dropdown
                            // else let it bubble up to the top ("click-off-to-close" listener)
                            // we cannot just stopPropagation as it may be needed to close another instance
                            if (_this4.countryList.classList.contains("iti__hide") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {
                                _this4._showDropdown();
                            }
                        };
                        this.selectedFlag.addEventListener("click", this._handleClickSelectedFlag);
                        // open dropdown list if currently focused
                        this._handleFlagsContainerKeydown = function(e) {
                            var isDropdownHidden = _this4.countryList.classList.contains("iti__hide");
                            if (isDropdownHidden && [ "ArrowUp", "Up", "ArrowDown", "Down", " ", "Enter" ].indexOf(e.key) !== -1) {
                                // prevent form from being submitted if "ENTER" was pressed
                                e.preventDefault();
                                // prevent event from being handled again by document
                                e.stopPropagation();
                                _this4._showDropdown();
                            }
                            // allow navigation from dropdown to input on TAB
                            if (e.key === "Tab") _this4._closeDropdown();
                        };
                        this.flagsContainer.addEventListener("keydown", this._handleFlagsContainerKeydown);
                    }
                }, {
                    key: "_initRequests",
                    value: function _initRequests() {
                        var _this5 = this;
                        // if the user has specified the path to the utils script, fetch it on window.load, else resolve
                        if (this.options.utilsScript && !window.intlTelInputUtils) {
                            // if the plugin is being initialised after the window.load event has already been fired
                            if (window.intlTelInputGlobals.windowLoaded) {
                                window.intlTelInputGlobals.loadUtils(this.options.utilsScript);
                            } else {
                                // wait until the load event so we don't block any other requests e.g. the flags image
                                window.addEventListener("load", function() {
                                    window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);
                                });
                            }
                        } else this.resolveUtilsScriptPromise();
                        if (this.options.initialCountry === "auto") this._loadAutoCountry(); else this.resolveAutoCountryPromise();
                    }
                }, {
                    key: "_loadAutoCountry",
                    value: function _loadAutoCountry() {
                        // 3 options:
                        // 1) already loaded (we're done)
                        // 2) not already started loading (start)
                        // 3) already started loading (do nothing - just wait for loading callback to fire)
                        if (window.intlTelInputGlobals.autoCountry) {
                            this.handleAutoCountry();
                        } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {
                            // don't do this twice!
                            window.intlTelInputGlobals.startedLoadingAutoCountry = true;
                            if (typeof this.options.geoIpLookup === "function") {
                                this.options.geoIpLookup(function(countryCode) {
                                    window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();
                                    // tell all instances the auto country is ready
                                    // TODO: this should just be the current instances
                                    // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight
                                    // away (e.g. if they have already done the geo ip lookup somewhere else). Using
                                    // setTimeout means that the current thread of execution will finish before executing
                                    // this, which allows the plugin to finish initialising.
                                    setTimeout(function() {
                                        return forEachInstance("handleAutoCountry");
                                    });
                                }, function() {
                                    return forEachInstance("rejectAutoCountryPromise");
                                });
                            }
                        }
                    }
                }, {
                    key: "_initKeyListeners",
                    value: function _initKeyListeners() {
                        var _this6 = this;
                        // update flag on keyup
                        this._handleKeyupEvent = function() {
                            if (_this6._updateFlagFromNumber(_this6.telInput.value)) {
                                _this6._triggerCountryChange();
                            }
                        };
                        this.telInput.addEventListener("keyup", this._handleKeyupEvent);
                        // update flag on cut/paste events (now supported in all major browsers)
                        this._handleClipboardEvent = function() {
                            // hack because "paste" event is fired before input is updated
                            setTimeout(_this6._handleKeyupEvent);
                        };
                        this.telInput.addEventListener("cut", this._handleClipboardEvent);
                        this.telInput.addEventListener("paste", this._handleClipboardEvent);
                    }
                }, {
                    key: "_cap",
                    value: function _cap(number) {
                        var max = this.telInput.getAttribute("maxlength");
                        return max && number.length > max ? number.substr(0, max) : number;
                    }
                }, {
                    key: "_initBlurListeners",
                    value: function _initBlurListeners() {
                        var _this7 = this;
                        // on blur or form submit: if just a dial code then remove it
                        this._handleSubmitOrBlurEvent = function() {
                            _this7._removeEmptyDialCode();
                        };
                        if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleSubmitOrBlurEvent);
                        this.telInput.addEventListener("blur", this._handleSubmitOrBlurEvent);
                    }
                }, {
                    key: "_removeEmptyDialCode",
                    value: function _removeEmptyDialCode() {
                        if (this.telInput.value.charAt(0) === "+") {
                            var numeric = this._getNumeric(this.telInput.value);
                            // if just a plus, or if just a dial code
                            if (!numeric || this.selectedCountryData.dialCode === numeric) {
                                this.telInput.value = "";
                            }
                        }
                    }
                }, {
                    key: "_getNumeric",
                    value: function _getNumeric(s) {
                        return s.replace(/\D/g, "");
                    }
                }, {
                    key: "_trigger",
                    value: function _trigger(name) {
                        // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax
                        var e = document.createEvent("Event");
                        e.initEvent(name, true, true);
                        // can bubble, and is cancellable
                        this.telInput.dispatchEvent(e);
                    }
                }, {
                    key: "_showDropdown",
                    value: function _showDropdown() {
                        this.countryList.classList.remove("iti__hide");
                        this.selectedFlag.setAttribute("aria-expanded", "true");
                        this._setDropdownPosition();
                        // update highlighting and scroll to active list item
                        if (this.activeItem) {
                            this._highlightListItem(this.activeItem, false);
                            this._scrollTo(this.activeItem, true);
                        }
                        // bind all the dropdown-related listeners: mouseover, click, click-off, keydown
                        this._bindDropdownListeners();
                        // update the arrow
                        this.dropdownArrow.classList.add("iti__arrow--up");
                        this._trigger("open:countrydropdown");
                    }
                }, {
                    key: "_toggleClass",
                    value: function _toggleClass(el, className, shouldHaveClass) {
                        if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);
                    }
                }, {
                    key: "_setDropdownPosition",
                    value: function _setDropdownPosition() {
                        var _this8 = this;
                        if (this.options.dropdownContainer) {
                            this.options.dropdownContainer.appendChild(this.dropdown);
                        }
                        if (!this.isMobile) {
                            var pos = this.telInput.getBoundingClientRect();
                            // windowTop from https://stackoverflow.com/a/14384091/217866
                            var windowTop = window.pageYOffset || document.documentElement.scrollTop;
                            var inputTop = pos.top + windowTop;
                            var dropdownHeight = this.countryList.offsetHeight;
                            // dropdownFitsBelow = (dropdownBottom < windowBottom)
                            var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;
                            var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;
                            // by default, the dropdown will be below the input. If we want to position it above the
                            // input, we add the dropup class.
                            this._toggleClass(this.countryList, "iti__country-list--dropup", !dropdownFitsBelow && dropdownFitsAbove);
                            // if dropdownContainer is enabled, calculate postion
                            if (this.options.dropdownContainer) {
                                // by default the dropdown will be directly over the input because it's not in the flow.
                                // If we want to position it below, we need to add some extra top value.
                                var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;
                                // calculate placement
                                this.dropdown.style.top = "".concat(inputTop + extraTop, "px");
                                this.dropdown.style.left = "".concat(pos.left + document.body.scrollLeft, "px");
                                // close menu on window scroll
                                this._handleWindowScroll = function() {
                                    return _this8._closeDropdown();
                                };
                                window.addEventListener("scroll", this._handleWindowScroll);
                            }
                        }
                    }
                }, {
                    key: "_getClosestListItem",
                    value: function _getClosestListItem(target) {
                        var el = target;
                        while (el && el !== this.countryList && !el.classList.contains("iti__country")) {
                            el = el.parentNode;
                        }
                        // if we reached the countryList element, then return null
                        return el === this.countryList ? null : el;
                    }
                }, {
                    key: "_bindDropdownListeners",
                    value: function _bindDropdownListeners() {
                        var _this9 = this;
                        // when mouse over a list item, just highlight that one
                        // we add the class "highlight", so if they hit "enter" we know which one to select
                        this._handleMouseoverCountryList = function(e) {
                            // handle event delegation, as we're listening for this event on the countryList
                            var listItem = _this9._getClosestListItem(e.target);
                            if (listItem) _this9._highlightListItem(listItem, false);
                        };
                        this.countryList.addEventListener("mouseover", this._handleMouseoverCountryList);
                        // listen for country selection
                        this._handleClickCountryList = function(e) {
                            var listItem = _this9._getClosestListItem(e.target);
                            if (listItem) _this9._selectListItem(listItem);
                        };
                        this.countryList.addEventListener("click", this._handleClickCountryList);
                        // click off to close
                        // (except when this initial opening click is bubbling up)
                        // we cannot just stopPropagation as it may be needed to close another instance
                        var isOpening = true;
                        this._handleClickOffToClose = function() {
                            if (!isOpening) _this9._closeDropdown();
                            isOpening = false;
                        };
                        document.documentElement.addEventListener("click", this._handleClickOffToClose);
                        // listen for up/down scrolling, enter to select, or letters to jump to country name.
                        // use keydown as keypress doesn't fire for non-char keys and we want to catch if they
                        // just hit down and hold it to scroll down (no keyup event).
                        // listen on the document because that's where key events are triggered if no input has focus
                        var query = "";
                        var queryTimer = null;
                        this._handleKeydownOnDropdown = function(e) {
                            // prevent down key from scrolling the whole page,
                            // and enter key from submitting a form etc
                            e.preventDefault();
                            // up and down to navigate
                            if (e.key === "ArrowUp" || e.key === "Up" || e.key === "ArrowDown" || e.key === "Down") _this9._handleUpDownKey(e.key); else if (e.key === "Enter") _this9._handleEnterKey(); else if (e.key === "Escape") _this9._closeDropdown(); else if (/^[a-zA-ZÃ-Ã¿Ð°-ÑÐ-Ð¯ ]$/.test(e.key)) {
                                // jump to countries that start with the query string
                                if (queryTimer) clearTimeout(queryTimer);
                                query += e.key.toLowerCase();
                                _this9._searchForCountry(query);
                                // if the timer hits 1 second, reset the query
                                queryTimer = setTimeout(function() {
                                    query = "";
                                }, 1e3);
                            }
                        };
                        document.addEventListener("keydown", this._handleKeydownOnDropdown);
                    }
                }, {
                    key: "_handleUpDownKey",
                    value: function _handleUpDownKey(key) {
                        var next = key === "ArrowUp" || key === "Up" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;
                        if (next) {
                            // skip the divider
                            if (next.classList.contains("iti__divider")) {
                                next = key === "ArrowUp" || key === "Up" ? next.previousElementSibling : next.nextElementSibling;
                            }
                            this._highlightListItem(next, true);
                        }
                    }
                }, {
                    key: "_handleEnterKey",
                    value: function _handleEnterKey() {
                        if (this.highlightedItem) this._selectListItem(this.highlightedItem);
                    }
                }, {
                    key: "_searchForCountry",
                    value: function _searchForCountry(query) {
                        for (var i = 0; i < this.countries.length; i++) {
                            if (this._startsWith(this.countries[i].name, query)) {
                                var listItem = this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(this.countries[i].iso2));
                                // update highlighting and scroll
                                this._highlightListItem(listItem, false);
                                this._scrollTo(listItem, true);
                                break;
                            }
                        }
                    }
                }, {
                    key: "_startsWith",
                    value: function _startsWith(a, b) {
                        return a.substr(0, b.length).toLowerCase() === b;
                    }
                }, {
                    key: "_updateValFromNumber",
                    value: function _updateValFromNumber(originalNumber) {
                        var number = originalNumber;
                        if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {
                            var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== "+");
                            var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;
                            var format = useNational ? NATIONAL : INTERNATIONAL;
                            number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);
                        }
                        number = this._beforeSetNumber(number);
                        this.telInput.value = number;
                    }
                }, {
                    key: "_updateFlagFromNumber",
                    value: function _updateFlagFromNumber(originalNumber) {
                        // if we're in nationalMode and we already have US/Canada selected, make sure the number starts
                        // with a +1 so _getDialCode will be able to extract the area code
                        // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag
                        // from the number), that means we're initialising the plugin with a number that already has a
                        // dial code, so fine to ignore this bit
                        var number = originalNumber;
                        var selectedDialCode = this.selectedCountryData.dialCode;
                        var isNanp = selectedDialCode === "1";
                        if (number && this.options.nationalMode && isNanp && number.charAt(0) !== "+") {
                            if (number.charAt(0) !== "1") number = "1".concat(number);
                            number = "+".concat(number);
                        }
                        // update flag if user types area code for another country
                        if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== "+") {
                            number = "+".concat(selectedDialCode).concat(number);
                        }
                        // try and extract valid dial code from input
                        var dialCode = this._getDialCode(number);
                        var numeric = this._getNumeric(number);
                        var countryCode = null;
                        if (dialCode) {
                            var countryCodes = this.countryCodes[this._getNumeric(dialCode)];
                            // check if the right country is already selected. this should be false if the number is
                            // longer than the matched dial code because in this case we need to make sure that if
                            // there are multiple country matches, that the first one is selected (note: we could
                            // just check that here, but it requires the same loop that we already have later)
                            var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;
                            var isRegionlessNanpNumber = selectedDialCode === "1" && this._isRegionlessNanp(numeric);
                            // only update the flag if:
                            // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)
                            // AND
                            // B) the right country is not already selected
                            if (!isRegionlessNanpNumber && !alreadySelected) {
                                // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first
                                // non-empty index
                                for (var j = 0; j < countryCodes.length; j++) {
                                    if (countryCodes[j]) {
                                        countryCode = countryCodes[j];
                                        break;
                                    }
                                }
                            }
                        } else if (number.charAt(0) === "+" && numeric.length) {
                            // invalid dial code, so empty
                            // Note: use getNumeric here because the number has not been formatted yet, so could contain
                            // bad chars
                            countryCode = "";
                        } else if (!number || number === "+") {
                            // empty, or just a plus, so default
                            countryCode = this.defaultCountry;
                        }
                        if (countryCode !== null) {
                            return this._setFlag(countryCode);
                        }
                        return false;
                    }
                }, {
                    key: "_isRegionlessNanp",
                    value: function _isRegionlessNanp(number) {
                        var numeric = this._getNumeric(number);
                        if (numeric.charAt(0) === "1") {
                            var areaCode = numeric.substr(1, 3);
                            return regionlessNanpNumbers.indexOf(areaCode) !== -1;
                        }
                        return false;
                    }
                }, {
                    key: "_highlightListItem",
                    value: function _highlightListItem(listItem, shouldFocus) {
                        var prevItem = this.highlightedItem;
                        if (prevItem) prevItem.classList.remove("iti__highlight");
                        this.highlightedItem = listItem;
                        this.highlightedItem.classList.add("iti__highlight");
                        if (shouldFocus) this.highlightedItem.focus();
                    }
                }, {
                    key: "_getCountryData",
                    value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {
                        var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;
                        for (var i = 0; i < countryList.length; i++) {
                            if (countryList[i].iso2 === countryCode) {
                                return countryList[i];
                            }
                        }
                        if (allowFail) {
                            return null;
                        }
                        throw new Error("No country data for '".concat(countryCode, "'"));
                    }
                }, {
                    key: "_setFlag",
                    value: function _setFlag(countryCode) {
                        var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};
                        // do this first as it will throw an error and stop if countryCode is invalid
                        this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};
                        // update the defaultCountry - we only need the iso2 from now on, so just store that
                        if (this.selectedCountryData.iso2) {
                            this.defaultCountry = this.selectedCountryData.iso2;
                        }
                        this.selectedFlagInner.setAttribute("class", "iti__flag iti__".concat(countryCode));
                        // update the selected country's title attribute
                        var title = countryCode ? "".concat(this.selectedCountryData.name, ": +").concat(this.selectedCountryData.dialCode) : "Unknown";
                        this.selectedFlag.setAttribute("title", title);
                        if (this.options.separateDialCode) {
                            var dialCode = this.selectedCountryData.dialCode ? "+".concat(this.selectedCountryData.dialCode) : "";
                            this.selectedDialCode.innerHTML = dialCode;
                            // offsetWidth is zero if input is in a hidden container during initialisation
                            var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();
                            // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css
                            this.telInput.style.paddingLeft = "".concat(selectedFlagWidth + 6, "px");
                        }
                        // and the input's placeholder
                        this._updatePlaceholder();
                        // update the active list item
                        if (this.options.allowDropdown) {
                            var prevItem = this.activeItem;
                            if (prevItem) {
                                prevItem.classList.remove("iti__active");
                                prevItem.setAttribute("aria-selected", "false");
                            }
                            if (countryCode) {
                                // check if there is a preferred item first, else fall back to standard
                                var nextItem = this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(countryCode, "-preferred")) || this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(countryCode));
                                nextItem.setAttribute("aria-selected", "true");
                                nextItem.classList.add("iti__active");
                                this.activeItem = nextItem;
                                this.selectedFlag.setAttribute("aria-activedescendant", nextItem.getAttribute("id"));
                            }
                        }
                        // return if the flag has changed or not
                        return prevCountry.iso2 !== countryCode;
                    }
                }, {
                    key: "_getHiddenSelectedFlagWidth",
                    value: function _getHiddenSelectedFlagWidth() {
                        // to get the right styling to apply, all we need is a shallow clone of the container,
                        // and then to inject a deep clone of the selectedFlag element
                        var containerClone = this.telInput.parentNode.cloneNode();
                        containerClone.style.visibility = "hidden";
                        document.body.appendChild(containerClone);
                        var selectedFlagClone = this.selectedFlag.cloneNode(true);
                        containerClone.appendChild(selectedFlagClone);
                        var width = selectedFlagClone.offsetWidth;
                        containerClone.parentNode.removeChild(containerClone);
                        return width;
                    }
                }, {
                    key: "_updatePlaceholder",
                    value: function _updatePlaceholder() {
                        var shouldSetPlaceholder = this.options.autoPlaceholder === "aggressive" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === "polite";
                        if (window.intlTelInputUtils && shouldSetPlaceholder) {
                            var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];
                            var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : "";
                            placeholder = this._beforeSetNumber(placeholder);
                            if (typeof this.options.customPlaceholder === "function") {
                                placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);
                            }
                            this.telInput.setAttribute("placeholder", placeholder);
                        }
                    }
                }, {
                    key: "_selectListItem",
                    value: function _selectListItem(listItem) {
                        // update selected flag and active list item
                        var flagChanged = this._setFlag(listItem.getAttribute("data-country-code"));
                        this._closeDropdown();
                        this._updateDialCode(listItem.getAttribute("data-dial-code"), true);
                        // focus the input
                        this.telInput.focus();
                        // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto
                        // inserting dial code), who try to put the cursor at the beginning the first time
                        var len = this.telInput.value.length;
                        this.telInput.setSelectionRange(len, len);
                        if (flagChanged) {
                            this._triggerCountryChange();
                        }
                    }
                }, {
                    key: "_closeDropdown",
                    value: function _closeDropdown() {
                        this.countryList.classList.add("iti__hide");
                        this.selectedFlag.setAttribute("aria-expanded", "false");
                        // update the arrow
                        this.dropdownArrow.classList.remove("iti__arrow--up");
                        // unbind key events
                        document.removeEventListener("keydown", this._handleKeydownOnDropdown);
                        document.documentElement.removeEventListener("click", this._handleClickOffToClose);
                        this.countryList.removeEventListener("mouseover", this._handleMouseoverCountryList);
                        this.countryList.removeEventListener("click", this._handleClickCountryList);
                        // remove menu from container
                        if (this.options.dropdownContainer) {
                            if (!this.isMobile) window.removeEventListener("scroll", this._handleWindowScroll);
                            if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);
                        }
                        this._trigger("close:countrydropdown");
                    }
                }, {
                    key: "_scrollTo",
                    value: function _scrollTo(element, middle) {
                        var container = this.countryList;
                        // windowTop from https://stackoverflow.com/a/14384091/217866
                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;
                        var containerHeight = container.offsetHeight;
                        var containerTop = container.getBoundingClientRect().top + windowTop;
                        var containerBottom = containerTop + containerHeight;
                        var elementHeight = element.offsetHeight;
                        var elementTop = element.getBoundingClientRect().top + windowTop;
                        var elementBottom = elementTop + elementHeight;
                        var newScrollTop = elementTop - containerTop + container.scrollTop;
                        var middleOffset = containerHeight / 2 - elementHeight / 2;
                        if (elementTop < containerTop) {
                            // scroll up
                            if (middle) newScrollTop -= middleOffset;
                            container.scrollTop = newScrollTop;
                        } else if (elementBottom > containerBottom) {
                            // scroll down
                            if (middle) newScrollTop += middleOffset;
                            var heightDifference = containerHeight - elementHeight;
                            container.scrollTop = newScrollTop - heightDifference;
                        }
                    }
                }, {
                    key: "_updateDialCode",
                    value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {
                        var inputVal = this.telInput.value;
                        // save having to pass this every time
                        var newDialCode = "+".concat(newDialCodeBare);
                        var newNumber;
                        if (inputVal.charAt(0) === "+") {
                            // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)
                            var prevDialCode = this._getDialCode(inputVal);
                            if (prevDialCode) {
                                // current number contains a valid dial code, so replace it
                                newNumber = inputVal.replace(prevDialCode, newDialCode);
                            } else {
                                // current number contains an invalid dial code, so ditch it
                                // (no way to determine where the invalid dial code ends and the rest of the number begins)
                                newNumber = newDialCode;
                            }
                        } else if (this.options.nationalMode || this.options.separateDialCode) {
                            // don't do anything
                            return;
                        } else {
                            // nationalMode is disabled
                            if (inputVal) {
                                // there is an existing value with no dial code: prefix the new dial code
                                newNumber = newDialCode + inputVal;
                            } else if (hasSelectedListItem || !this.options.autoHideDialCode) {
                                // no existing value and either they've just selected a list item, or autoHideDialCode is
                                // disabled: insert new dial code
                                newNumber = newDialCode;
                            } else {
                                return;
                            }
                        }
                        this.telInput.value = newNumber;
                    }
                }, {
                    key: "_getDialCode",
                    value: function _getDialCode(number) {
                        var dialCode = "";
                        // only interested in international numbers (starting with a plus)
                        if (number.charAt(0) === "+") {
                            var numericChars = "";
                            // iterate over chars
                            for (var i = 0; i < number.length; i++) {
                                var c = number.charAt(i);
                                // if char is number (https://stackoverflow.com/a/8935649/217866)
                                if (!isNaN(parseInt(c, 10))) {
                                    numericChars += c;
                                    // if current numericChars make a valid dial code
                                    if (this.countryCodes[numericChars]) {
                                        // store the actual raw string (useful for matching later)
                                        dialCode = number.substr(0, i + 1);
                                    }
                                    if (numericChars.length === this.dialCodeMaxLen) {
                                        break;
                                    }
                                }
                            }
                        }
                        return dialCode;
                    }
                }, {
                    key: "_getFullNumber",
                    value: function _getFullNumber() {
                        var val = this.telInput.value.trim();
                        var dialCode = this.selectedCountryData.dialCode;
                        var prefix;
                        var numericVal = this._getNumeric(val);
                        if (this.options.separateDialCode && val.charAt(0) !== "+" && dialCode && numericVal) {
                            // when using separateDialCode, it is visible so is effectively part of the typed number
                            prefix = "+".concat(dialCode);
                        } else {
                            prefix = "";
                        }
                        return prefix + val;
                    }
                }, {
                    key: "_beforeSetNumber",
                    value: function _beforeSetNumber(originalNumber) {
                        var number = originalNumber;
                        if (this.options.separateDialCode) {
                            var dialCode = this._getDialCode(number);
                            // if there is a valid dial code
                            if (dialCode) {
                                // in case _getDialCode returned an area code as well
                                dialCode = "+".concat(this.selectedCountryData.dialCode);
                                // a lot of numbers will have a space separating the dial code and the main number, and
                                // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get
                                // rid of it
                                // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc
                                var start = number[dialCode.length] === " " || number[dialCode.length] === "-" ? dialCode.length + 1 : dialCode.length;
                                number = number.substr(start);
                            }
                        }
                        return this._cap(number);
                    }
                }, {
                    key: "_triggerCountryChange",
                    value: function _triggerCountryChange() {
                        this._trigger("countrychange");
                    }
                }, {
                    key: "handleAutoCountry",
                    value: function handleAutoCountry() {
                        if (this.options.initialCountry === "auto") {
                            // we must set this even if there is an initial val in the input: in case the initial val is
                            // invalid and they delete it - they should see their auto country
                            this.defaultCountry = window.intlTelInputGlobals.autoCountry;
                            // if there's no initial value in the input, then update the flag
                            if (!this.telInput.value) {
                                this.setCountry(this.defaultCountry);
                            }
                            this.resolveAutoCountryPromise();
                        }
                    }
                }, {
                    key: "handleUtils",
                    value: function handleUtils() {
                        // if the request was successful
                        if (window.intlTelInputUtils) {
                            // if there's an initial value in the input, then format it
                            if (this.telInput.value) {
                                this._updateValFromNumber(this.telInput.value);
                            }
                            this._updatePlaceholder();
                        }
                        this.resolveUtilsScriptPromise();
                    }
                }, {
                    key: "destroy",
                    value: function destroy() {
                        var form = this.telInput.form;
                        if (this.options.allowDropdown) {
                            // make sure the dropdown is closed (and unbind listeners)
                            this._closeDropdown();
                            this.selectedFlag.removeEventListener("click", this._handleClickSelectedFlag);
                            this.flagsContainer.removeEventListener("keydown", this._handleFlagsContainerKeydown);
                            // label click hack
                            var label = this._getClosestLabel();
                            if (label) label.removeEventListener("click", this._handleLabelClick);
                        }
                        // unbind hiddenInput listeners
                        if (this.hiddenInput && form) form.removeEventListener("submit", this._handleHiddenInputSubmit);
                        // unbind autoHideDialCode listeners
                        if (this.options.autoHideDialCode) {
                            if (form) form.removeEventListener("submit", this._handleSubmitOrBlurEvent);
                            this.telInput.removeEventListener("blur", this._handleSubmitOrBlurEvent);
                        }
                        // unbind key events, and cut/paste events
                        this.telInput.removeEventListener("keyup", this._handleKeyupEvent);
                        this.telInput.removeEventListener("cut", this._handleClipboardEvent);
                        this.telInput.removeEventListener("paste", this._handleClipboardEvent);
                        // remove attribute of id instance: data-intl-tel-input-id
                        this.telInput.removeAttribute("data-intl-tel-input-id");
                        // remove markup (but leave the original input)
                        var wrapper = this.telInput.parentNode;
                        wrapper.parentNode.insertBefore(this.telInput, wrapper);
                        wrapper.parentNode.removeChild(wrapper);
                        delete window.intlTelInputGlobals.instances[this.id];
                    }
                }, {
                    key: "getExtension",
                    value: function getExtension() {
                        if (window.intlTelInputUtils) {
                            return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);
                        }
                        return "";
                    }
                }, {
                    key: "getNumber",
                    value: function getNumber(format) {
                        if (window.intlTelInputUtils) {
                            var iso2 = this.selectedCountryData.iso2;
                            return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);
                        }
                        return "";
                    }
                }, {
                    key: "getNumberType",
                    value: function getNumberType() {
                        if (window.intlTelInputUtils) {
                            return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);
                        }
                        return -99;
                    }
                }, {
                    key: "getSelectedCountryData",
                    value: function getSelectedCountryData() {
                        return this.selectedCountryData;
                    }
                }, {
                    key: "getValidationError",
                    value: function getValidationError() {
                        if (window.intlTelInputUtils) {
                            var iso2 = this.selectedCountryData.iso2;
                            return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);
                        }
                        return -99;
                    }
                }, {
                    key: "isValidNumber",
                    value: function isValidNumber() {
                        var val = this._getFullNumber().trim();
                        var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : "";
                        return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;
                    }
                }, {
                    key: "setCountry",
                    value: function setCountry(originalCountryCode) {
                        var countryCode = originalCountryCode.toLowerCase();
                        // check if already selected
                        if (!this.selectedFlagInner.classList.contains("iti__".concat(countryCode))) {
                            this._setFlag(countryCode);
                            this._updateDialCode(this.selectedCountryData.dialCode, false);
                            this._triggerCountryChange();
                        }
                    }
                }, {
                    key: "setNumber",
                    value: function setNumber(number) {
                        // we must update the flag first, which updates this.selectedCountryData, which is used for
                        // formatting the number before displaying it
                        var flagChanged = this._updateFlagFromNumber(number);
                        this._updateValFromNumber(number);
                        if (flagChanged) {
                            this._triggerCountryChange();
                        }
                    }
                }, {
                    key: "setPlaceholderNumberType",
                    value: function setPlaceholderNumberType(type) {
                        this.options.placeholderNumberType = type;
                        this._updatePlaceholder();
                    }
                } ]);
                return Iti;
            }();
            /********************
     *  STATIC METHODS
     ********************/
            // get the country data object
            intlTelInputGlobals.getCountryData = function() {
                return allCountries;
            };
            // inject a <script> element to load utils.js
            var injectScript = function injectScript(path, handleSuccess, handleFailure) {
                // inject a new script element into the page
                var script = document.createElement("script");
                script.onload = function() {
                    forEachInstance("handleUtils");
                    if (handleSuccess) handleSuccess();
                };
                script.onerror = function() {
                    forEachInstance("rejectUtilsScriptPromise");
                    if (handleFailure) handleFailure();
                };
                script.className = "iti-load-utils";
                script.async = true;
                script.src = path;
                document.body.appendChild(script);
            };
            // load the utils script
            intlTelInputGlobals.loadUtils = function(path) {
                // 2 options:
                // 1) not already started loading (start)
                // 2) already started loading (do nothing - just wait for the onload callback to fire, which will
                // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)
                if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {
                    // only do this once
                    window.intlTelInputGlobals.startedLoadingUtilsScript = true;
                    // if we have promises, then return a promise
                    if (typeof Promise !== "undefined") {
                        return new Promise(function(resolve, reject) {
                            return injectScript(path, resolve, reject);
                        });
                    }
                    injectScript(path);
                }
                return null;
            };
            // default options
            intlTelInputGlobals.defaults = defaults;
            // version
            intlTelInputGlobals.version = "17.0.0";
            // convenience wrapper
            return function(input, options) {
                var iti = new Iti(input, options);
                iti._init();
                input.setAttribute("data-intl-tel-input-id", iti.id);
                window.intlTelInputGlobals.instances[iti.id] = iti;
                return iti;
            };
        }();
    });
    });

    /**
     * Exposing intl-tel-input as a component
     */
    var intlTelInput$1 = intlTelInput;

    var countries$K = entryNode;

    var AfdPhone =
    /*#__PURE__*/
    function (_afdValidationMixin) {
      inherits(AfdPhone, _afdValidationMixin);

      function AfdPhone(element, options) {
        var _this;

        classCallCheck(this, AfdPhone);

        _this = possibleConstructorReturn(this, getPrototypeOf(AfdPhone).call(this, element, options));

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onKeyUp", function () {
          var $element = _this.$element;

          var val = _this.$element.val(); // dont do validation until focus out, however we can provide useful info on each type
          // handle double naughts


          if (_this.$element.val().startsWith('00')) {
            val = val.replace('00', '+');
          }

          _this.$element.val(val); // Update data attributes


          _this.updateDataAttributes(); // AFD only gets validated on focusOut


          $element.data('phone-is-afd-valid', false);

          _this.clearValidation();

          if (_this.iti.isValidNumber()) {
            _this.iti.setNumber(_this.iti.getNumber('2'));
          }

          $$1(document).trigger('afd:phoneValidationUpdated', $element);
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onFocusOut", function () {
          var $element = _this.$element; // we only want to set the invalid state if the user focuses out of the field
          // first check to see if we can locally confirm email valid via plugin

          if (_this.iti.isValidNumber()) {
            // if it is a correctly structured phone number then check against PCE
            var pceValid = _this.validatePhone(_this.iti.getNumber(), _this.countryData.iso3);

            $$1(document).trigger('afd:phoneValidationStarted', [$element]);

            _this.showLoadingSpinner($element, _this.options.phone.loadingSpinner);

            pceValid.done(function (data) {
              if (data.Result === '1') {
                _this.handleValid();

                $element.data('phone-is-afd-valid', true);
                $$1(document).trigger('afd:phoneValidationUpdated', $element);
              } else {
                _this.handleInvalid(_this.options.phone.invalidPhoneNumberMessage);

                $element.data('phone-is-afd-valid', false);
                $$1(document).trigger('afd:phoneValidationUpdated', $element);
              }

              $$1(document).trigger('afd:phoneValidationSuccess', [data, $element]);

              _this.hideLoadingSpinner($element, _this.options.phone.loadingSpinner);
            }).fail(function (err) {
              console.error(err);
              $$1(document).trigger('afd:phoneValidationError', [err]);

              _this.hideLoadingSpinner($element, _this.options.phone.loadingSpinner);
            });
          } else {
            _this.handleInvalid(_this.options.phone.invalidPhoneNumberMessage);

            $element.data('phone-is-afd-valid', false);
            $$1(document).trigger('afd:phoneValidationUpdated', $element);
          }
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onCountryChange", function () {
          var $element = _this.$element;
          var val = $element.val();
          _this.countryData = _this.iti.getSelectedCountryData();

          if (typeof _this.countryData.iso2 !== 'undefined') {
            // add in ISO 3 number
            _this.countryData.iso3 = countries$K.alpha2ToAlpha3(_this.countryData.iso2.toUpperCase());
          } // remove country code if there is one


          if (typeof _this.countryData.dialCode !== 'undefined' && val.startsWith('+')) {
            val = val.replace('+' + _this.countryData.dialCode, '');
          }

          _this.$element.val(val);

          _this.updateDataAttributes();

          $$1(document).trigger('afd:phoneValidationUpdated', $element);
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onCountryControlChange", function (e) {
          var newCountry = _this.options.phone.countryControlConverter ? _this.phone.options.countryControlConverter(e) : _this.formatCountryISO2(e.target.value);

          _this.iti.setCountry(newCountry);
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "formatCountryISO2", function (country) {
          if ([2, 3].indexOf(country.length) < 0) {
            throw 'Value of country field should be either ISO2 or ISo3 format';
          } else if (country.length === 2) {
            country = country.toLowerCase();
          } else {
            country = countries$K.alpha3ToAlpha2(country).toLowerCase();
          }

          return country;
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setCountryDialingCode", function (phoneNumber, defaultCountryDialingCode) {
          if (phoneNumber.substr(0, 1) !== '+' && phoneNumber.substr(0, 2 !== '00')) ; else {
            return phoneNumber;
          }

          return defaultCountryDialingCode + phoneNumber;
        });

        defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateDataAttributes", function () {
          var $element = _this.$element;

          var numberType = _this.iti.getNumberType();

          $element.data('phone-is-regex-valid', _this.iti.isValidNumber());
          $element.data('phone-is-syntax-valid', _this.iti.isValidNumber());
          $element.data('phone-syntax-valid', _this.iti.isValidNumber());
          $element.data('phone-region-name', typeof _this.countryData.name !== 'undefined' ? _this.countryData.name : '');
          $element.data('phone-region', typeof _this.countryData.iso2 !== 'undefined' ? _this.countryData.iso2.toUpperCase() : '');
          $element.data('phone-region-iso2', typeof _this.countryData.iso2 !== 'undefined' ? _this.countryData.iso2.toUpperCase() : '');
          $element.data('phone-region-iso3', typeof _this.countryData.iso3 !== 'undefined' ? _this.countryData.iso3 : '');
          $element.data('phone-number', _this.iti.getNumber());
          $element.data('phone-number-e164', _this.iti.getNumber());
          $element.data('phone-number-international', _this.iti.getNumber(1));
          $element.data('phone-number-national', _this.iti.getNumber(2));
          $element.data('phone-number-rfc3966', _this.iti.getNumber(3));
          var numberTypes = ['FIXED_LINE', 'MOBILE', 'FIXED_LINE_OR_MOBILE', 'TOLL_FREE', 'PREMIUM_RATE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];
          $element.data('phone-is-mobile', numberType > -1 ? numberTypes[numberType] === 'MOBILE' : false);
          $element.data('phone-is-landline', numberType > -1 ? numberTypes[numberType] === 'FIXED_LINE' : false);
          $element.data('phone-number-type', numberType > -1 ? numberTypes[numberType] : 'UNKNOWN');
        });

        return _this;
      }

      createClass(AfdPhone, [{
        key: "init",
        value: function init() {
          this.$element.data('phone-is-afd-valid', false); // in this file countryControl refers to an external country control that may be in the form, not the one in the phone input control

          this.countryControl = this.options.phone.countryControl ? $$1(this.options.phone.countryControl) : null;

          if (this.countryControl && this.countryControl.length === 0) {
            console.warn('Country control `' + this.options.phone.countryControl + '` not found');
          }

          var event = this.eventHandler;
          event(this.$element, 'keyup', this.onKeyUp);
          event(this.$element, 'focusout', this.onFocusOut);
          event(this.countryControl, 'change', this.onCountryControlChange);
          event(this.$element, 'countrychange', this.onCountryChange);
          this.iti = intlTelInput$1(this.element, {
            utilsScript: 'https://cdn.afd.co.uk/plugins/shared/utils.js',
            separateDialCode: true
          }); // set default country

          this.iti.setNumber(this.options.phone.defaultDialingCode);
          this.countryData = this.iti.getSelectedCountryData();
        } // check for validation on each keystroke

      }, {
        key: "validatePhone",
        value: function validatePhone(phone, countryiso) {
          $$1(document).trigger('afd:phoneValidationStared', this.$element);
          var requestOptions = this.setupParams({
            phone: phone,
            data: 'phone',
            task: 'full',
            fields: 'standard',
            countryiso: countryiso,
            afdc: this.options.afdc
          });
          return $$1.ajax(requestOptions);
        }
      }]);

      return AfdPhone;
    }(afdValidationMixin(AfdControl));

    function initPhone () {

      var options = $.extend(true, {}, defaults, afdOptions); // assign phone field

      var $phone = $(this); // Validate that phone field is <input>

      if (!$phone.is('input')) {
        throw '<' + $phone.prop('tagName').toLowerCase() + '> is not a valid tag for `[data-afd-control="phone"]`, use <input>';
      } // initialise the control


      var phone = new AfdPhone($phone, options);
      $(document).off('afd:init.afd').on('afd:init.afd', function () {
        phone.init();
      });
      phone.init();
    }

    var _iterStep = function (done, value) {
      return { value: value, done: !!done };
    };

    var _iterators = {};

    // to indexed object, toObject with fallback for non-array-like ES3 strings


    var _toIobject = function (it) {
      return _iobject(_defined(it));
    };

    var max = Math.max;
    var min$1 = Math.min;
    var _toAbsoluteIndex = function (index, length) {
      index = _toInteger(index);
      return index < 0 ? max(index + length, 0) : min$1(index, length);
    };

    // false -> Array#indexOf
    // true  -> Array#includes



    var _arrayIncludes = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = _toIobject($this);
        var length = _toLength(O.length);
        var index = _toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare
          if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };

    var shared = _shared('keys');

    var _sharedKey = function (key) {
      return shared[key] || (shared[key] = _uid(key));
    };

    var arrayIndexOf = _arrayIncludes(false);
    var IE_PROTO = _sharedKey('IE_PROTO');

    var _objectKeysInternal = function (object, names) {
      var O = _toIobject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while (names.length > i) if (_has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };

    // IE 8- don't enum bug keys
    var _enumBugKeys = (
      'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    ).split(',');

    // 19.1.2.14 / 15.2.3.14 Object.keys(O)



    var _objectKeys = Object.keys || function keys(O) {
      return _objectKeysInternal(O, _enumBugKeys);
    };

    var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
      _anObject(O);
      var keys = _objectKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;
      while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
      return O;
    };

    var document$2 = _global.document;
    var _html = document$2 && document$2.documentElement;

    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



    var IE_PROTO$1 = _sharedKey('IE_PROTO');
    var Empty = function () { /* empty */ };
    var PROTOTYPE$1 = 'prototype';

    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var createDict = function () {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = _domCreate('iframe');
      var i = _enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';
      _html.appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
      return createDict();
    };

    var _objectCreate = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        Empty[PROTOTYPE$1] = _anObject(O);
        result = new Empty();
        Empty[PROTOTYPE$1] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO$1] = O;
      } else result = createDict();
      return Properties === undefined ? result : _objectDps(result, Properties);
    };

    var def = _objectDp.f;

    var TAG = _wks('toStringTag');

    var _setToStringTag = function (it, tag, stat) {
      if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
    };

    var IteratorPrototype = {};

    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

    var _iterCreate = function (Constructor, NAME, next) {
      Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
      _setToStringTag(Constructor, NAME + ' Iterator');
    };

    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


    var IE_PROTO$2 = _sharedKey('IE_PROTO');
    var ObjectProto = Object.prototype;

    var _objectGpo = Object.getPrototypeOf || function (O) {
      O = _toObject(O);
      if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    };

    var ITERATOR = _wks('iterator');
    var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';

    var returnThis = function () { return this; };

    var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      _iterCreate(Constructor, NAME, next);
      var getMethod = function (kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch (kind) {
          case KEYS: return function keys() { return new Constructor(this, kind); };
          case VALUES: return function values() { return new Constructor(this, kind); };
        } return function entries() { return new Constructor(this, kind); };
      };
      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;
      // Fix native
      if ($anyNative) {
        IteratorPrototype = _objectGpo($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          // Set @@toStringTag to native iterators
          _setToStringTag(IteratorPrototype, TAG, true);
          // fix for some old engines
          if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }
      // fix Array#{values, @@iterator}.name in V8 / FF
      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() { return $native.call(this); };
      }
      // Define iterator
      if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        _hide(proto, ITERATOR, $default);
      }
      // Plug for library
      _iterators[NAME] = $default;
      _iterators[TAG] = returnThis;
      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) _redefine(proto, key, methods[key]);
        } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };

    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
      this._t = _toIobject(iterated); // target
      this._i = 0;                   // next index
      this._k = kind;                // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return _iterStep(1);
      }
      if (kind == 'keys') return _iterStep(0, index);
      if (kind == 'values') return _iterStep(0, O[index]);
      return _iterStep(0, [index, O[index]]);
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    _iterators.Arguments = _iterators.Array;

    _addToUnscopables('keys');
    _addToUnscopables('values');
    _addToUnscopables('entries');

    var ITERATOR$1 = _wks('iterator');
    var TO_STRING_TAG = _wks('toStringTag');
    var ArrayValues = _iterators.Array;

    var DOMIterables = {
      CSSRuleList: true, // TODO: Not spec compliant, should be false.
      CSSStyleDeclaration: false,
      CSSValueList: false,
      ClientRectList: false,
      DOMRectList: false,
      DOMStringList: false,
      DOMTokenList: true,
      DataTransferItemList: false,
      FileList: false,
      HTMLAllCollection: false,
      HTMLCollection: false,
      HTMLFormElement: false,
      HTMLSelectElement: false,
      MediaList: true, // TODO: Not spec compliant, should be false.
      MimeTypeArray: false,
      NamedNodeMap: false,
      NodeList: true,
      PaintRequestList: false,
      Plugin: false,
      PluginArray: false,
      SVGLengthList: false,
      SVGNumberList: false,
      SVGPathSegList: false,
      SVGPointList: false,
      SVGStringList: false,
      SVGTransformList: false,
      SourceBufferList: false,
      StyleSheetList: true, // TODO: Not spec compliant, should be false.
      TextTrackCueList: false,
      TextTrackList: false,
      TouchList: false
    };

    for (var collections = _objectKeys(DOMIterables), i$1 = 0; i$1 < collections.length; i$1++) {
      var NAME$1 = collections[i$1];
      var explicit = DOMIterables[NAME$1];
      var Collection = _global[NAME$1];
      var proto = Collection && Collection.prototype;
      var key;
      if (proto) {
        if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
        if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME$1);
        _iterators[NAME$1] = ArrayValues;
        if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
      }
    }

    // getting tag from 19.1.3.6 Object.prototype.toString()

    var TAG$1 = _wks('toStringTag');
    // ES3 wrong here
    var ARG = _cof(function () { return arguments; }()) == 'Arguments';

    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
      try {
        return it[key];
      } catch (e) { /* empty */ }
    };

    var _classof = function (it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
        // builtinTag case
        : ARG ? _cof(O)
        // ES3 arguments fallback
        : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };

    var _anInstance = function (it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
        throw TypeError(name + ': incorrect invocation!');
      } return it;
    };

    // call something on iterator step with safe closing on error

    var _iterCall = function (iterator, fn, value, entries) {
      try {
        return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) _anObject(ret.call(iterator));
        throw e;
      }
    };

    // check on default Array iterator

    var ITERATOR$2 = _wks('iterator');
    var ArrayProto$1 = Array.prototype;

    var _isArrayIter = function (it) {
      return it !== undefined && (_iterators.Array === it || ArrayProto$1[ITERATOR$2] === it);
    };

    var ITERATOR$3 = _wks('iterator');

    var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR$3]
        || it['@@iterator']
        || _iterators[_classof(it)];
    };

    var _forOf = createCommonjsModule(function (module) {
    var BREAK = {};
    var RETURN = {};
    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
      var f = _ctx(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
      // fast case for arrays with default iterator
      if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
        result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = _iterCall(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };
    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
    });

    // 7.3.20 SpeciesConstructor(O, defaultConstructor)


    var SPECIES$1 = _wks('species');
    var _speciesConstructor = function (O, D) {
      var C = _anObject(O).constructor;
      var S;
      return C === undefined || (S = _anObject(C)[SPECIES$1]) == undefined ? D : _aFunction(S);
    };

    // fast apply, http://jsperf.lnkit.com/fast-apply/5
    var _invoke = function (fn, args, that) {
      var un = that === undefined;
      switch (args.length) {
        case 0: return un ? fn()
                          : fn.call(that);
        case 1: return un ? fn(args[0])
                          : fn.call(that, args[0]);
        case 2: return un ? fn(args[0], args[1])
                          : fn.call(that, args[0], args[1]);
        case 3: return un ? fn(args[0], args[1], args[2])
                          : fn.call(that, args[0], args[1], args[2]);
        case 4: return un ? fn(args[0], args[1], args[2], args[3])
                          : fn.call(that, args[0], args[1], args[2], args[3]);
      } return fn.apply(that, args);
    };

    var process = _global.process;
    var setTask = _global.setImmediate;
    var clearTask = _global.clearImmediate;
    var MessageChannel = _global.MessageChannel;
    var Dispatch = _global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;
    var run = function () {
      var id = +this;
      // eslint-disable-next-line no-prototype-builtins
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listener = function (event) {
      run.call(event.data);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while (arguments.length > i) args.push(arguments[i++]);
        queue[++counter] = function () {
          // eslint-disable-next-line no-new-func
          _invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      // Node.js 0.8-
      if (_cof(process) == 'process') {
        defer = function (id) {
          process.nextTick(_ctx(run, id, 1));
        };
      // Sphere (JS game engine) Dispatch API
      } else if (Dispatch && Dispatch.now) {
        defer = function (id) {
          Dispatch.now(_ctx(run, id, 1));
        };
      // Browsers with MessageChannel, includes WebWorkers
      } else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = _ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
        defer = function (id) {
          _global.postMessage(id + '', '*');
        };
        _global.addEventListener('message', listener, false);
      // IE8-
      } else if (ONREADYSTATECHANGE in _domCreate('script')) {
        defer = function (id) {
          _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
            _html.removeChild(this);
            run.call(id);
          };
        };
      // Rest old browsers
      } else {
        defer = function (id) {
          setTimeout(_ctx(run, id, 1), 0);
        };
      }
    }
    var _task = {
      set: setTask,
      clear: clearTask
    };

    var macrotask = _task.set;
    var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
    var process$1 = _global.process;
    var Promise$1 = _global.Promise;
    var isNode = _cof(process$1) == 'process';

    var _microtask = function () {
      var head, last, notify;

      var flush = function () {
        var parent, fn;
        if (isNode && (parent = process$1.domain)) parent.exit();
        while (head) {
          fn = head.fn;
          head = head.next;
          try {
            fn();
          } catch (e) {
            if (head) notify();
            else last = undefined;
            throw e;
          }
        } last = undefined;
        if (parent) parent.enter();
      };

      // Node.js
      if (isNode) {
        notify = function () {
          process$1.nextTick(flush);
        };
      // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
      } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
        notify = function () {
          node.data = toggle = !toggle;
        };
      // environments with maybe non-completely correct, but existent Promise
      } else if (Promise$1 && Promise$1.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        var promise = Promise$1.resolve(undefined);
        notify = function () {
          promise.then(flush);
        };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
      } else {
        notify = function () {
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(_global, flush);
        };
      }

      return function (fn) {
        var task = { fn: fn, next: undefined };
        if (last) last.next = task;
        if (!head) {
          head = task;
          notify();
        } last = task;
      };
    };

    // 25.4.1.5 NewPromiseCapability(C)


    function PromiseCapability(C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = _aFunction(resolve);
      this.reject = _aFunction(reject);
    }

    var f$1 = function (C) {
      return new PromiseCapability(C);
    };

    var _newPromiseCapability = {
    	f: f$1
    };

    var _perform = function (exec) {
      try {
        return { e: false, v: exec() };
      } catch (e) {
        return { e: true, v: e };
      }
    };

    var navigator$1 = _global.navigator;

    var _userAgent = navigator$1 && navigator$1.userAgent || '';

    var _promiseResolve = function (C, x) {
      _anObject(C);
      if (_isObject(x) && x.constructor === C) return x;
      var promiseCapability = _newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };

    var _redefineAll = function (target, src, safe) {
      for (var key in src) _redefine(target, key, src[key], safe);
      return target;
    };

    var SPECIES$2 = _wks('species');

    var _setSpecies = function (KEY) {
      var C = _global[KEY];
      if (_descriptors && C && !C[SPECIES$2]) _objectDp.f(C, SPECIES$2, {
        configurable: true,
        get: function () { return this; }
      });
    };

    var ITERATOR$4 = _wks('iterator');
    var SAFE_CLOSING = false;

    try {
      var riter = [7][ITERATOR$4]();
      riter['return'] = function () { SAFE_CLOSING = true; };
    } catch (e) { /* empty */ }

    var _iterDetect = function (exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return false;
      var safe = false;
      try {
        var arr = [7];
        var iter = arr[ITERATOR$4]();
        iter.next = function () { return { done: safe = true }; };
        arr[ITERATOR$4] = function () { return iter; };
        exec(arr);
      } catch (e) { /* empty */ }
      return safe;
    };

    var task = _task.set;
    var microtask = _microtask();




    var PROMISE = 'Promise';
    var TypeError$1 = _global.TypeError;
    var process$2 = _global.process;
    var versions = process$2 && process$2.versions;
    var v8 = versions && versions.v8 || '';
    var $Promise = _global[PROMISE];
    var isNode$1 = _classof(process$2) == 'process';
    var empty = function () { /* empty */ };
    var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
    var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

    var USE_NATIVE = !!function () {
      try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);
        var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
          exec(empty, empty);
        };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode$1 || typeof PromiseRejectionEvent == 'function')
          && promise.then(empty) instanceof FakePromise
          // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // we can't detect it synchronously, so just check versions
          && v8.indexOf('6.6') !== 0
          && _userAgent.indexOf('Chrome/66') === -1;
      } catch (e) { /* empty */ }
    }();

    // helpers
    var isThenable = function (it) {
      var then;
      return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };
    var notify = function (promise, isReject) {
      if (promise._n) return;
      promise._n = true;
      var chain = promise._c;
      microtask(function () {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;
        var run = function (reaction) {
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then, exited;
          try {
            if (handler) {
              if (!ok) {
                if (promise._h == 2) onHandleUnhandled(promise);
                promise._h = 1;
              }
              if (handler === true) result = value;
              else {
                if (domain) domain.enter();
                result = handler(value); // may throw
                if (domain) {
                  domain.exit();
                  exited = true;
                }
              }
              if (result === reaction.promise) {
                reject(TypeError$1('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (e) {
            if (domain && !exited) domain.exit();
            reject(e);
          }
        };
        while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
      });
    };
    var onUnhandled = function (promise) {
      task.call(_global, function () {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;
        if (unhandled) {
          result = _perform(function () {
            if (isNode$1) {
              process$2.emit('unhandledRejection', value, promise);
            } else if (handler = _global.onunhandledrejection) {
              handler({ promise: promise, reason: value });
            } else if ((console = _global.console) && console.error) {
              console.error('Unhandled promise rejection', value);
            }
          });
          // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
          promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
        } promise._a = undefined;
        if (unhandled && result.e) throw result.v;
      });
    };
    var isUnhandled = function (promise) {
      return promise._h !== 1 && (promise._a || promise._c).length === 0;
    };
    var onHandleUnhandled = function (promise) {
      task.call(_global, function () {
        var handler;
        if (isNode$1) {
          process$2.emit('rejectionHandled', promise);
        } else if (handler = _global.onrejectionhandled) {
          handler({ promise: promise, reason: promise._v });
        }
      });
    };
    var $reject = function (value) {
      var promise = this;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      promise._v = value;
      promise._s = 2;
      if (!promise._a) promise._a = promise._c.slice();
      notify(promise, true);
    };
    var $resolve = function (value) {
      var promise = this;
      var then;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      try {
        if (promise === value) throw TypeError$1("Promise can't be resolved itself");
        if (then = isThenable(value)) {
          microtask(function () {
            var wrapper = { _w: promise, _d: false }; // wrap
            try {
              then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          promise._v = value;
          promise._s = 1;
          notify(promise, false);
        }
      } catch (e) {
        $reject.call({ _w: promise, _d: false }, e); // wrap
      }
    };

    // constructor polyfill
    if (!USE_NATIVE) {
      // 25.4.3.1 Promise(executor)
      $Promise = function Promise(executor) {
        _anInstance(this, $Promise, PROMISE, '_h');
        _aFunction(executor);
        Internal.call(this);
        try {
          executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
        } catch (err) {
          $reject.call(this, err);
        }
      };
      // eslint-disable-next-line no-unused-vars
      Internal = function Promise(executor) {
        this._c = [];             // <- awaiting reactions
        this._a = undefined;      // <- checked in isUnhandled reactions
        this._s = 0;              // <- state
        this._d = false;          // <- done
        this._v = undefined;      // <- value
        this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false;          // <- notify
      };
      Internal.prototype = _redefineAll($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
          var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          reaction.domain = isNode$1 ? process$2.domain : undefined;
          this._c.push(reaction);
          if (this._a) this._a.push(reaction);
          if (this._s) notify(this, false);
          return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function (onRejected) {
          return this.then(undefined, onRejected);
        }
      });
      OwnPromiseCapability = function () {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = _ctx($resolve, promise, 1);
        this.reject = _ctx($reject, promise, 1);
      };
      _newPromiseCapability.f = newPromiseCapability = function (C) {
        return C === $Promise || C === Wrapper
          ? new OwnPromiseCapability(C)
          : newGenericPromiseCapability(C);
      };
    }

    _export(_export.G + _export.W + _export.F * !USE_NATIVE, { Promise: $Promise });
    _setToStringTag($Promise, PROMISE);
    _setSpecies(PROMISE);
    Wrapper = _core[PROMISE];

    // statics
    _export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    _export(_export.S + _export.F * (_library || !USE_NATIVE), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x) {
        return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
      }
    });
    _export(_export.S + _export.F * !(USE_NATIVE && _iterDetect(function (iter) {
      $Promise.all(iter)['catch'](empty);
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = _perform(function () {
          var values = [];
          var index = 0;
          var remaining = 1;
          _forOf(iterable, false, function (promise) {
            var $index = index++;
            var alreadyCalled = false;
            values.push(undefined);
            remaining++;
            C.resolve(promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[$index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = _perform(function () {
          _forOf(iterable, false, function (promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (result.e) reject(result.v);
        return capability.promise;
      }
    });

    function dataDefinition() {
      // prevent the init script from running several times if multiple modules are loaded
      if (typeof window.afdDataInit === 'undefined') {
        window.afdDataInit = false;
      } // Data API definitions


      $(document).ready(function () {
        if (!window.afdDataInit) {
          window.afdDataInit = true;
          $(document).trigger('afd::page_ready');
        }
      }); // Set page_ready listener for data definitions

      $(document).off('afd::page_ready').on('afd::page_ready', function () {
        // Fields that need to perform ajax requests before the rest of the controls can be initialised
        var dependantFields = ['country']; // create an array of promises for dependent requests

        var dependantRequests = []; //First only initialise the controls that other controls are dependant on

        $('[data-afd-control]').each(function () {
          var $this = $(this);
          var controlType = $this.data('afd-control'); // check if this is a control that needs to be initialised before the rest

          if (dependantFields.indexOf(controlType) > -1) {
            // add a new promise to the dependent requests array
            dependantRequests.push(new Promise(function (resolve, reject) {
              initialiseControl($this, controlType, resolve);
            }));
          }
        }); // If there were dependant requests then once they have all completed we can intialise the rest of the controls

        Promise.all(dependantRequests).then(function () {
          // Only do non dependant controls
          $('[data-afd-control]').each(function () {
            var $this = $(this);
            var controlType = $this.data('afd-control');

            if (dependantFields.indexOf(controlType) === -1) {
              initialiseControl($this, controlType, null);
            }
          });
        });
      });
    }

    function initialiseControl(control, controlType, resolve) {
      // activate the module on this element according to the data-afd-control
      try {
        control.afd(controlType, resolve);
      } catch (e) {
        console.error(e);
      }
    }

    window.afdInitScripts = typeof window.afdInitScripts === 'undefined' ? {
      lookupButton: null,
      typeahead: null,
      reverseGeocodeButton: null,
      account: null,
      card: null,
      email: null,
      phone: null,
      country: null
    } : window.afdInitScripts;
    window.afdInitScripts.lookupButton = typeof initLookup !== 'undefined' ? initLookup : window.afdInitScripts.lookupButton ? window.afdInitScripts.lookupButton : null;
    window.afdInitScripts.typeahead = typeof initTypeahead !== 'undefined' ? initTypeahead : window.afdInitScripts.typeahead ? window.afdInitScripts.typeahead : null;
    window.afdInitScripts.reverseGeocodeButton = typeof initReverseGeocode !== 'undefined' ? initReverseGeocode : window.afdInitScripts.reverseGeocodeButton ? window.afdInitScripts.reverseGeocodeButton : null;
    window.afdInitScripts.account = typeof initAccount !== 'undefined' ? initAccount : window.afdInitScripts.account ? window.afdInitScripts.account : null;
    window.afdInitScripts.card = typeof initCard !== 'undefined' ? initCard : window.afdInitScripts.card ? _typeof_1(window.afdInitScripts.card) : null;
    window.afdInitScripts.email = typeof initEmail !== 'undefined' ? initEmail : window.afdInitScripts.email ? window.afdInitScripts.email : null;
    window.afdInitScripts.phone = typeof initPhone !== 'undefined' ? initPhone : window.afdInitScripts.phone ? window.afdInitScripts.phone : null;
    window.afdInitScripts.country = typeof initCountry !== 'undefined' ? initCountry : window.afdInitScripts.country ? window.afdInitScripts.country : null;

    (function ($) {
      // Init plugin so $('selector').afd('control-name') can work
      $.fn.afd = function (controlType, resolve) {
        return this.each(function () {
          //fields that do not need to be initialised
          var nonInitFields = ['lookupField', 'lookupResultsList', 'reverseGeocodeResultsList', 'sort', 'expiry'];

          if (nonInitFields.indexOf(controlType) > -1) {
            return;
          } //If invalid field is supplied


          var validFields = ['typeahead', 'lookupButton', 'country', 'reverseGeocodeButton', 'phone', 'email', 'account', 'card'];

          if (validFields.indexOf(controlType) === -1) {
            throw '`' + controlType + '` is not a valid AFD jQuery control.  Please use one of ' + validFields + ',' + nonInitFields;
          } // if user is trying to init a field that module isn't loaded


          if (!window.afdInitScripts[controlType]) {
            throw 'You are trying to intitialise the control `' + controlType + '` but it seems that you have not loaded this module';
          }

          try {
            window.afdInitScripts[controlType].call(this, controlType, resolve, constructor);
          } catch (err) {
            console.error('Problem initialising AFD Control');
            console.error(err);
          }
        });
      }; // Definitions for `data-afd-control=`


      dataDefinition(); // If this is post render version

      if (typeof postRender !== 'undefined') {
        $(document).ready(function () {
          $(document).trigger('afd::initPostRender');
        });
        $(document).on('afd::initPostRender', function () {
          try {
            if (typeof afdOptions.postRender === 'undefined') {
              throw 'Post Render version of plugin used bit no post render options supplied';
            }

            postRender(afdOptions.postRender);
            $(document).trigger('afd:postRenderInitComplete');
          } catch (e) {
            console.error(e);
          }

          $(document).trigger('afd::page_ready');
        });
      }
    })($$1);

})));
//# sourceMappingURL=afd.phone.jquery.1.9.2.min.js.map
